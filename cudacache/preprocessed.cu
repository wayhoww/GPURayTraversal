#line 1 "C:\\Users\\wangweihao\\Documents\\GPURayTraversal\\src\\rt\\cuda\\RendererKernels.cu"
#line 1 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"























































#line 57 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"









#line 67 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"
#pragma warning(push)
#pragma warning(disable: 4820)
#line 70 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"
#line 71 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"












#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"

















#line 77 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"






#line 84 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"






#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"





#line 97 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"



#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"













#line 115 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"






#line 122 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"











#line 134 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"




















#line 155 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"







#line 163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"



#line 167 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"

#line 169 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"
#line 170 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"















#line 186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"





#line 192 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"





#line 198 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"





#line 204 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"






#line 211 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"







#line 219 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"





#line 225 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"





#line 231 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"





#line 237 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"

#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"








#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"







#pragma once






















#line 32 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"

#line 34 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
#line 35 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"


    
#line 39 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"






    
    

#line 49 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
        


            
        #line 54 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
    #line 55 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
#line 56 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"

#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"













#pragma once







































































































































#line 151 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"



#line 155 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"
































#line 188 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"

#line 190 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"





#line 196 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"



#line 200 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"






#line 207 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"











#line 219 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"








#line 228 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"
#line 229 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"































































































































































































































































































































































































































































































#pragma region Input Buffer SAL 1 compatibility macros



























































































































































































































































































































































































































































































































































































































































































































































































#pragma endregion Input Buffer SAL 1 compatibility macros

















































































#line 1555 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"






























#line 1586 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"
























#line 1611 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"












#line 1624 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"






































#line 1663 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"















































































































#line 1775 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"






































































































#line 1878 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"








































































































































































#line 2047 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"





































































































#line 2149 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"



















































































































































































































#line 2361 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"
extern "C" {




#line 2367 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"



































































































































































































































#line 2595 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    

#line 2634 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"









































































































































































































































#line 2868 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"









#line 2878 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"



    
    


#line 2886 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"
#line 2887 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"






#line 2894 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"
#line 2895 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"






#line 2902 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"
#line 2903 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"











#line 2915 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"

































#line 2949 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"






















}
#line 2973 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"

#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\concurrencysal.h"


















#pragma once


extern "C" {
#line 24 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\concurrencysal.h"











































































































































































































































































#line 292 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\concurrencysal.h"



#line 296 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\concurrencysal.h"
















































#line 345 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\concurrencysal.h"











































#line 389 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\concurrencysal.h"


}
#line 393 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\concurrencysal.h"

#line 395 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\concurrencysal.h"
#line 2975 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\sal.h"
#line 58 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"










#pragma once



#pragma pack(push, 8)



    


        
    #line 24 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"
#line 25 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"




    


        
    #line 34 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"
#line 35 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"



    
#line 40 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"




    
#line 46 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"

#pragma warning(push)
#pragma warning(disable:   4514 4820 )


extern "C" {
#line 53 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"



#line 57 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"


    
    


        typedef unsigned int uintptr_t;
    #line 65 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"
#line 66 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"


    
    


        typedef char* va_list;
    #line 74 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"
#line 75 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"


    


#line 81 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"





#line 87 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"



#line 91 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"
    
    
#line 94 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"











#line 106 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"

    

    
    
    




















































#line 165 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"


} 
#line 169 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"


    extern "C++"
    {
        template <typename _Ty>
        struct __vcrt_va_list_is_reference
        {
            enum : bool { __the_value = false };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_assert_va_start_is_not_reference
        {
            static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value,
                "va_start argument must not have reference type and must not be parenthesized");
        };
    } 

    





#line 206 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vadefs.h"

#pragma warning(pop) 
#pragma pack(pop)
#line 59 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"

#pragma warning(push)
#pragma warning(disable:   4514 4820 )






    



    





















#line 95 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"

__pragma(pack(push, 8)) extern "C" {




    


        
    #line 106 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
#line 107 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
















    

#line 126 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"

#line 128 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
        
    #line 130 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
#line 131 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"


    

#line 136 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
        
    #line 138 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
#line 139 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"





#line 145 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
    
    
#line 148 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"




    
#line 154 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"








    


#line 166 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"



#line 170 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
    
#line 172 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"




    
#line 178 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"


    
        
        
    

#line 186 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
#line 187 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"










    typedef unsigned int     size_t;
    typedef int              ptrdiff_t;
    typedef int              intptr_t;
#line 201 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"


    typedef bool  __vcrt_bool;






#line 211 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"



    
#line 216 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"


    
#line 220 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"


    
#line 224 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"








    
        
    

#line 237 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
#line 238 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"



#line 242 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
    
#line 244 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"



#line 248 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"


    extern "C++"
    {
        template <typename _CountofType, size_t _SizeOfArray>
        char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

        
    }


#line 260 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"



#line 264 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"


    
        
    



#line 273 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"

    


#line 278 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"


#line 281 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
        
        
    #line 284 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"

    
#line 287 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"



#line 291 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"



    


        
    

#line 301 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
#line 302 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"


    


#line 308 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"






#line 315 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"


    
        
    





#line 326 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
#line 327 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"



#line 331 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"


    
        
    


#line 339 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
#line 340 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"


    void __cdecl __security_init_cookie(void);

    
        void __fastcall __security_check_cookie(  uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure(void);
    





#line 354 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
#line 355 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"

extern uintptr_t __security_cookie;


    
    
    
#line 363 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"

} __pragma(pack(pop))

#pragma warning(pop) 

#line 369 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime.h"
#line 10 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"







#pragma once












    


        
    #line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"



    
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"













    
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


    











        
    #line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


    


        
    #line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"

#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {







    

#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"

#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
        
    #line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"




    
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


    

#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"

#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
        
    #line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"



#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
    
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


    


#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"





#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
    
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"





    
#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"



#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
    
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"









    
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"













    


        
    #line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 172 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"



#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
    
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"



#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
    
#line 184 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"



#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
    
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"









extern "C++"
{
    template<bool _Enable, typename _Ty>
    struct _CrtEnableIf;

    template<typename _Ty>
    struct _CrtEnableIf<true, _Ty>
    {
        typedef _Ty _Type;
    };
}
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


    typedef bool  __crt_bool;






#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"










    
        
    #line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"








#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"



















    

#line 265 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
        
    #line 267 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"



#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


    
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


 
  

#line 282 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
   
  #line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
 





#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 292 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"







    

















        
    #line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


    
#line 324 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


    
        
    

#line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 332 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"

























 void __cdecl _invalid_parameter_noinfo(void);
 __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
 void __cdecl _invoke_watson(
      wchar_t const* _Expression,
      wchar_t const* _FunctionName,
      wchar_t const* _FileName,
            unsigned int _LineNo,
            uintptr_t _Reserved);


    



        
        
        
        
        
        
        
        
        
        
        
        

    #line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"












    


#line 405 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"



#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


    
        
    



#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"









    






        
    #line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


    


        
    #line 445 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"



#line 450 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"













#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"















#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"





    
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"



#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


    

#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


    


        


            
        #line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
    #line 508 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 509 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"



#line 513 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"





#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


    


        



    #line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 530 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


    
        
    



#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"

    
        
        
        
    



#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"

    
        
              
        

#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
    



#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"

    
        
    



#line 569 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"

    
        
    



#line 577 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 578 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


    
#line 582 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"








typedef int                           errno_t;
typedef unsigned short                wint_t;
typedef unsigned short                wctype_t;
typedef long                          __time32_t;
typedef __int64                       __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
      int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data*    locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t;

typedef struct _Mbstatet
{ 
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;



#line 622 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"



#line 626 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


    


        typedef __time64_t time_t;
    #line 633 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 634 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"



    
#line 639 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"


    typedef size_t rsize_t;
#line 643 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"










    

        










        










        










        










        










        










        










        










        










        












        












        
















    














#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 814 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"












































































    













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1865 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"

        
        
        
        

        

            


            


            


            


            


            


            


            


            



            



            


            


            


            


            


            


            


            


            


            


            



            



            



            


            



            




            

            




            

            




            

            




            

            




            

            




            

            




            

            




            

        











































#line 2055 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
    #line 2056 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"
#line 2057 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt.h"

} __pragma(pack(pop))


#pragma warning(pop) 
#line 11 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"










    

#line 24 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"
        
    #line 26 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"
#line 27 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"



    

#line 33 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"
        
    #line 35 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"
#line 36 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"



    

#line 42 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"
        
    #line 44 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"
#line 45 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"





    


#line 54 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"


#line 57 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"
        
        
    #line 60 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"
#line 61 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"


    

#line 66 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"
        

#line 69 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"
            
        #line 71 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"
    #line 72 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"
#line 73 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"


    

#line 78 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"

#line 80 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"
        
    #line 82 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"
#line 83 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"
#line 239 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"


#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"



#line 246 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"

#line 248 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"






#line 255 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"
#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstdarg"





#pragma once


#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"





#pragma once








#line 16 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 18 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"
#line 19 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



















































































































































































































































































































































#line 359 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 361 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"
#line 362 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 366 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#pragma once

























#line 33 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 39 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 45 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 51 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 57 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 63 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 69 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 75 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 81 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 87 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 93 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 99 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 105 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 111 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 117 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 123 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 129 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 135 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 141 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 147 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 153 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 159 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 165 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 171 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 177 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 183 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 189 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 195 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 201 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 207 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 213 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 219 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 225 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 231 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 237 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 243 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 249 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 255 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 261 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 267 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 273 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 279 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 285 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 291 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 297 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"






#line 304 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 310 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 316 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 322 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 328 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 334 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 340 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 346 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 352 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 358 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 364 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 370 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 376 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 382 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 388 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 394 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 400 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 406 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 412 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 418 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 424 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 430 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 436 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 442 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 448 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 454 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 460 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 466 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 472 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 478 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 484 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 490 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 496 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 502 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 508 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 514 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"






#line 521 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 527 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 533 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 539 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"






#line 546 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 552 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 558 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"







#line 566 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 572 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 578 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"





#line 584 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"



#line 588 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"

#line 590 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"
#line 591 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xkeycheck.h"
#line 368 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"




#line 373 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 375 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"
#line 376 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 380 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 384 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"










#line 395 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"











#line 407 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"









#line 417 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"
#line 418 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"







#line 426 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"






#line 433 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"




#line 438 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 440 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 444 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"






































#line 483 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"




















#line 504 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"
#line 505 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"






#line 512 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"
#line 513 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"











#line 525 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"
#line 526 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"







#line 534 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"
#line 535 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"









#line 547 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"












#line 560 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"
#line 561 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 565 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 569 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"







#line 577 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 579 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"




#line 584 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 586 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"




#line 591 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 593 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"




#line 598 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"




#line 603 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"




#line 608 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"




#line 613 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"







#line 621 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"




#line 626 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"













#line 640 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"
#line 641 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"






#line 648 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"










#line 659 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"










#line 670 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"





#line 676 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"








#line 685 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"
#line 686 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"












#line 700 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 702 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"







#line 711 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 713 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"









#line 724 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 726 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"










#line 738 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 740 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"









#line 751 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 753 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"











#line 766 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 768 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"









#line 779 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 781 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"








#line 791 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 793 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"








#line 803 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 805 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"









#line 816 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 818 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"













#line 833 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 835 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"








#line 845 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 847 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"














#line 863 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 865 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"
















#line 882 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"













#line 897 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 899 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"










#line 911 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 913 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"











#line 925 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"












#line 938 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"










#line 950 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 952 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"









#line 963 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 965 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"








#line 974 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 976 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"









#line 987 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 989 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"








#line 999 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 1001 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"








#line 1011 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 1013 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"







#line 1022 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 1024 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"







#line 1033 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 1035 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"








#line 1045 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 1047 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"






#line 1054 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 1058 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 1062 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 1066 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 1070 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 1074 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 1078 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 1082 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 1086 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 1090 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"











#line 1102 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"





#line 1108 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"




















#line 1129 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

























































#line 1187 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"














































































































#line 1298 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"




#line 1303 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 1305 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"
#line 1306 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 1310 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 1312 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 1316 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 1318 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 1320 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 1324 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 1326 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 1330 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"










#line 1341 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"




#line 1346 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 1348 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"


































#line 1383 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"







#line 1391 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 1395 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"



#line 1399 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"












#line 1412 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"


#line 1415 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"


#line 1418 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"
#line 1419 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"





#line 1425 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"

#line 1427 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"
#line 1428 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals_core.h"
#line 10 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstdarg"


#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\stdarg.h"







#pragma once




#pragma warning(push)
#pragma warning(disable:   4514 4820 )

__pragma(pack(push, 8)) extern "C" {










} __pragma(pack(pop))

#pragma warning(pop) 
#line 13 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstdarg"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294  4984  )




namespace std {
using ::va_list;
}



#pragma warning(pop)
#pragma pack(pop)

#line 31 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstdarg"
#line 32 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstdarg"
#line 256 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"
#line 257 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"





























#line 287 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"
#line 288 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"

#line 290 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"



#line 294 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"

#line 296 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"




#line 301 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_config.h"
#line 84 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"







#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"























































#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"











































#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"










#line 114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"










































#line 157 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"








#line 168 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"



#line 172 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"








#line 181 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"




#line 186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"










#line 198 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"




#line 203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"



#line 207 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"



#line 211 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"



#line 215 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"



#line 219 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"



#line 223 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"
        





#line 230 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"








#line 239 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"


#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 61 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"







enum __declspec(__device_builtin__) cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};




#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"

#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"























































#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"






















































































































































































#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 61 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"























































#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"








#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"






















































































































































































#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"
#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 67 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"






















#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"







#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"

struct __declspec(__device_builtin__) char1
{
    signed char x;
};

struct __declspec(__device_builtin__) uchar1
{
    unsigned char x;
};


struct __declspec(__device_builtin__) __declspec(align(2)) char2
{
    signed char x, y;
};

struct __declspec(__device_builtin__) __declspec(align(2)) uchar2
{
    unsigned char x, y;
};

struct __declspec(__device_builtin__) char3
{
    signed char x, y, z;
};

struct __declspec(__device_builtin__) uchar3
{
    unsigned char x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(4)) char4
{
    signed char x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(4)) uchar4
{
    unsigned char x, y, z, w;
};

struct __declspec(__device_builtin__) short1
{
    short x;
};

struct __declspec(__device_builtin__) ushort1
{
    unsigned short x;
};

struct __declspec(__device_builtin__) __declspec(align(4)) short2
{
    short x, y;
};

struct __declspec(__device_builtin__) __declspec(align(4)) ushort2
{
    unsigned short x, y;
};

struct __declspec(__device_builtin__) short3
{
    short x, y, z;
};

struct __declspec(__device_builtin__) ushort3
{
    unsigned short x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(8)) short4 { short x; short y; short z; short w; };
struct __declspec(__device_builtin__) __declspec(align(8)) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct __declspec(__device_builtin__) int1
{
    int x;
};

struct __declspec(__device_builtin__) uint1
{
    unsigned int x;
};

struct __declspec(__device_builtin__) __declspec(align(8)) int2 { int x; int y; };
struct __declspec(__device_builtin__) __declspec(align(8)) uint2 { unsigned int x; unsigned int y; };

struct __declspec(__device_builtin__) int3
{
    int x, y, z;
};

struct __declspec(__device_builtin__) uint3
{
    unsigned int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) int4
{
    int x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) uint4
{
    unsigned int x, y, z, w;
};

struct __declspec(__device_builtin__) long1
{
    long int x;
};

struct __declspec(__device_builtin__) ulong1
{
    unsigned long x;
};


struct __declspec(__device_builtin__) __declspec(align(8)) long2 { long int x; long int y; };
struct __declspec(__device_builtin__) __declspec(align(8)) ulong2 { unsigned long int x; unsigned long int y; };












#line 233 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"

struct __declspec(__device_builtin__) long3
{
    long int x, y, z;
};

struct __declspec(__device_builtin__) ulong3
{
    unsigned long int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) long4
{
    long int x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulong4
{
    unsigned long int x, y, z, w;
};

struct __declspec(__device_builtin__) float1
{
    float x;
};















#line 275 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"

struct __declspec(__device_builtin__) __declspec(align(8)) float2 { float x; float y; };

#line 279 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"


struct __declspec(__device_builtin__) float3
{
    float x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) float4
{
    float x, y, z, w;
};

struct __declspec(__device_builtin__) longlong1
{
    long long int x;
};

struct __declspec(__device_builtin__) ulonglong1
{
    unsigned long long int x;
};

struct __declspec(__device_builtin__) __declspec(align(16)) longlong2
{
    long long int x, y;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulonglong2
{
    unsigned long long int x, y;
};

struct __declspec(__device_builtin__) longlong3
{
    long long int x, y, z;
};

struct __declspec(__device_builtin__) ulonglong3
{
    unsigned long long int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) longlong4
{
    long long int x, y, z ,w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct __declspec(__device_builtin__) double1
{
    double x;
};

struct __declspec(__device_builtin__) __declspec(align(16)) double2
{
    double x, y;
};

struct __declspec(__device_builtin__) double3
{
    double x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) double4
{
    double x, y, z, w;
};





#line 356 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"







typedef __declspec(__device_builtin__) struct char1 char1;
typedef __declspec(__device_builtin__) struct uchar1 uchar1;
typedef __declspec(__device_builtin__) struct char2 char2;
typedef __declspec(__device_builtin__) struct uchar2 uchar2;
typedef __declspec(__device_builtin__) struct char3 char3;
typedef __declspec(__device_builtin__) struct uchar3 uchar3;
typedef __declspec(__device_builtin__) struct char4 char4;
typedef __declspec(__device_builtin__) struct uchar4 uchar4;
typedef __declspec(__device_builtin__) struct short1 short1;
typedef __declspec(__device_builtin__) struct ushort1 ushort1;
typedef __declspec(__device_builtin__) struct short2 short2;
typedef __declspec(__device_builtin__) struct ushort2 ushort2;
typedef __declspec(__device_builtin__) struct short3 short3;
typedef __declspec(__device_builtin__) struct ushort3 ushort3;
typedef __declspec(__device_builtin__) struct short4 short4;
typedef __declspec(__device_builtin__) struct ushort4 ushort4;
typedef __declspec(__device_builtin__) struct int1 int1;
typedef __declspec(__device_builtin__) struct uint1 uint1;
typedef __declspec(__device_builtin__) struct int2 int2;
typedef __declspec(__device_builtin__) struct uint2 uint2;
typedef __declspec(__device_builtin__) struct int3 int3;
typedef __declspec(__device_builtin__) struct uint3 uint3;
typedef __declspec(__device_builtin__) struct int4 int4;
typedef __declspec(__device_builtin__) struct uint4 uint4;
typedef __declspec(__device_builtin__) struct long1 long1;
typedef __declspec(__device_builtin__) struct ulong1 ulong1;
typedef __declspec(__device_builtin__) struct long2 long2;
typedef __declspec(__device_builtin__) struct ulong2 ulong2;
typedef __declspec(__device_builtin__) struct long3 long3;
typedef __declspec(__device_builtin__) struct ulong3 ulong3;
typedef __declspec(__device_builtin__) struct long4 long4;
typedef __declspec(__device_builtin__) struct ulong4 ulong4;
typedef __declspec(__device_builtin__) struct float1 float1;
typedef __declspec(__device_builtin__) struct float2 float2;
typedef __declspec(__device_builtin__) struct float3 float3;
typedef __declspec(__device_builtin__) struct float4 float4;
typedef __declspec(__device_builtin__) struct longlong1 longlong1;
typedef __declspec(__device_builtin__) struct ulonglong1 ulonglong1;
typedef __declspec(__device_builtin__) struct longlong2 longlong2;
typedef __declspec(__device_builtin__) struct ulonglong2 ulonglong2;
typedef __declspec(__device_builtin__) struct longlong3 longlong3;
typedef __declspec(__device_builtin__) struct ulonglong3 ulonglong3;
typedef __declspec(__device_builtin__) struct longlong4 longlong4;
typedef __declspec(__device_builtin__) struct ulonglong4 ulonglong4;
typedef __declspec(__device_builtin__) struct double1 double1;
typedef __declspec(__device_builtin__) struct double2 double2;
typedef __declspec(__device_builtin__) struct double3 double3;
typedef __declspec(__device_builtin__) struct double4 double4;







struct __declspec(__device_builtin__) dim3
{
    unsigned int x, y, z;





#line 427 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
    __declspec(__host__) __declspec(__device__) dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
    __declspec(__host__) __declspec(__device__) dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    __declspec(__host__) __declspec(__device__) operator uint3(void) const { uint3 t; t.x = x; t.y = y; t.z = z; return t; }
#line 431 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 432 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
};

typedef __declspec(__device_builtin__) struct dim3 dim3;






#line 442 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"

#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"



















#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\limits.h"







#pragma once




#pragma warning(push)
#pragma warning(disable:   4514 4820 )

__pragma(pack(push, 8)) extern "C" {







    
    



#line 30 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\limits.h"
































    
    


        
    #line 68 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\limits.h"
#line 69 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\limits.h"


    
        
    #line 74 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\limits.h"
#line 75 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\limits.h"

} __pragma(pack(pop))

#pragma warning(pop) 
#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stddef.h"







#pragma once





#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {




    namespace std
    {
        typedef decltype(__nullptr) nullptr_t;
    }

    using ::std::nullptr_t;
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stddef.h"





     int* __cdecl _errno(void);
    

     errno_t __cdecl _set_errno(  int _Value);
     errno_t __cdecl _get_errno(  int* _Value);

#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stddef.h"









#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stddef.h"
    
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stddef.h"

 extern unsigned long  __cdecl __threadid(void);

 extern uintptr_t __cdecl __threadhandle(void);



} __pragma(pack(pop))

#pragma warning(pop) 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stddef.h"
#line 83 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 84 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"

















 












































































#line 179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"




#line 184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"





#line 190 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"











enum __declspec(__device_builtin__) cudaError
{
    




    cudaSuccess                           =      0,
  
    



    cudaErrorInvalidValue                 =     1,
  
    



    cudaErrorMemoryAllocation             =      2,
  
    



    cudaErrorInitializationError          =      3,
  
    




    cudaErrorCudartUnloading              =     4,

    




    cudaErrorProfilerDisabled             =     5,

    





    cudaErrorProfilerNotInitialized       =     6,

    




    cudaErrorProfilerAlreadyStarted       =     7,

    




     cudaErrorProfilerAlreadyStopped       =    8,
  
    






    cudaErrorInvalidConfiguration         =      9,
  
    



    cudaErrorInvalidPitchValue            =     12,
  
    



    cudaErrorInvalidSymbol                =     13,
  
    





    cudaErrorInvalidHostPointer           =     16,
  
    





    cudaErrorInvalidDevicePointer         =     17,
  
    



    cudaErrorInvalidTexture               =     18,
  
    



    cudaErrorInvalidTextureBinding        =     19,
  
    




    cudaErrorInvalidChannelDescriptor     =     20,
  
    



    cudaErrorInvalidMemcpyDirection       =     21,
  
    







    cudaErrorAddressOfConstant            =     22,
  
    






    cudaErrorTextureFetchFailed           =     23,
  
    






    cudaErrorTextureNotBound              =     24,
  
    






    cudaErrorSynchronizationError         =     25,
  
    



    cudaErrorInvalidFilterSetting         =     26,
  
    



    cudaErrorInvalidNormSetting           =     27,
  
    





    cudaErrorMixedDeviceExecution         =     28,

    





    cudaErrorNotYetImplemented            =     31,
  
    






    cudaErrorMemoryValueTooLarge          =     32,
  
    




    cudaErrorStubLibrary                  =     34,

    




    cudaErrorInsufficientDriver           =     35,

    




    cudaErrorCallRequiresNewerDriver      =     36,
  
    



    cudaErrorInvalidSurface               =     37,
  
    



    cudaErrorDuplicateVariableName        =     43,
  
    



    cudaErrorDuplicateTextureName         =     44,
  
    



    cudaErrorDuplicateSurfaceName         =     45,
  
    







    cudaErrorDevicesUnavailable           =     46,
  
    










    cudaErrorIncompatibleDriverContext    =     49,
    
    



    cudaErrorMissingConfiguration         =      52,
  
    






    cudaErrorPriorLaunchFailure           =      53,

    




    cudaErrorLaunchMaxDepthExceeded       =     65,

    





    cudaErrorLaunchFileScopedTex          =     66,

    





    cudaErrorLaunchFileScopedSurf         =     67,

    












    cudaErrorSyncDepthExceeded            =     68,

    









    cudaErrorLaunchPendingCountExceeded   =     69,
  
    



    cudaErrorInvalidDeviceFunction        =      98,
  
    



    cudaErrorNoDevice                     =     100,
  
    




    cudaErrorInvalidDevice                =     101,

    


    cudaErrorDeviceNotLicensed            =     102,

   






   cudaErrorSoftwareValidityNotEstablished  =     103,

    


    cudaErrorStartupFailure               =    127,
  
    


    cudaErrorInvalidKernelImage           =     200,

    







    cudaErrorDeviceUninitialized          =     201,

    


    cudaErrorMapBufferObjectFailed        =     205,
  
    


    cudaErrorUnmapBufferObjectFailed      =     206,

    



    cudaErrorArrayIsMapped                =     207,

    


    cudaErrorAlreadyMapped                =     208,
  
    





    cudaErrorNoKernelImageForDevice       =     209,

    


    cudaErrorAlreadyAcquired              =     210,

    


    cudaErrorNotMapped                    =     211,

    



    cudaErrorNotMappedAsArray             =     212,

    



    cudaErrorNotMappedAsPointer           =     213,
  
    



    cudaErrorECCUncorrectable             =     214,
  
    



    cudaErrorUnsupportedLimit             =     215,
    
    



    cudaErrorDeviceAlreadyInUse           =     216,

    



    cudaErrorPeerAccessUnsupported        =     217,

    



    cudaErrorInvalidPtx                   =     218,

    


    cudaErrorInvalidGraphicsContext       =     219,

    



    cudaErrorNvlinkUncorrectable          =     220,

    




    cudaErrorJitCompilerNotFound          =     221,

    




    cudaErrorUnsupportedPtxVersion        =     222,

    




    cudaErrorJitCompilationDisabled       =     223,

    


    cudaErrorUnsupportedExecAffinity      =     224,

    


    cudaErrorInvalidSource                =     300,

    


    cudaErrorFileNotFound                 =     301,
  
    


    cudaErrorSharedObjectSymbolNotFound   =     302,
  
    


    cudaErrorSharedObjectInitFailed       =     303,

    


    cudaErrorOperatingSystem              =     304,
  
    




    cudaErrorInvalidResourceHandle        =     400,

    



    cudaErrorIllegalState                 =     401,

    




    cudaErrorSymbolNotFound               =     500,
  
    





    cudaErrorNotReady                     =     600,

    





    cudaErrorIllegalAddress               =     700,
  
    






    cudaErrorLaunchOutOfResources         =      701,
  
    








    cudaErrorLaunchTimeout                =      702,

    



    cudaErrorLaunchIncompatibleTexturing  =     703,
      
    




    cudaErrorPeerAccessAlreadyEnabled     =     704,
    
    




    cudaErrorPeerAccessNotEnabled         =     705,
  
    










    cudaErrorSetOnActiveProcess           =     708,

    




    cudaErrorContextIsDestroyed           =     709,

    




    cudaErrorAssert                        =    710,
  
    




    cudaErrorTooManyPeers                 =     711,
  
    



    cudaErrorHostMemoryAlreadyRegistered  =     712,
        
    



    cudaErrorHostMemoryNotRegistered      =     713,

    






    cudaErrorHardwareStackError           =     714,

    





    cudaErrorIllegalInstruction           =     715,

    






    cudaErrorMisalignedAddress            =     716,

    








    cudaErrorInvalidAddressSpace          =     717,

    





    cudaErrorInvalidPc                    =     718,
  
    








    cudaErrorLaunchFailure                =      719,

    






    cudaErrorCooperativeLaunchTooLarge    =     720,
    
    


    cudaErrorNotPermitted                 =     800,

    



    cudaErrorNotSupported                 =     801,

    






    cudaErrorSystemNotReady               =     802,

    




    cudaErrorSystemDriverMismatch         =     803,

    






    cudaErrorCompatNotSupportedOnDevice   =     804,

    


    cudaErrorMpsConnectionFailed          =     805,

    


    cudaErrorMpsRpcFailure                =     806,

    



    cudaErrorMpsServerNotReady            =     807,

    


    cudaErrorMpsMaxClientsReached         =     808,

    


    cudaErrorMpsMaxConnectionsReached     =     809,

    


    cudaErrorStreamCaptureUnsupported     =    900,

    



    cudaErrorStreamCaptureInvalidated     =    901,

    



    cudaErrorStreamCaptureMerge           =    902,

    


    cudaErrorStreamCaptureUnmatched       =    903,

    



    cudaErrorStreamCaptureUnjoined        =    904,

    




    cudaErrorStreamCaptureIsolation       =    905,

    



    cudaErrorStreamCaptureImplicit        =    906,

    



    cudaErrorCapturedEvent                =    907,
  
    




    cudaErrorStreamCaptureWrongThread     =    908,

    


    cudaErrorTimeout                      =    909,

    



    cudaErrorGraphExecUpdateFailure       =    910,

    







    cudaErrorExternalDevice               =    911,

    


    cudaErrorUnknown                      =    999,

    





    cudaErrorApiFailureBase               =  10000
};




enum __declspec(__device_builtin__) cudaChannelFormatKind
{
    cudaChannelFormatKindSigned                         =   0,      
    cudaChannelFormatKindUnsigned                       =   1,      
    cudaChannelFormatKindFloat                          =   2,      
    cudaChannelFormatKindNone                           =   3,      
    cudaChannelFormatKindNV12                           =   4,      
    cudaChannelFormatKindUnsignedNormalized8X1          =   5,      
    cudaChannelFormatKindUnsignedNormalized8X2          =   6,      
    cudaChannelFormatKindUnsignedNormalized8X4          =   7,      
    cudaChannelFormatKindUnsignedNormalized16X1         =   8,      
    cudaChannelFormatKindUnsignedNormalized16X2         =   9,      
    cudaChannelFormatKindUnsignedNormalized16X4         =   10,     
    cudaChannelFormatKindSignedNormalized8X1            =   11,     
    cudaChannelFormatKindSignedNormalized8X2            =   12,     
    cudaChannelFormatKindSignedNormalized8X4            =   13,     
    cudaChannelFormatKindSignedNormalized16X1           =   14,     
    cudaChannelFormatKindSignedNormalized16X2           =   15,     
    cudaChannelFormatKindSignedNormalized16X4           =   16,     
    cudaChannelFormatKindUnsignedBlockCompressed1       =   17,     
    cudaChannelFormatKindUnsignedBlockCompressed1SRGB   =   18,     
    cudaChannelFormatKindUnsignedBlockCompressed2       =   19,     
    cudaChannelFormatKindUnsignedBlockCompressed2SRGB   =   20,     
    cudaChannelFormatKindUnsignedBlockCompressed3       =   21,     
    cudaChannelFormatKindUnsignedBlockCompressed3SRGB   =   22,     
    cudaChannelFormatKindUnsignedBlockCompressed4       =   23,     
    cudaChannelFormatKindSignedBlockCompressed4         =   24,     
    cudaChannelFormatKindUnsignedBlockCompressed5       =   25,     
    cudaChannelFormatKindSignedBlockCompressed5         =   26,     
    cudaChannelFormatKindUnsignedBlockCompressed6H      =   27,     
    cudaChannelFormatKindSignedBlockCompressed6H        =   28,     
    cudaChannelFormatKindUnsignedBlockCompressed7       =   29,     
    cudaChannelFormatKindUnsignedBlockCompressed7SRGB   =   30      
};




struct __declspec(__device_builtin__) cudaChannelFormatDesc
{
    int                        x; 
    int                        y; 
    int                        z; 
    int                        w; 
    enum cudaChannelFormatKind f; 
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;









struct __declspec(__device_builtin__) cudaArraySparseProperties {
    struct {
        unsigned int width;             
        unsigned int height;            
        unsigned int depth;             
    } tileExtent;
    unsigned int miptailFirstLevel;        
    unsigned long long miptailSize;     
    unsigned int flags;                 
    unsigned int reserved[4];
};




enum __declspec(__device_builtin__) cudaMemoryType
{
    cudaMemoryTypeUnregistered = 0, 
    cudaMemoryTypeHost         = 1, 
    cudaMemoryTypeDevice       = 2, 
    cudaMemoryTypeManaged      = 3  
};




enum __declspec(__device_builtin__) cudaMemcpyKind
{
    cudaMemcpyHostToHost          =   0,      
    cudaMemcpyHostToDevice        =   1,      
    cudaMemcpyDeviceToHost        =   2,      
    cudaMemcpyDeviceToDevice      =   3,      
    cudaMemcpyDefault             =   4       
};






struct __declspec(__device_builtin__) cudaPitchedPtr
{
    void   *ptr;      
    size_t  pitch;    
    size_t  xsize;    
    size_t  ysize;    
};






struct __declspec(__device_builtin__) cudaExtent
{
    size_t width;     
    size_t height;    
    size_t depth;     
};






struct __declspec(__device_builtin__) cudaPos
{
    size_t x;     
    size_t y;     
    size_t z;     
};




struct __declspec(__device_builtin__) cudaMemcpy3DParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
  
    struct cudaExtent      extent;    
    enum cudaMemcpyKind    kind;      
};




struct __declspec(__device_builtin__) cudaMemcpy3DPeerParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
    int                    srcDevice; 
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
    int                    dstDevice; 
  
    struct cudaExtent      extent;    
};




struct __declspec(__device_builtin__)  cudaMemsetParams {
    void *dst;                              
    size_t pitch;                           
    unsigned int value;                     
    unsigned int elementSize;               
    size_t width;                           
    size_t height;                          
};




enum __declspec(__device_builtin__)  cudaAccessProperty {
    cudaAccessPropertyNormal = 0,       
    cudaAccessPropertyStreaming = 1,    
    cudaAccessPropertyPersisting = 2    
};












struct __declspec(__device_builtin__) cudaAccessPolicyWindow {
    void *base_ptr;                     
    size_t num_bytes;                   
    float hitRatio;                     
    enum cudaAccessProperty hitProp;    
    enum cudaAccessProperty missProp;   
};





#line 1301 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"





typedef void (__stdcall *cudaHostFn_t)(void *userData);




struct __declspec(__device_builtin__) cudaHostNodeParams {
    cudaHostFn_t fn;    
    void* userData; 
};




enum __declspec(__device_builtin__) cudaStreamCaptureStatus {
    cudaStreamCaptureStatusNone        = 0, 
    cudaStreamCaptureStatusActive      = 1, 
    cudaStreamCaptureStatusInvalidated = 2  

};





enum __declspec(__device_builtin__) cudaStreamCaptureMode {
    cudaStreamCaptureModeGlobal      = 0,
    cudaStreamCaptureModeThreadLocal = 1,
    cudaStreamCaptureModeRelaxed     = 2
};

enum __declspec(__device_builtin__) cudaSynchronizationPolicy {
    cudaSyncPolicyAuto = 1,
    cudaSyncPolicySpin = 2,
    cudaSyncPolicyYield = 3,
    cudaSyncPolicyBlockingSync = 4
};




enum __declspec(__device_builtin__) cudaStreamAttrID {
    cudaStreamAttributeAccessPolicyWindow     = 1,  
    cudaStreamAttributeSynchronizationPolicy  = 3   
};




union __declspec(__device_builtin__) cudaStreamAttrValue {
    struct cudaAccessPolicyWindow accessPolicyWindow;
    enum cudaSynchronizationPolicy syncPolicy;
};




enum __declspec(__device_builtin__) cudaStreamUpdateCaptureDependenciesFlags {
    cudaStreamAddCaptureDependencies = 0x0, 
    cudaStreamSetCaptureDependencies = 0x1  
};




enum __declspec(__device_builtin__) cudaUserObjectFlags {
    cudaUserObjectNoDestructorSync = 0x1  
};




enum __declspec(__device_builtin__) cudaUserObjectRetainFlags {
    cudaGraphUserObjectMove = 0x1  
};




struct cudaGraphicsResource;




enum __declspec(__device_builtin__) cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone             = 0,  
    cudaGraphicsRegisterFlagsReadOnly         = 1,   
    cudaGraphicsRegisterFlagsWriteDiscard     = 2,  
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,  
    cudaGraphicsRegisterFlagsTextureGather    = 8   
};




enum __declspec(__device_builtin__) cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone         = 0,  
    cudaGraphicsMapFlagsReadOnly     = 1,  
    cudaGraphicsMapFlagsWriteDiscard = 2   
};




enum __declspec(__device_builtin__) cudaGraphicsCubeFace 
{
    cudaGraphicsCubeFacePositiveX = 0x00, 
    cudaGraphicsCubeFaceNegativeX = 0x01, 
    cudaGraphicsCubeFacePositiveY = 0x02, 
    cudaGraphicsCubeFaceNegativeY = 0x03, 
    cudaGraphicsCubeFacePositiveZ = 0x04, 
    cudaGraphicsCubeFaceNegativeZ = 0x05  
};




enum __declspec(__device_builtin__) cudaKernelNodeAttrID {
    cudaKernelNodeAttributeAccessPolicyWindow   = 1,   
    cudaKernelNodeAttributeCooperative          = 2    
};




union __declspec(__device_builtin__) cudaKernelNodeAttrValue {
    struct cudaAccessPolicyWindow accessPolicyWindow;          
    int cooperative;
};




enum __declspec(__device_builtin__) cudaResourceType
{
    cudaResourceTypeArray          = 0x00, 
    cudaResourceTypeMipmappedArray = 0x01, 
    cudaResourceTypeLinear         = 0x02, 
    cudaResourceTypePitch2D        = 0x03  
};




enum __declspec(__device_builtin__) cudaResourceViewFormat
{
    cudaResViewFormatNone                      = 0x00, 
    cudaResViewFormatUnsignedChar1             = 0x01, 
    cudaResViewFormatUnsignedChar2             = 0x02, 
    cudaResViewFormatUnsignedChar4             = 0x03, 
    cudaResViewFormatSignedChar1               = 0x04, 
    cudaResViewFormatSignedChar2               = 0x05, 
    cudaResViewFormatSignedChar4               = 0x06, 
    cudaResViewFormatUnsignedShort1            = 0x07, 
    cudaResViewFormatUnsignedShort2            = 0x08, 
    cudaResViewFormatUnsignedShort4            = 0x09, 
    cudaResViewFormatSignedShort1              = 0x0a, 
    cudaResViewFormatSignedShort2              = 0x0b, 
    cudaResViewFormatSignedShort4              = 0x0c, 
    cudaResViewFormatUnsignedInt1              = 0x0d, 
    cudaResViewFormatUnsignedInt2              = 0x0e, 
    cudaResViewFormatUnsignedInt4              = 0x0f, 
    cudaResViewFormatSignedInt1                = 0x10, 
    cudaResViewFormatSignedInt2                = 0x11, 
    cudaResViewFormatSignedInt4                = 0x12, 
    cudaResViewFormatHalf1                     = 0x13, 
    cudaResViewFormatHalf2                     = 0x14, 
    cudaResViewFormatHalf4                     = 0x15, 
    cudaResViewFormatFloat1                    = 0x16, 
    cudaResViewFormatFloat2                    = 0x17, 
    cudaResViewFormatFloat4                    = 0x18, 
    cudaResViewFormatUnsignedBlockCompressed1  = 0x19, 
    cudaResViewFormatUnsignedBlockCompressed2  = 0x1a, 
    cudaResViewFormatUnsignedBlockCompressed3  = 0x1b, 
    cudaResViewFormatUnsignedBlockCompressed4  = 0x1c, 
    cudaResViewFormatSignedBlockCompressed4    = 0x1d, 
    cudaResViewFormatUnsignedBlockCompressed5  = 0x1e, 
    cudaResViewFormatSignedBlockCompressed5    = 0x1f, 
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20, 
    cudaResViewFormatSignedBlockCompressed6H   = 0x21, 
    cudaResViewFormatUnsignedBlockCompressed7  = 0x22  
};




struct __declspec(__device_builtin__) cudaResourceDesc {
    enum cudaResourceType resType;             
    
    union {
        struct {
            cudaArray_t array;                 
        } array;
        struct {
            cudaMipmappedArray_t mipmap;       
        } mipmap;
        struct {
            void *devPtr;                      
            struct cudaChannelFormatDesc desc; 
            size_t sizeInBytes;                
        } linear;
        struct {
            void *devPtr;                      
            struct cudaChannelFormatDesc desc; 
            size_t width;                      
            size_t height;                     
            size_t pitchInBytes;               
        } pitch2D;
    } res;
};




struct __declspec(__device_builtin__) cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;           
    size_t                      width;            
    size_t                      height;           
    size_t                      depth;            
    unsigned int                firstMipmapLevel; 
    unsigned int                lastMipmapLevel;  
    unsigned int                firstLayer;       
    unsigned int                lastLayer;        
};




struct __declspec(__device_builtin__) cudaPointerAttributes
{
    



    enum cudaMemoryType type;

    








    int device;

    



    void *devicePointer;

    






    void *hostPointer;
};




struct __declspec(__device_builtin__) cudaFuncAttributes
{
   




   size_t sharedSizeBytes;

   



   size_t constSizeBytes;

   


   size_t localSizeBytes;

   




   int maxThreadsPerBlock;

   


   int numRegs;

   




   int ptxVersion;

   




   int binaryVersion;

   



   int cacheModeCA;

   




   int maxDynamicSharedSizeBytes;

   






   int preferredShmemCarveout;

















































};




enum __declspec(__device_builtin__) cudaFuncAttribute
{
    cudaFuncAttributeMaxDynamicSharedMemorySize = 8, 
    cudaFuncAttributePreferredSharedMemoryCarveout = 9, 








    cudaFuncAttributeMax
};




enum __declspec(__device_builtin__) cudaFuncCache
{
    cudaFuncCachePreferNone   = 0,    
    cudaFuncCachePreferShared = 1,    
    cudaFuncCachePreferL1     = 2,    
    cudaFuncCachePreferEqual  = 3     
};





enum __declspec(__device_builtin__) cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault   = 0,
    cudaSharedMemBankSizeFourByte  = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum __declspec(__device_builtin__) cudaSharedCarveout {
    cudaSharedmemCarveoutDefault      = -1,  
    cudaSharedmemCarveoutMaxShared    = 100, 
    cudaSharedmemCarveoutMaxL1        = 0    
};















enum __declspec(__device_builtin__) cudaComputeMode
{
    cudaComputeModeDefault          = 0,  
    cudaComputeModeExclusive        = 1,  
    cudaComputeModeProhibited       = 2,  
    cudaComputeModeExclusiveProcess = 3   
};




enum __declspec(__device_builtin__) cudaLimit
{
    cudaLimitStackSize                    = 0x00, 
    cudaLimitPrintfFifoSize               = 0x01, 
    cudaLimitMallocHeapSize               = 0x02, 
    cudaLimitDevRuntimeSyncDepth          = 0x03, 
    cudaLimitDevRuntimePendingLaunchCount = 0x04, 
    cudaLimitMaxL2FetchGranularity        = 0x05, 
    cudaLimitPersistingL2CacheSize        = 0x06  
};




enum __declspec(__device_builtin__) cudaMemoryAdvise
{
    cudaMemAdviseSetReadMostly          = 1, 
    cudaMemAdviseUnsetReadMostly        = 2, 
    cudaMemAdviseSetPreferredLocation   = 3, 
    cudaMemAdviseUnsetPreferredLocation = 4, 
    cudaMemAdviseSetAccessedBy          = 5, 
    cudaMemAdviseUnsetAccessedBy        = 6  
};




enum __declspec(__device_builtin__) cudaMemRangeAttribute
{
    cudaMemRangeAttributeReadMostly           = 1, 
    cudaMemRangeAttributePreferredLocation    = 2, 
    cudaMemRangeAttributeAccessedBy           = 3, 
    cudaMemRangeAttributeLastPrefetchLocation = 4  
};




enum __declspec(__device_builtin__) cudaOutputMode
{
    cudaKeyValuePair    = 0x00, 
    cudaCSV             = 0x01  
};




enum __declspec(__device_builtin__) cudaFlushGPUDirectRDMAWritesOptions {
    cudaFlushGPUDirectRDMAWritesOptionHost   = 1<<0, 
    cudaFlushGPUDirectRDMAWritesOptionMemOps = 1<<1  
};




enum __declspec(__device_builtin__) cudaGPUDirectRDMAWritesOrdering {
    cudaGPUDirectRDMAWritesOrderingNone       = 0,   
    cudaGPUDirectRDMAWritesOrderingOwner      = 100, 
    cudaGPUDirectRDMAWritesOrderingAllDevices = 200  
};




enum __declspec(__device_builtin__) cudaFlushGPUDirectRDMAWritesScope {
    cudaFlushGPUDirectRDMAWritesToOwner      = 100, 
    cudaFlushGPUDirectRDMAWritesToAllDevices = 200  
};




enum __declspec(__device_builtin__) cudaFlushGPUDirectRDMAWritesTarget {
    cudaFlushGPUDirectRDMAWritesTargetCurrentDevice 
};





enum __declspec(__device_builtin__) cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock             = 1,  
    cudaDevAttrMaxBlockDimX                   = 2,  
    cudaDevAttrMaxBlockDimY                   = 3,  
    cudaDevAttrMaxBlockDimZ                   = 4,  
    cudaDevAttrMaxGridDimX                    = 5,  
    cudaDevAttrMaxGridDimY                    = 6,  
    cudaDevAttrMaxGridDimZ                    = 7,  
    cudaDevAttrMaxSharedMemoryPerBlock        = 8,  
    cudaDevAttrTotalConstantMemory            = 9,  
    cudaDevAttrWarpSize                       = 10, 
    cudaDevAttrMaxPitch                       = 11, 
    cudaDevAttrMaxRegistersPerBlock           = 12, 
    cudaDevAttrClockRate                      = 13, 
    cudaDevAttrTextureAlignment               = 14, 
    cudaDevAttrGpuOverlap                     = 15, 
    cudaDevAttrMultiProcessorCount            = 16, 
    cudaDevAttrKernelExecTimeout              = 17, 
    cudaDevAttrIntegrated                     = 18, 
    cudaDevAttrCanMapHostMemory               = 19, 
    cudaDevAttrComputeMode                    = 20, 
    cudaDevAttrMaxTexture1DWidth              = 21, 
    cudaDevAttrMaxTexture2DWidth              = 22, 
    cudaDevAttrMaxTexture2DHeight             = 23, 
    cudaDevAttrMaxTexture3DWidth              = 24, 
    cudaDevAttrMaxTexture3DHeight             = 25, 
    cudaDevAttrMaxTexture3DDepth              = 26, 
    cudaDevAttrMaxTexture2DLayeredWidth       = 27, 
    cudaDevAttrMaxTexture2DLayeredHeight      = 28, 
    cudaDevAttrMaxTexture2DLayeredLayers      = 29, 
    cudaDevAttrSurfaceAlignment               = 30, 
    cudaDevAttrConcurrentKernels              = 31, 
    cudaDevAttrEccEnabled                     = 32, 
    cudaDevAttrPciBusId                       = 33, 
    cudaDevAttrPciDeviceId                    = 34, 
    cudaDevAttrTccDriver                      = 35, 
    cudaDevAttrMemoryClockRate                = 36, 
    cudaDevAttrGlobalMemoryBusWidth           = 37, 
    cudaDevAttrL2CacheSize                    = 38, 
    cudaDevAttrMaxThreadsPerMultiProcessor    = 39, 
    cudaDevAttrAsyncEngineCount               = 40, 
    cudaDevAttrUnifiedAddressing              = 41,     
    cudaDevAttrMaxTexture1DLayeredWidth       = 42, 
    cudaDevAttrMaxTexture1DLayeredLayers      = 43, 
    cudaDevAttrMaxTexture2DGatherWidth        = 45, 
    cudaDevAttrMaxTexture2DGatherHeight       = 46, 
    cudaDevAttrMaxTexture3DWidthAlt           = 47, 
    cudaDevAttrMaxTexture3DHeightAlt          = 48, 
    cudaDevAttrMaxTexture3DDepthAlt           = 49, 
    cudaDevAttrPciDomainId                    = 50, 
    cudaDevAttrTexturePitchAlignment          = 51, 
    cudaDevAttrMaxTextureCubemapWidth         = 52, 
    cudaDevAttrMaxTextureCubemapLayeredWidth  = 53, 
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54, 
    cudaDevAttrMaxSurface1DWidth              = 55, 
    cudaDevAttrMaxSurface2DWidth              = 56, 
    cudaDevAttrMaxSurface2DHeight             = 57, 
    cudaDevAttrMaxSurface3DWidth              = 58, 
    cudaDevAttrMaxSurface3DHeight             = 59, 
    cudaDevAttrMaxSurface3DDepth              = 60, 
    cudaDevAttrMaxSurface1DLayeredWidth       = 61, 
    cudaDevAttrMaxSurface1DLayeredLayers      = 62, 
    cudaDevAttrMaxSurface2DLayeredWidth       = 63, 
    cudaDevAttrMaxSurface2DLayeredHeight      = 64, 
    cudaDevAttrMaxSurface2DLayeredLayers      = 65, 
    cudaDevAttrMaxSurfaceCubemapWidth         = 66, 
    cudaDevAttrMaxSurfaceCubemapLayeredWidth  = 67, 
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68, 
    cudaDevAttrMaxTexture1DLinearWidth        = 69, 
    cudaDevAttrMaxTexture2DLinearWidth        = 70, 
    cudaDevAttrMaxTexture2DLinearHeight       = 71, 
    cudaDevAttrMaxTexture2DLinearPitch        = 72, 
    cudaDevAttrMaxTexture2DMipmappedWidth     = 73, 
    cudaDevAttrMaxTexture2DMipmappedHeight    = 74, 
    cudaDevAttrComputeCapabilityMajor         = 75,  
    cudaDevAttrComputeCapabilityMinor         = 76, 
    cudaDevAttrMaxTexture1DMipmappedWidth     = 77, 
    cudaDevAttrStreamPrioritiesSupported      = 78, 
    cudaDevAttrGlobalL1CacheSupported         = 79, 
    cudaDevAttrLocalL1CacheSupported          = 80, 
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81, 
    cudaDevAttrMaxRegistersPerMultiprocessor  = 82, 
    cudaDevAttrManagedMemory                  = 83, 
    cudaDevAttrIsMultiGpuBoard                = 84, 
    cudaDevAttrMultiGpuBoardGroupID           = 85, 
    cudaDevAttrHostNativeAtomicSupported      = 86, 
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87, 
    cudaDevAttrPageableMemoryAccess           = 88, 
    cudaDevAttrConcurrentManagedAccess        = 89, 
    cudaDevAttrComputePreemptionSupported     = 90, 
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91, 
    cudaDevAttrReserved92                     = 92,
    cudaDevAttrReserved93                     = 93,
    cudaDevAttrReserved94                     = 94,
    cudaDevAttrCooperativeLaunch              = 95, 
    cudaDevAttrCooperativeMultiDeviceLaunch   = 96, 
    cudaDevAttrMaxSharedMemoryPerBlockOptin   = 97, 
    cudaDevAttrCanFlushRemoteWrites           = 98, 
    cudaDevAttrHostRegisterSupported          = 99, 
    cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100, 
    cudaDevAttrDirectManagedMemAccessFromHost = 101, 
    cudaDevAttrMaxBlocksPerMultiprocessor     = 106, 
    cudaDevAttrMaxPersistingL2CacheSize       = 108, 
    cudaDevAttrMaxAccessPolicyWindowSize      = 109, 
    cudaDevAttrReservedSharedMemoryPerBlock   = 111, 
    cudaDevAttrSparseCudaArraySupported       = 112, 
    cudaDevAttrHostRegisterReadOnlySupported  = 113,  
    cudaDevAttrTimelineSemaphoreInteropSupported = 114,  
    cudaDevAttrMaxTimelineSemaphoreInteropSupported = 114,  
    cudaDevAttrMemoryPoolsSupported           = 115, 
    cudaDevAttrGPUDirectRDMASupported         = 116, 
    cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117, 
    cudaDevAttrGPUDirectRDMAWritesOrdering    = 118, 
    cudaDevAttrMemoryPoolSupportedHandleTypes = 119, 



    cudaDevAttrMax
};




enum __declspec(__device_builtin__) cudaMemPoolAttr
{
    







    cudaMemPoolReuseFollowEventDependencies   = 0x1,

    




    cudaMemPoolReuseAllowOpportunistic        = 0x2,

    





    cudaMemPoolReuseAllowInternalDependencies = 0x3,


    







    cudaMemPoolAttrReleaseThreshold           = 0x4,

    



    cudaMemPoolAttrReservedMemCurrent         = 0x5,

    




    cudaMemPoolAttrReservedMemHigh            = 0x6,

    



    cudaMemPoolAttrUsedMemCurrent             = 0x7,

    




    cudaMemPoolAttrUsedMemHigh                = 0x8
};




enum __declspec(__device_builtin__) cudaMemLocationType {
    cudaMemLocationTypeInvalid = 0,
    cudaMemLocationTypeDevice = 1  
};






struct __declspec(__device_builtin__) cudaMemLocation {
    enum cudaMemLocationType type;  
    int id;                         
};




enum __declspec(__device_builtin__) cudaMemAccessFlags {
    cudaMemAccessFlagsProtNone      = 0,  
    cudaMemAccessFlagsProtRead      = 1,  
    cudaMemAccessFlagsProtReadWrite = 3   
};




struct __declspec(__device_builtin__) cudaMemAccessDesc {
    struct cudaMemLocation  location; 
    enum cudaMemAccessFlags flags;    
};




enum __declspec(__device_builtin__) cudaMemAllocationType {
    cudaMemAllocationTypeInvalid = 0x0,
    


    cudaMemAllocationTypePinned  = 0x1,
    cudaMemAllocationTypeMax     = 0x7FFFFFFF 
};




enum __declspec(__device_builtin__) cudaMemAllocationHandleType {
    cudaMemHandleTypeNone                    = 0x0,  
    cudaMemHandleTypePosixFileDescriptor     = 0x1,  
    cudaMemHandleTypeWin32                   = 0x2,  
    cudaMemHandleTypeWin32Kmt                = 0x4   
};




struct __declspec(__device_builtin__) cudaMemPoolProps {
    enum cudaMemAllocationType         allocType;   
    enum cudaMemAllocationHandleType   handleTypes; 
    struct cudaMemLocation             location;    
    





    void                              *win32SecurityAttributes;
    unsigned char                      reserved[64]; 
};




struct __declspec(__device_builtin__) cudaMemPoolPtrExportData {
    unsigned char reserved[64];
};




struct __declspec(__device_builtin__) cudaMemAllocNodeParams {
    



    struct cudaMemPoolProps         poolProps;       
    const struct cudaMemAccessDesc *accessDescs;     
    size_t                          accessDescCount; 
    size_t                          bytesize;        
    void                           *dptr;            
};




enum __declspec(__device_builtin__) cudaGraphMemAttributeType {
    



    cudaGraphMemAttrUsedMemCurrent = 0x1,

    




    cudaGraphMemAttrUsedMemHigh = 0x2,

    




    cudaGraphMemAttrReservedMemCurrent = 0x3,

    




    cudaGraphMemAttrReservedMemHigh = 0x4
};





enum __declspec(__device_builtin__) cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank              = 1, 
    cudaDevP2PAttrAccessSupported              = 2, 
    cudaDevP2PAttrNativeAtomicSupported        = 3, 
    cudaDevP2PAttrCudaArrayAccessSupported     = 4  
};






struct __declspec(__device_builtin__) CUuuid_st {     
    char bytes[16];
};
typedef __declspec(__device_builtin__) struct CUuuid_st CUuuid;
#line 2184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
typedef __declspec(__device_builtin__) struct CUuuid_st cudaUUID_t;




struct __declspec(__device_builtin__) cudaDeviceProp
{
    char         name[256];                  
    cudaUUID_t   uuid;                       
    char         luid[8];                    
    unsigned int luidDeviceNodeMask;         
    size_t       totalGlobalMem;             
    size_t       sharedMemPerBlock;          
    int          regsPerBlock;               
    int          warpSize;                   
    size_t       memPitch;                   
    int          maxThreadsPerBlock;         
    int          maxThreadsDim[3];           
    int          maxGridSize[3];             
    int          clockRate;                  
    size_t       totalConstMem;              
    int          major;                      
    int          minor;                      
    size_t       textureAlignment;           
    size_t       texturePitchAlignment;      
    int          deviceOverlap;              
    int          multiProcessorCount;        
    int          kernelExecTimeoutEnabled;   
    int          integrated;                 
    int          canMapHostMemory;           
    int          computeMode;                
    int          maxTexture1D;               
    int          maxTexture1DMipmap;         
    int          maxTexture1DLinear;         
    int          maxTexture2D[2];            
    int          maxTexture2DMipmap[2];      
    int          maxTexture2DLinear[3];      
    int          maxTexture2DGather[2];      
    int          maxTexture3D[3];            
    int          maxTexture3DAlt[3];         
    int          maxTextureCubemap;          
    int          maxTexture1DLayered[2];     
    int          maxTexture2DLayered[3];     
    int          maxTextureCubemapLayered[2];
    int          maxSurface1D;               
    int          maxSurface2D[2];            
    int          maxSurface3D[3];            
    int          maxSurface1DLayered[2];     
    int          maxSurface2DLayered[3];     
    int          maxSurfaceCubemap;          
    int          maxSurfaceCubemapLayered[2];
    size_t       surfaceAlignment;           
    int          concurrentKernels;          
    int          ECCEnabled;                 
    int          pciBusID;                   
    int          pciDeviceID;                
    int          pciDomainID;                
    int          tccDriver;                  
    int          asyncEngineCount;           
    int          unifiedAddressing;          
    int          memoryClockRate;            
    int          memoryBusWidth;             
    int          l2CacheSize;                
    int          persistingL2CacheMaxSize;   
    int          maxThreadsPerMultiProcessor;
    int          streamPrioritiesSupported;  
    int          globalL1CacheSupported;     
    int          localL1CacheSupported;      
    size_t       sharedMemPerMultiprocessor; 
    int          regsPerMultiprocessor;      
    int          managedMemory;              
    int          isMultiGpuBoard;            
    int          multiGpuBoardGroupID;       
    int          hostNativeAtomicSupported;  
    int          singleToDoublePrecisionPerfRatio; 
    int          pageableMemoryAccess;       
    int          concurrentManagedAccess;    
    int          computePreemptionSupported; 
    int          canUseHostPointerForRegisteredMem; 
    int          cooperativeLaunch;          
    int          cooperativeMultiDeviceLaunch; 
    size_t       sharedMemPerBlockOptin;     
    int          pageableMemoryAccessUsesHostPageTables; 
    int          directManagedMemAccessFromHost; 
    int          maxBlocksPerMultiProcessor; 
    int          accessPolicyMaxWindowSize;  
    size_t       reservedSharedMemPerBlock;  



};

































































































typedef __declspec(__device_builtin__) struct __declspec(__device_builtin__) cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef __declspec(__device_builtin__) struct __declspec(__device_builtin__) cudaIpcMemHandle_st 
{
    char reserved[64];
}cudaIpcMemHandle_t;




enum __declspec(__device_builtin__) cudaExternalMemoryHandleType {
    


    cudaExternalMemoryHandleTypeOpaqueFd         = 1,
    


    cudaExternalMemoryHandleTypeOpaqueWin32      = 2,
    


    cudaExternalMemoryHandleTypeOpaqueWin32Kmt   = 3,
    


    cudaExternalMemoryHandleTypeD3D12Heap        = 4,
    


    cudaExternalMemoryHandleTypeD3D12Resource    = 5,
    


    cudaExternalMemoryHandleTypeD3D11Resource    = 6,
    


    cudaExternalMemoryHandleTypeD3D11ResourceKmt = 7,
    


    cudaExternalMemoryHandleTypeNvSciBuf         = 8
};









































struct __declspec(__device_builtin__) cudaExternalMemoryHandleDesc {
    


    enum cudaExternalMemoryHandleType type;
    union {
        




        int fd;
        














        struct {
            


            void *handle;
            



            const void *name;
        } win32;
        



        const void *nvSciBufObject;
    } handle;
    


    unsigned long long size;
    


    unsigned int flags;
};




struct __declspec(__device_builtin__) cudaExternalMemoryBufferDesc {
    


    unsigned long long offset;
    


    unsigned long long size;
    


    unsigned int flags;
};
 



struct __declspec(__device_builtin__) cudaExternalMemoryMipmappedArrayDesc {
    



    unsigned long long offset;
    


    struct cudaChannelFormatDesc formatDesc;
    


    struct cudaExtent extent;
    



    unsigned int flags;
    


    unsigned int numLevels;
};
 



enum __declspec(__device_builtin__) cudaExternalSemaphoreHandleType {
    


    cudaExternalSemaphoreHandleTypeOpaqueFd       = 1,
    


    cudaExternalSemaphoreHandleTypeOpaqueWin32    = 2,
    


    cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt = 3,
    


    cudaExternalSemaphoreHandleTypeD3D12Fence     = 4,
    


    cudaExternalSemaphoreHandleTypeD3D11Fence     = 5,
    


     cudaExternalSemaphoreHandleTypeNvSciSync     = 6,
    


    cudaExternalSemaphoreHandleTypeKeyedMutex     = 7,
    


    cudaExternalSemaphoreHandleTypeKeyedMutexKmt  = 8,
    


    cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd  = 9,
    


    cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32  = 10
};




struct __declspec(__device_builtin__) cudaExternalSemaphoreHandleDesc {
    


    enum cudaExternalSemaphoreHandleType type;
    union {
        





        int fd;
        














        struct {
            


            void *handle;
            



            const void *name;
        } win32;
        


        const void* nvSciSyncObj;
    } handle;
    


    unsigned int flags;
};




struct __declspec(__device_builtin__) cudaExternalSemaphoreSignalParams_v1 {
    struct {
        


        struct {
            


            unsigned long long value;
        } fence;
        union {
            



            void *fence;
            unsigned long long reserved;
        } nvSciSync;
        


        struct {
            


            unsigned long long key;
        } keyedMutex;
    } params;
    









    unsigned int flags;
};




struct __declspec(__device_builtin__) cudaExternalSemaphoreWaitParams_v1 {
    struct {
        


        struct {
            


            unsigned long long value;
        } fence;
        union {
            



            void *fence;
            unsigned long long reserved;
        } nvSciSync;
        


        struct {
            


            unsigned long long key;
            


            unsigned int timeoutMs;
        } keyedMutex;
    } params;
    









    unsigned int flags;
};




struct __declspec(__device_builtin__) cudaExternalSemaphoreSignalParams{
    struct {
        


        struct {
            


            unsigned long long value;
        } fence;
        union {
            



            void *fence;
            unsigned long long reserved;
        } nvSciSync;
        


        struct {
            


            unsigned long long key;
        } keyedMutex;
        unsigned int reserved[12];
    } params;
    









    unsigned int flags;
    unsigned int reserved[16];
};




struct __declspec(__device_builtin__) cudaExternalSemaphoreWaitParams {
    struct {
        


        struct {
            


            unsigned long long value;
        } fence;
        union {
            



            void *fence;
            unsigned long long reserved;
        } nvSciSync;
        


        struct {
            


            unsigned long long key;
            


            unsigned int timeoutMs;
        } keyedMutex;
        unsigned int reserved[10];
    } params;
    









    unsigned int flags;
    unsigned int reserved[16];
};











typedef __declspec(__device_builtin__) enum cudaError cudaError_t;




typedef __declspec(__device_builtin__) struct CUstream_st *cudaStream_t;




typedef __declspec(__device_builtin__) struct CUevent_st *cudaEvent_t;




typedef __declspec(__device_builtin__) struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef __declspec(__device_builtin__) enum cudaOutputMode cudaOutputMode_t;




typedef __declspec(__device_builtin__) struct CUexternalMemory_st *cudaExternalMemory_t;




typedef __declspec(__device_builtin__) struct CUexternalSemaphore_st *cudaExternalSemaphore_t;




typedef __declspec(__device_builtin__) struct CUgraph_st *cudaGraph_t;




typedef __declspec(__device_builtin__) struct CUgraphNode_st *cudaGraphNode_t;




typedef __declspec(__device_builtin__) struct CUuserObject_st *cudaUserObject_t;




typedef __declspec(__device_builtin__) struct CUfunc_st *cudaFunction_t;




typedef __declspec(__device_builtin__) struct CUmemPoolHandle_st *cudaMemPool_t;




enum __declspec(__device_builtin__) cudaCGScope {
    cudaCGScopeInvalid   = 0, 
    cudaCGScopeGrid      = 1, 
    cudaCGScopeMultiGrid = 2  
};




struct __declspec(__device_builtin__) cudaLaunchParams
{
    void *func;          
    dim3 gridDim;        
    dim3 blockDim;       
    void **args;         
    size_t sharedMem;    
    cudaStream_t stream; 
};




struct __declspec(__device_builtin__) cudaKernelNodeParams {
    void* func;                     
    dim3 gridDim;                   
    dim3 blockDim;                  
    unsigned int sharedMemBytes;    
    void **kernelParams;            
    void **extra;                   
};




struct __declspec(__device_builtin__) cudaExternalSemaphoreSignalNodeParams {
    cudaExternalSemaphore_t* extSemArray;                        
    const struct cudaExternalSemaphoreSignalParams* paramsArray; 
    unsigned int numExtSems;                                     
};




struct __declspec(__device_builtin__) cudaExternalSemaphoreWaitNodeParams {
    cudaExternalSemaphore_t* extSemArray;                      
    const struct cudaExternalSemaphoreWaitParams* paramsArray; 
    unsigned int numExtSems;                                   
};




enum __declspec(__device_builtin__) cudaGraphNodeType {
    cudaGraphNodeTypeKernel      = 0x00, 
    cudaGraphNodeTypeMemcpy      = 0x01, 
    cudaGraphNodeTypeMemset      = 0x02, 
    cudaGraphNodeTypeHost        = 0x03, 
    cudaGraphNodeTypeGraph       = 0x04, 
    cudaGraphNodeTypeEmpty       = 0x05, 
    cudaGraphNodeTypeWaitEvent   = 0x06, 
    cudaGraphNodeTypeEventRecord = 0x07, 
    cudaGraphNodeTypeExtSemaphoreSignal = 0x08, 
    cudaGraphNodeTypeExtSemaphoreWait = 0x09, 
    cudaGraphNodeTypeMemAlloc    = 0x0a, 
    cudaGraphNodeTypeMemFree     = 0x0b, 
    cudaGraphNodeTypeCount
};




typedef struct CUgraphExec_st* cudaGraphExec_t;




enum __declspec(__device_builtin__) cudaGraphExecUpdateResult {
    cudaGraphExecUpdateSuccess                = 0x0, 
    cudaGraphExecUpdateError                  = 0x1, 
    cudaGraphExecUpdateErrorTopologyChanged   = 0x2, 
    cudaGraphExecUpdateErrorNodeTypeChanged   = 0x3, 
    cudaGraphExecUpdateErrorFunctionChanged   = 0x4, 
    cudaGraphExecUpdateErrorParametersChanged = 0x5, 
    cudaGraphExecUpdateErrorNotSupported      = 0x6, 
    cudaGraphExecUpdateErrorUnsupportedFunctionChange = 0x7 
};




 
enum __declspec(__device_builtin__) cudaGetDriverEntryPointFlags {
    cudaEnableDefault                = 0x0, 
    cudaEnableLegacyStream           = 0x1, 
    cudaEnablePerThreadDefaultStream = 0x2  
};




enum __declspec(__device_builtin__) cudaGraphDebugDotFlags {
    cudaGraphDebugDotFlagsVerbose                  = 1<<0,  
    cudaGraphDebugDotFlagsKernelNodeParams         = 1<<2,  
    cudaGraphDebugDotFlagsMemcpyNodeParams         = 1<<3,  
    cudaGraphDebugDotFlagsMemsetNodeParams         = 1<<4,  
    cudaGraphDebugDotFlagsHostNodeParams           = 1<<5,  
    cudaGraphDebugDotFlagsEventNodeParams          = 1<<6,  
    cudaGraphDebugDotFlagsExtSemasSignalNodeParams = 1<<7,  
    cudaGraphDebugDotFlagsExtSemasWaitNodeParams   = 1<<8,  
    cudaGraphDebugDotFlagsKernelNodeAttributes     = 1<<9,  
    cudaGraphDebugDotFlagsHandles                  = 1<<10  
};




enum __declspec(__device_builtin__) cudaGraphInstantiateFlags {
    cudaGraphInstantiateFlagAutoFreeOnLaunch = 1 
};


 




#line 3051 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"



#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"


























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"
























enum __declspec(__device_builtin__) cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero  = 0,    
    cudaBoundaryModeClamp = 1,    
    cudaBoundaryModeTrap  = 2     
};




enum __declspec(__device_builtin__)  cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,     
    cudaFormatModeAuto = 1        
};




struct __declspec(__device_builtin__) surfaceReference
{
    


    struct cudaChannelFormatDesc channelDesc;
};




typedef __declspec(__device_builtin__) unsigned long long cudaSurfaceObject_t;


 

#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"


























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
























enum __declspec(__device_builtin__) cudaTextureAddressMode
{
    cudaAddressModeWrap   = 0,    
    cudaAddressModeClamp  = 1,    
    cudaAddressModeMirror = 2,    
    cudaAddressModeBorder = 3     
};




enum __declspec(__device_builtin__) cudaTextureFilterMode
{
    cudaFilterModePoint  = 0,     
    cudaFilterModeLinear = 1      
};




enum __declspec(__device_builtin__) cudaTextureReadMode
{
    cudaReadModeElementType     = 0,  
    cudaReadModeNormalizedFloat = 1   
};




struct __declspec(__device_builtin__) textureReference
{
    


    int                          normalized;
    


    enum cudaTextureFilterMode   filterMode;
    


    enum cudaTextureAddressMode  addressMode[3];
    


    struct cudaChannelFormatDesc channelDesc;
    


    int                          sRGB;
    


    unsigned int                 maxAnisotropy;
    


    enum cudaTextureFilterMode   mipmapFilterMode;
    


    float                        mipmapLevelBias;
    


    float                        minMipmapLevelClamp;
    


    float                        maxMipmapLevelClamp;
    


    int                          disableTrilinearOptimization;
    int                          __cudaReserved[14];
};




struct __declspec(__device_builtin__) cudaTextureDesc
{
    


    enum cudaTextureAddressMode addressMode[3];
    


    enum cudaTextureFilterMode  filterMode;
    


    enum cudaTextureReadMode    readMode;
    


    int                         sRGB;
    


    float                       borderColor[4];
    


    int                         normalizedCoords;
    


    unsigned int                maxAnisotropy;
    


    enum cudaTextureFilterMode  mipmapFilterMode;
    


    float                       mipmapLevelBias;
    


    float                       minMipmapLevelClamp;
    


    float                       maxMipmapLevelClamp;
    


    int                         disableTrilinearOptimization;
};




typedef __declspec(__device_builtin__) unsigned long long cudaTextureObject_t;


 

#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 92 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\library_types.h"





















































typedef enum cudaDataType_t
{
	CUDA_R_16F  =  2, 
	CUDA_C_16F  =  6, 
	CUDA_R_16BF = 14, 
	CUDA_C_16BF = 15, 
	CUDA_R_32F  =  0, 
	CUDA_C_32F  =  4, 
	CUDA_R_64F  =  1, 
	CUDA_C_64F  =  5, 
	CUDA_R_4I   = 16, 
	CUDA_C_4I   = 17, 
	CUDA_R_4U   = 18, 
	CUDA_C_4U   = 19, 
	CUDA_R_8I   =  3, 
	CUDA_C_8I   =  7, 
	CUDA_R_8U   =  8, 
	CUDA_C_8U   =  9, 
	CUDA_R_16I  = 20, 
	CUDA_C_16I  = 21, 
	CUDA_R_16U  = 22, 
	CUDA_C_16U  = 23, 
	CUDA_R_32I  = 10, 
	CUDA_C_32I  = 11, 
	CUDA_R_32U  = 12, 
	CUDA_C_32U  = 13, 
	CUDA_R_64I  = 24, 
	CUDA_C_64I  = 25, 
	CUDA_R_64U  = 26, 
	CUDA_C_64U  = 27  
} cudaDataType;


typedef enum libraryPropertyType_t
{
	MAJOR_VERSION,
	MINOR_VERSION,
	PATCH_LEVEL
} libraryPropertyType;







#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\library_types.h"
#line 93 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\channel_descriptor.h"




























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































#line 145 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"






















































































































































































#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"
#line 148 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 149 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"






















































































































#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
































































































































































































































#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 150 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_device_runtime_api.h"































































extern "C" {
#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_device_runtime_api.h"

struct cudaFuncAttributes;


inline __declspec(__device__)  cudaError_t __stdcall cudaMalloc(void **p, size_t s) 
{ 
  return cudaErrorUnknown;
}

inline __declspec(__device__)  cudaError_t __stdcall cudaFuncGetAttributes(struct cudaFuncAttributes *p, const void *c) 
{ 
  return cudaErrorUnknown;
}

inline __declspec(__device__)  cudaError_t __stdcall cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device)
{
  return cudaErrorUnknown;
}

inline __declspec(__device__)  cudaError_t __stdcall cudaGetDevice(int *device)
{
  return cudaErrorUnknown;
}

inline __declspec(__device__)  cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize)
{
  return cudaErrorUnknown;
}

inline __declspec(__device__)  cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize, unsigned int flags)
{
  return cudaErrorUnknown;
}



}
#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_device_runtime_api.h"

#line 106 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_device_runtime_api.h"

#line 108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_device_runtime_api.h"




#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_device_runtime_api.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"






















































































































































































#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"
#line 114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_device_runtime_api.h"

extern "C"
{
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceSynchronize(void);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetLastError(void);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaPeekAtLastError(void);
extern __declspec(__device__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorString(cudaError_t error);
extern __declspec(__device__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorName(cudaError_t error);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDeviceCount(int *count);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDevice(int *device);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventRecordWithFlags_ptsz(cudaEvent_t event, cudaStream_t stream, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFree(void *devPtr);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMalloc(void **devPtr, size_t size);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpyAsync_ptsz(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy2DAsync_ptsz(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy3DAsync_ptsz(const struct cudaMemcpy3DParms *p, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemsetAsync_ptsz(void *devPtr, int value, size_t count, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset2DAsync_ptsz(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset3DAsync_ptsz(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaRuntimeGetVersion(int *runtimeVersion);




















extern __declspec(__device__) __declspec(__cudart_builtin__) void * __stdcall cudaGetParameterBuffer(size_t alignment, size_t size);



























extern __declspec(__device__) __declspec(__cudart_builtin__) void * __stdcall cudaGetParameterBufferV2(void *func, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaLaunchDevice_ptsz(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaLaunchDeviceV2_ptsz(void *parameterBuffer, cudaStream_t stream);
















#line 222 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_device_runtime_api.h"
    extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaLaunchDevice(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream);
    extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaLaunchDeviceV2(void *parameterBuffer, cudaStream_t stream);
#line 225 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_device_runtime_api.h"

extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize, unsigned int flags);

extern __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long __stdcall cudaCGGetIntrinsicHandle(enum cudaCGScope scope);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaCGSynchronize(unsigned long long handle, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaCGSynchronizeGrid(unsigned long long handle, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaCGGetSize(unsigned int *numThreads, unsigned int *numGrids, unsigned long long handle);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaCGGetRank(unsigned int *threadRank, unsigned int *gridRank, unsigned long long handle);
}

template <typename T> static __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t cudaMalloc(T **devPtr, size_t size);
template <typename T> static __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, T *entry);
template <typename T> static __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, T func, int blockSize, size_t dynamicSmemSize);
template <typename T> static __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned int flags);


#line 243 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_device_runtime_api.h"
#line 244 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_device_runtime_api.h"

#line 246 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_device_runtime_api.h"
#line 152 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





#line 158 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
    
    
#line 161 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"




























































#line 222 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"













#line 236 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"

#line 238 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"










#line 249 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"







#line 257 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





#line 263 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"



extern "C" {
#line 268 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"






































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceReset(void);




















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceSynchronize(void);






















































































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetLimit(enum cudaLimit limit, size_t value);


































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);






















 extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetTexture1DLinearMaxWidth(size_t *maxWidthInElements, const struct cudaChannelFormatDesc *fmtDesc, int device);
#line 474 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);




































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority);











































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig);






























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);











































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config);


























extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetByPCIBusId(int *device, const char *pciBusId);





























extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetPCIBusId(char *pciBusId, int len, int device);















































extern __declspec(__host__) cudaError_t __stdcall cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event);








































extern __declspec(__host__) cudaError_t __stdcall cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle);










































extern __declspec(__host__) cudaError_t __stdcall cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr);































































extern __declspec(__host__) cudaError_t __stdcall cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags);



































extern __declspec(__host__) cudaError_t __stdcall cudaIpcCloseMemHandle(void *devPtr);































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceFlushGPUDirectRDMAWrites(enum cudaFlushGPUDirectRDMAWritesTarget target, enum cudaFlushGPUDirectRDMAWritesScope scope);
#line 985 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"

 








































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadExit(void);

























extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadSynchronize(void);
















































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadSetLimit(enum cudaLimit limit, size_t value);
































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit);



































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig);














































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig);

 




























































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetLastError(void);















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaPeekAtLastError(void);















extern __declspec(__host__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorName(cudaError_t error);















extern __declspec(__host__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorString(cudaError_t error);
 


























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDeviceCount(int *count);





















































































































































































































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device);








































































































































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);

















extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetDefaultMemPool(cudaMemPool_t *memPool, int device);























extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetMemPool(int device, cudaMemPool_t memPool);



















extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetMemPool(cudaMemPool_t *memPool, int device);















































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetNvSciSyncAttributes(void *nvSciSyncAttrList, int device, int flags);







































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetP2PAttribute(int *value, enum cudaDeviceP2PAttr attr, int srcDevice, int dstDevice);




















extern __declspec(__host__) cudaError_t __stdcall cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);








































extern __declspec(__host__) cudaError_t __stdcall cudaSetDevice(int device);




















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDevice(int *device);






























extern __declspec(__host__) cudaError_t __stdcall cudaSetValidDevices(int *device_arr, int len);
































































extern __declspec(__host__) cudaError_t __stdcall cudaSetDeviceFlags( unsigned int flags );











































extern __declspec(__host__) cudaError_t __stdcall cudaGetDeviceFlags( unsigned int *flags );
 






































extern __declspec(__host__) cudaError_t __stdcall cudaStreamCreate(cudaStream_t *pStream);































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);













































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority);


























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamGetPriority(cudaStream_t hStream, int *priority);
























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags);














extern __declspec(__host__) cudaError_t __stdcall cudaCtxResetPersistingL2Cache(void);



















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src);

 


















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamGetAttribute(
        cudaStream_t hStream, enum cudaStreamAttrID attr,
        union cudaStreamAttrValue *value_out);

 



















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamSetAttribute(
        cudaStream_t hStream, enum cudaStreamAttrID attr,
        const union cudaStreamAttrValue *value);

 





























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream);






























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags = 0);







typedef void (__stdcall *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void *userData);


































































extern __declspec(__host__) cudaError_t __stdcall cudaStreamAddCallback(cudaStream_t stream,
        cudaStreamCallback_t callback, void *userData, unsigned int flags);






















extern __declspec(__host__) cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t stream);
























extern __declspec(__host__) cudaError_t __stdcall cudaStreamQuery(cudaStream_t stream);



















































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length = 0, unsigned int flags = 0x04);


#line 2768 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"



































extern __declspec(__host__) cudaError_t __stdcall cudaStreamBeginCapture(cudaStream_t stream, enum cudaStreamCaptureMode mode);


















































extern __declspec(__host__) cudaError_t __stdcall cudaThreadExchangeStreamCaptureMode(enum cudaStreamCaptureMode *mode);



























extern __declspec(__host__) cudaError_t __stdcall cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t *pGraph);





































extern __declspec(__host__) cudaError_t __stdcall cudaStreamIsCapturing(cudaStream_t stream, enum cudaStreamCaptureStatus *pCaptureStatus);































extern __declspec(__host__) cudaError_t __stdcall cudaStreamGetCaptureInfo(cudaStream_t stream, enum cudaStreamCaptureStatus *pCaptureStatus, unsigned long long *pId);






















































extern __declspec(__host__) cudaError_t __stdcall cudaStreamGetCaptureInfo_v2(cudaStream_t stream, enum cudaStreamCaptureStatus *captureStatus_out, unsigned long long *id_out = 0, cudaGraph_t *graph_out = 0, const cudaGraphNode_t **dependencies_out = 0, size_t *numDependencies_out = 0);
































extern __declspec(__host__) cudaError_t __stdcall cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t *dependencies, size_t numDependencies, unsigned int flags = 0);
 



































extern __declspec(__host__) cudaError_t __stdcall cudaEventCreate(cudaEvent_t *event);




































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);







































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0);














































 extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream = 0, unsigned int flags = 0);
#line 3203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"






























extern __declspec(__host__) cudaError_t __stdcall cudaEventQuery(cudaEvent_t event);





























extern __declspec(__host__) cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t event);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event);










































extern __declspec(__host__) cudaError_t __stdcall cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);

 

















































































































































































extern __declspec(__host__) cudaError_t __stdcall cudaImportExternalMemory(cudaExternalMemory_t *extMem_out, const struct cudaExternalMemoryHandleDesc *memHandleDesc);






















































extern __declspec(__host__) cudaError_t __stdcall cudaExternalMemoryGetMappedBuffer(void **devPtr, cudaExternalMemory_t extMem, const struct cudaExternalMemoryBufferDesc *bufferDesc);



























































extern __declspec(__host__) cudaError_t __stdcall cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t *mipmap, cudaExternalMemory_t extMem, const struct cudaExternalMemoryMipmappedArrayDesc *mipmapDesc);























extern __declspec(__host__) cudaError_t __stdcall cudaDestroyExternalMemory(cudaExternalMemory_t extMem);
























































































































































extern __declspec(__host__) cudaError_t __stdcall cudaImportExternalSemaphore(cudaExternalSemaphore_t *extSem_out, const struct cudaExternalSemaphoreHandleDesc *semHandleDesc);


































































extern __declspec(__host__) cudaError_t __stdcall cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t *extSemArray, const struct cudaExternalSemaphoreSignalParams *paramsArray, unsigned int numExtSems, cudaStream_t stream = 0);











































































extern __declspec(__host__) cudaError_t __stdcall cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t *extSemArray, const struct cudaExternalSemaphoreWaitParams *paramsArray, unsigned int numExtSems, cudaStream_t stream = 0);






















extern __declspec(__host__) cudaError_t __stdcall cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem);

 
































































extern __declspec(__host__) cudaError_t __stdcall cudaLaunchKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream);
























































extern __declspec(__host__) cudaError_t __stdcall cudaLaunchCooperativeKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream);




































































































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaLaunchCooperativeKernelMultiDevice(struct cudaLaunchParams *launchParamsList, unsigned int numDevices, unsigned int flags  = 0);














































extern __declspec(__host__) cudaError_t __stdcall cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig);






















































extern __declspec(__host__) cudaError_t __stdcall cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config);
































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);




































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFuncSetAttribute(const void *func, enum cudaFuncAttribute attr, int value);

























extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaSetDoubleForDevice(double *d);























extern __declspec(deprecated)  __declspec(__host__) cudaError_t __stdcall cudaSetDoubleForHost(double *d);



































































extern __declspec(__host__) cudaError_t __stdcall cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void *userData);

 






















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyAvailableDynamicSMemPerBlock(size_t *dynamicSmemSize, const void *func, int numBlocks, int blockSize);












































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize, unsigned int flags);

 






















































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMallocManaged(void **devPtr, size_t size, unsigned int flags = 0x01);


#line 4744 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMalloc(void **devPtr, size_t size);
































extern __declspec(__host__) cudaError_t __stdcall cudaMallocHost(void **ptr, size_t size);










































extern __declspec(__host__) cudaError_t __stdcall cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);
















































extern __declspec(__host__) cudaError_t __stdcall cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height = 0, unsigned int flags = 0);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFree(void *devPtr);






















extern __declspec(__host__) cudaError_t __stdcall cudaFreeHost(void *ptr);






















extern __declspec(__host__) cudaError_t __stdcall cudaFreeArray(cudaArray_t array);






















extern __declspec(__host__) cudaError_t __stdcall cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray);

































































extern __declspec(__host__) cudaError_t __stdcall cudaHostAlloc(void **pHost, size_t size, unsigned int flags);




























































































extern __declspec(__host__) cudaError_t __stdcall cudaHostRegister(void *ptr, size_t size, unsigned int flags);






















extern __declspec(__host__) cudaError_t __stdcall cudaHostUnregister(void *ptr);












































extern __declspec(__host__) cudaError_t __stdcall cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);





















extern __declspec(__host__) cudaError_t __stdcall cudaHostGetFlags(unsigned int *pFlags, void *pHost);






































extern __declspec(__host__) cudaError_t __stdcall cudaMalloc3D(struct cudaPitchedPtr* pitchedDevPtr, struct cudaExtent extent);













































































































































extern __declspec(__host__) cudaError_t __stdcall cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int flags = 0);













































































































































extern __declspec(__host__) cudaError_t __stdcall cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags = 0);
































extern __declspec(__host__) cudaError_t __stdcall cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level);








































































































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3D(const struct cudaMemcpy3DParms *p);






























extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p);





















































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream = 0);

























extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream = 0);






















extern __declspec(__host__) cudaError_t __stdcall cudaMemGetInfo(size_t *free, size_t *total);

























extern __declspec(__host__) cudaError_t __stdcall cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array);




























extern __declspec(__host__) cudaError_t __stdcall cudaArrayGetPlane(cudaArray_t *pPlaneArray, cudaArray_t hArray, unsigned int planeIdx);



























 extern __declspec(__host__) cudaError_t __stdcall cudaArrayGetSparseProperties(struct cudaArraySparseProperties *sparseProperties, cudaArray_t array);
#line 5989 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"




























 extern __declspec(__host__) cudaError_t __stdcall cudaMipmappedArrayGetSparseProperties(struct cudaArraySparseProperties *sparseProperties, cudaMipmappedArray_t mipmap);
#line 6019 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"











































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);


































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count);
















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);

















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);

















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);














































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);










































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);










































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);
























































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);


































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream = 0);






























































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);

























































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
























































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);


















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);


















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);




























extern __declspec(__host__) cudaError_t __stdcall cudaMemset(void *devPtr, int value, size_t count);

































extern __declspec(__host__) cudaError_t __stdcall cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height);













































extern __declspec(__host__) cudaError_t __stdcall cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent);



































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream = 0);








































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0);




















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream = 0);



























extern __declspec(__host__) cudaError_t __stdcall cudaGetSymbolAddress(void **devPtr, const void *symbol);


























extern __declspec(__host__) cudaError_t __stdcall cudaGetSymbolSize(size_t *size, const void *symbol);





































































extern __declspec(__host__) cudaError_t __stdcall cudaMemPrefetchAsync(const void *devPtr, size_t count, int dstDevice, cudaStream_t stream = 0);



















































































































extern __declspec(__host__) cudaError_t __stdcall cudaMemAdvise(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, int device);


























































extern __declspec(__host__) cudaError_t __stdcall cudaMemRangeGetAttribute(void *data, size_t dataSize, enum cudaMemRangeAttribute attribute, const void *devPtr, size_t count);






































extern __declspec(__host__) cudaError_t __stdcall cudaMemRangeGetAttributes(void **data, size_t *dataSizes, enum cudaMemRangeAttribute *attributes, size_t numAttributes, const void *devPtr, size_t count);

 

























































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);









































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);










































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);


















































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);

















































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);

 


































































extern __declspec(__host__) cudaError_t __stdcall cudaMallocAsync(void **devPtr, size_t size, cudaStream_t hStream);

























extern __declspec(__host__) cudaError_t __stdcall cudaFreeAsync(void *devPtr, cudaStream_t hStream);
























extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep);





































extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolSetAttribute(cudaMemPool_t memPool, enum cudaMemPoolAttr attr, void *value );





































extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolGetAttribute(cudaMemPool_t memPool, enum cudaMemPoolAttr attr, void *value );














extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolSetAccess(cudaMemPool_t memPool, const struct cudaMemAccessDesc *descList, size_t count);












extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolGetAccess(enum cudaMemAccessFlags *flags, cudaMemPool_t memPool, struct cudaMemLocation *location);



















extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolCreate(cudaMemPool_t *memPool, const struct cudaMemPoolProps *poolProps);





















extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolDestroy(cudaMemPool_t memPool);



































extern __declspec(__host__) cudaError_t __stdcall cudaMallocFromPoolAsync(void **ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream);
























extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolExportToShareableHandle(
    void                            *shareableHandle,
    cudaMemPool_t                    memPool,
    enum cudaMemAllocationHandleType handleType,
    unsigned int                     flags);






















extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolImportFromShareableHandle(
    cudaMemPool_t                   *memPool,
    void                            *shareableHandle,
    enum cudaMemAllocationHandleType handleType,
    unsigned int                     flags);


















extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolExportPointer(struct cudaMemPoolPtrExportData *exportData, void *ptr);




























extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolImportPointer(void **ptr, cudaMemPool_t memPool, struct cudaMemPoolPtrExportData *exportData);

 





















































































































































extern __declspec(__host__) cudaError_t __stdcall cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr);

 






































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice);









































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags);





















extern __declspec(__host__) cudaError_t __stdcall cudaDeviceDisablePeerAccess(int peerDevice);

 





























































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource);


































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags);






































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);


































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource);





































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel);




























extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource);

 




































































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaBindTexture(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t size = 0xffffffff);


























































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaBindTexture2D(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, size_t pitch);





































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaBindTextureToArray(const struct textureReference *texref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);







































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaBindTextureToMipmappedArray(const struct textureReference *texref, cudaMipmappedArray_const_t mipmappedArray, const struct cudaChannelFormatDesc *desc);

























extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaUnbindTexture(const struct textureReference *texref);




























extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref);





























extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaGetTextureReference(const struct textureReference **texref, const void *symbol);

 










































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaBindSurfaceToArray(const struct surfaceReference *surfref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);
























extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaGetSurfaceReference(const struct surfaceReference **surfref, const void *symbol);

 
































extern __declspec(__host__) cudaError_t __stdcall cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array);





























extern __declspec(__host__) struct cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);

























































































































































































































extern __declspec(__host__) cudaError_t __stdcall cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc);



















extern __declspec(__host__) cudaError_t __stdcall cudaDestroyTextureObject(cudaTextureObject_t texObject);



















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject);



















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject);




















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject);

 










































extern __declspec(__host__) cudaError_t __stdcall cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc);



















extern __declspec(__host__) cudaError_t __stdcall cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject);


















extern __declspec(__host__) cudaError_t __stdcall cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject);

 































extern __declspec(__host__) cudaError_t __stdcall cudaDriverGetVersion(int *driverVersion);
























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaRuntimeGetVersion(int *runtimeVersion);

 












































extern __declspec(__host__) cudaError_t __stdcall cudaGraphCreate(cudaGraph_t *pGraph, unsigned int flags);
































































































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddKernelNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaKernelNodeParams *pNodeParams);
































extern __declspec(__host__) cudaError_t __stdcall cudaGraphKernelNodeGetParams(cudaGraphNode_t node, struct cudaKernelNodeParams *pNodeParams);
























extern __declspec(__host__) cudaError_t __stdcall cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const struct cudaKernelNodeParams *pNodeParams);



















extern __declspec(__host__) cudaError_t __stdcall cudaGraphKernelNodeCopyAttributes(
        cudaGraphNode_t hSrc,
        cudaGraphNode_t hDst);




















extern __declspec(__host__) cudaError_t __stdcall cudaGraphKernelNodeGetAttribute(
    cudaGraphNode_t hNode,
    enum cudaKernelNodeAttrID attr,
    union cudaKernelNodeAttrValue *value_out);




















extern __declspec(__host__) cudaError_t __stdcall cudaGraphKernelNodeSetAttribute(
    cudaGraphNode_t hNode,
    enum cudaKernelNodeAttrID attr,
    const union cudaKernelNodeAttrValue *value);














































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddMemcpyNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaMemcpy3DParms *pCopyParams);


























































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddMemcpyNodeToSymbol(
    cudaGraphNode_t *pGraphNode,
    cudaGraph_t graph,
    const cudaGraphNode_t *pDependencies,
    size_t numDependencies,
    const void* symbol,
    const void* src,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind);
#line 9769 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"


























































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddMemcpyNodeFromSymbol(
    cudaGraphNode_t* pGraphNode,
    cudaGraph_t graph,
    const cudaGraphNode_t* pDependencies,
    size_t numDependencies,
    void* dst,
    const void* symbol,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind);
#line 9838 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"

























































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddMemcpyNode1D(
    cudaGraphNode_t *pGraphNode,
    cudaGraph_t graph,
    const cudaGraphNode_t *pDependencies,
    size_t numDependencies,
    void* dst,
    const void* src,
    size_t count,
    enum cudaMemcpyKind kind);
#line 9905 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, struct cudaMemcpy3DParms *pNodeParams);

























extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const struct cudaMemcpy3DParms *pNodeParams);






































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemcpyNodeSetParamsToSymbol(
    cudaGraphNode_t node,
    const void* symbol,
    const void* src,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind);
#line 10000 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"






































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemcpyNodeSetParamsFromSymbol(
    cudaGraphNode_t node,
    void* dst,
    const void* symbol,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind);
#line 10046 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"






































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemcpyNodeSetParams1D(
    cudaGraphNode_t node,
    void* dst,
    const void* src,
    size_t count,
    enum cudaMemcpyKind kind);
#line 10091 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"








































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddMemsetNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaMemsetParams *pMemsetParams);






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, struct cudaMemsetParams *pNodeParams);






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const struct cudaMemsetParams *pNodeParams);








































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddHostNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaHostNodeParams *pNodeParams);






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphHostNodeGetParams(cudaGraphNode_t node, struct cudaHostNodeParams *pNodeParams);






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphHostNodeSetParams(cudaGraphNode_t node, const struct cudaHostNodeParams *pNodeParams);







































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddChildGraphNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaGraph_t childGraph);


























extern __declspec(__host__) cudaError_t __stdcall cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t *pGraph);




































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddEmptyNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies);










































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddEventRecordNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaEvent_t event);
#line 10413 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"

























 extern __declspec(__host__) cudaError_t __stdcall cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t *event_out);
#line 10440 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"

























 extern __declspec(__host__) cudaError_t __stdcall cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event);
#line 10467 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"












































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddEventWaitNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaEvent_t event);
#line 10513 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"

























 extern __declspec(__host__) cudaError_t __stdcall cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t *event_out);
#line 10540 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"

























 extern __declspec(__host__) cudaError_t __stdcall cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event);
#line 10567 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"















































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams);
#line 10616 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, struct cudaExternalSemaphoreSignalNodeParams *params_out);
#line 10649 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"

























extern __declspec(__host__) cudaError_t __stdcall cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams);
#line 10676 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"















































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams);
#line 10725 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, struct cudaExternalSemaphoreWaitNodeParams *params_out);
#line 10758 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"

























extern __declspec(__host__) cudaError_t __stdcall cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams);
#line 10785 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"











































































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddMemAllocNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, struct cudaMemAllocNodeParams *nodeParams);
#line 10862 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"

























extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, struct cudaMemAllocNodeParams *params_out);
#line 10889 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"


























































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddMemFreeNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, void *dptr);
#line 10949 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void *dptr_out);
#line 10973 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"


























extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGraphMemTrim(int device);
#line 11001 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"



































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetGraphMemAttribute(int device, enum cudaGraphMemAttributeType attr, void* value);
#line 11038 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetGraphMemAttribute(int device, enum cudaGraphMemAttributeType attr, void* value);
#line 11072 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"


























extern __declspec(__host__) cudaError_t __stdcall cudaGraphClone(cudaGraph_t *pGraphClone, cudaGraph_t originalGraph);



























extern __declspec(__host__) cudaError_t __stdcall cudaGraphNodeFindInClone(cudaGraphNode_t *pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphNodeGetType(cudaGraphNode_t node, enum cudaGraphNodeType *pType);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t *nodes, size_t *numNodes);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t *pRootNodes, size_t *pNumRootNodes);

































extern __declspec(__host__) cudaError_t __stdcall cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t *from, cudaGraphNode_t *to, size_t *numEdges);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t *pDependencies, size_t *pNumDependencies);































extern __declspec(__host__) cudaError_t __stdcall cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t *pDependentNodes, size_t *pNumDependentNodes);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, size_t numDependencies);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, size_t numDependencies);





























extern __declspec(__host__) cudaError_t __stdcall cudaGraphDestroyNode(cudaGraphNode_t node);





































extern __declspec(__host__) cudaError_t __stdcall cudaGraphInstantiate(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, cudaGraphNode_t *pErrorNode, char *pLogBuffer, size_t bufferSize);










































extern __declspec(__host__) cudaError_t __stdcall cudaGraphInstantiateWithFlags(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, unsigned long long flags);
#line 11491 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"










































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaKernelNodeParams *pNodeParams);

















































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaMemcpy3DParms *pNodeParams);






















































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParamsToSymbol(
    cudaGraphExec_t hGraphExec,
    cudaGraphNode_t node,
    const void* symbol,
    const void* src,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind);
#line 11647 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"






















































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParamsFromSymbol(
    cudaGraphExec_t hGraphExec,
    cudaGraphNode_t node,
    void* dst,
    const void* symbol,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind);
#line 11710 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"




















































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParams1D(
    cudaGraphExec_t hGraphExec,
    cudaGraphNode_t node,
    void* dst,
    const void* src,
    size_t count,
    enum cudaMemcpyKind kind);
#line 11770 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"














































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaMemsetParams *pNodeParams);






































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaHostNodeParams *pNodeParams);













































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph);
#line 11903 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"










































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event);
#line 11947 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"










































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event);
#line 11991 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"













































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams);
#line 12038 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"













































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams);
#line 12085 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"









































































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphNode_t *hErrorNode_out, enum cudaGraphExecUpdateResult *updateResult_out);
























 extern __declspec(__host__) cudaError_t __stdcall cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream);
#line 12185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





























extern __declspec(__host__) cudaError_t __stdcall cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream);






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecDestroy(cudaGraphExec_t graphExec);




















extern __declspec(__host__) cudaError_t __stdcall cudaGraphDestroy(cudaGraph_t graph);


















extern __declspec(__host__) cudaError_t __stdcall cudaGraphDebugDotPrint(cudaGraph_t graph, const char *path, unsigned int flags);



































extern __declspec(__host__) cudaError_t __stdcall cudaUserObjectCreate(cudaUserObject_t *object_out, void *ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags);























extern __declspec(__host__) cudaError_t __stdcall cudaUserObjectRetain(cudaUserObject_t object, unsigned int count = 1);



























extern __declspec(__host__) cudaError_t __stdcall cudaUserObjectRelease(cudaUserObject_t object, unsigned int count = 1);



























extern __declspec(__host__) cudaError_t __stdcall cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count = 1, unsigned int flags = 0);
























extern __declspec(__host__) cudaError_t __stdcall cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count = 1);

 































































extern __declspec(__host__) cudaError_t __stdcall cudaGetDriverEntryPoint(const char *symbol, void **funcPtr, unsigned long long flags);

 


extern __declspec(__host__) cudaError_t __stdcall cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId);



































































































































































 











extern __declspec(__host__) cudaError_t __cdecl cudaGetFuncBySymbol(cudaFunction_t* functionPtr, const void* symbolPtr);

 




























































































































#line 12793 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"











#line 12805 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"


}

#line 12810 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"


#line 12813 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"







#line 12821 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"

#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\channel_descriptor.h"






























































template<class T> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc(void)
{
  return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf1(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf2(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf4(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char>(void)
{
  int e = (int)sizeof(char) * 8;



#line 164 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\channel_descriptor.h"
  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
#line 166 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\channel_descriptor.h"
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<signed char>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned char>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char1>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar1>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char2>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar2>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char4>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar4>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned short>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short1>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort1>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short2>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort2>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short4>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort4>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned int>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int1>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint1>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int2>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint2>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int4>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint4>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}



template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned long>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long1>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong1>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long2>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong2>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long4>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong4>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

#line 395 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\channel_descriptor.h"

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float1>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float2>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float4>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescNV12(void)
{
    int e = (int)sizeof(char) * 8;

    return cudaCreateChannelDesc(e, e, e, 0, cudaChannelFormatKindNV12);
}

template<cudaChannelFormatKind> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc(void)
{
    return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedNormalized8X1>(void)
{
    return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedNormalized8X1);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedNormalized8X2>(void)
{
    return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedNormalized8X2);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedNormalized8X4>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindSignedNormalized8X4);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedNormalized8X1>(void)
{
    return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized8X1);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedNormalized8X2>(void)
{
    return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedNormalized8X2);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedNormalized8X4>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedNormalized8X4);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedNormalized16X1>(void)
{
    return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindSignedNormalized16X1);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedNormalized16X2>(void)
{
    return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindSignedNormalized16X2);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedNormalized16X4>(void)
{
    return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindSignedNormalized16X4);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedNormalized16X1>(void)
{
    return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized16X1);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedNormalized16X2>(void)
{
    return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindUnsignedNormalized16X2);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedNormalized16X4>(void)
{
    return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindUnsignedNormalized16X4);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindNV12>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 0, cudaChannelFormatKindNV12);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed1>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed1SRGB>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1SRGB);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed2>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed2SRGB>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2SRGB);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed3>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed3SRGB>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3SRGB);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed4>(void)
{
    return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed4);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedBlockCompressed4>(void)
{
    return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedBlockCompressed4);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed5>(void)
{
    return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed5);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedBlockCompressed5>(void)
{
    return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedBlockCompressed5);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed6H>(void)
{
    return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindUnsignedBlockCompressed6H);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedBlockCompressed6H>(void)
{
    return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindSignedBlockCompressed6H);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed7>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed7SRGB>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7SRGB);
}

#line 591 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\channel_descriptor.h"


 

#line 596 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\channel_descriptor.h"
#line 96 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 97 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_functions.h"




















































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"






















































































































#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
































































































































































































































#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 54 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"






















































































































































































#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"
#line 55 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_functions.h"























static __inline __declspec(__host__) struct cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
{
  struct cudaPitchedPtr s;

  s.ptr   = d;
  s.pitch = p;
  s.xsize = xsz;
  s.ysize = ysz;

  return s;
}
















static __inline __declspec(__host__) struct cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
{
  struct cudaPos p;

  p.x = x;
  p.y = y;
  p.z = z;

  return p;
}
















static __inline __declspec(__host__) struct cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
{
  struct cudaExtent e;

  e.width  = w;
  e.height = h;
  e.depth  = d;

  return e;
}

 

#line 146 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_functions.h"
#line 98 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"

#line 100 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"






















































































































































































#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/host_defines.h"
#line 101 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_functions.h"


























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_functions.h"



#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_functions.h"

#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_functions.h"







static __inline __declspec(__host__) __declspec(__device__) char1 make_char1(signed char x);

static __inline __declspec(__host__) __declspec(__device__) uchar1 make_uchar1(unsigned char x);

static __inline __declspec(__host__) __declspec(__device__) char2 make_char2(signed char x, signed char y);

static __inline __declspec(__host__) __declspec(__device__) uchar2 make_uchar2(unsigned char x, unsigned char y);

static __inline __declspec(__host__) __declspec(__device__) char3 make_char3(signed char x, signed char y, signed char z);

static __inline __declspec(__host__) __declspec(__device__) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z);

static __inline __declspec(__host__) __declspec(__device__) char4 make_char4(signed char x, signed char y, signed char z, signed char w);

static __inline __declspec(__host__) __declspec(__device__) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w);

static __inline __declspec(__host__) __declspec(__device__) short1 make_short1(short x);

static __inline __declspec(__host__) __declspec(__device__) ushort1 make_ushort1(unsigned short x);

static __inline __declspec(__host__) __declspec(__device__) short2 make_short2(short x, short y);

static __inline __declspec(__host__) __declspec(__device__) ushort2 make_ushort2(unsigned short x, unsigned short y);

static __inline __declspec(__host__) __declspec(__device__) short3 make_short3(short x,short y, short z);

static __inline __declspec(__host__) __declspec(__device__) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z);

static __inline __declspec(__host__) __declspec(__device__) short4 make_short4(short x, short y, short z, short w);

static __inline __declspec(__host__) __declspec(__device__) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w);

static __inline __declspec(__host__) __declspec(__device__) int1 make_int1(int x);

static __inline __declspec(__host__) __declspec(__device__) uint1 make_uint1(unsigned int x);

static __inline __declspec(__host__) __declspec(__device__) int2 make_int2(int x, int y);

static __inline __declspec(__host__) __declspec(__device__) uint2 make_uint2(unsigned int x, unsigned int y);

static __inline __declspec(__host__) __declspec(__device__) int3 make_int3(int x, int y, int z);

static __inline __declspec(__host__) __declspec(__device__) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z);

static __inline __declspec(__host__) __declspec(__device__) int4 make_int4(int x, int y, int z, int w);

static __inline __declspec(__host__) __declspec(__device__) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w);

static __inline __declspec(__host__) __declspec(__device__) long1 make_long1(long int x);

static __inline __declspec(__host__) __declspec(__device__) ulong1 make_ulong1(unsigned long int x);

static __inline __declspec(__host__) __declspec(__device__) long2 make_long2(long int x, long int y);

static __inline __declspec(__host__) __declspec(__device__) ulong2 make_ulong2(unsigned long int x, unsigned long int y);

static __inline __declspec(__host__) __declspec(__device__) long3 make_long3(long int x, long int y, long int z);

static __inline __declspec(__host__) __declspec(__device__) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z);

static __inline __declspec(__host__) __declspec(__device__) long4 make_long4(long int x, long int y, long int z, long int w);

static __inline __declspec(__host__) __declspec(__device__) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w);

static __inline __declspec(__host__) __declspec(__device__) float1 make_float1(float x);

static __inline __declspec(__host__) __declspec(__device__) float2 make_float2(float x, float y);

static __inline __declspec(__host__) __declspec(__device__) float3 make_float3(float x, float y, float z);

static __inline __declspec(__host__) __declspec(__device__) float4 make_float4(float x, float y, float z, float w);

static __inline __declspec(__host__) __declspec(__device__) longlong1 make_longlong1(long long int x);

static __inline __declspec(__host__) __declspec(__device__) ulonglong1 make_ulonglong1(unsigned long long int x);

static __inline __declspec(__host__) __declspec(__device__) longlong2 make_longlong2(long long int x, long long int y);

static __inline __declspec(__host__) __declspec(__device__) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y);

static __inline __declspec(__host__) __declspec(__device__) longlong3 make_longlong3(long long int x, long long int y, long long int z);

static __inline __declspec(__host__) __declspec(__device__) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z);

static __inline __declspec(__host__) __declspec(__device__) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w);

static __inline __declspec(__host__) __declspec(__device__) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w);

static __inline __declspec(__host__) __declspec(__device__) double1 make_double1(double x);

static __inline __declspec(__host__) __declspec(__device__) double2 make_double2(double x, double y);

static __inline __declspec(__host__) __declspec(__device__) double3 make_double3(double x, double y, double z);

static __inline __declspec(__host__) __declspec(__device__) double4 make_double4(double x, double y, double z, double w);




#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_functions.hpp"


























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_functions.hpp"



#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_functions.hpp"

#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_functions.hpp"







static __inline __declspec(__host__) __declspec(__device__) char1 make_char1(signed char x)
{
  char1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar1 make_uchar1(unsigned char x)
{
  uchar1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char2 make_char2(signed char x, signed char y)
{
  char2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar2 make_uchar2(unsigned char x, unsigned char y)
{
  uchar2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char3 make_char3(signed char x, signed char y, signed char z)
{
  char3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
{
  uchar3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char4 make_char4(signed char x, signed char y, signed char z, signed char w)
{
  char4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
{
  uchar4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short1 make_short1(short x)
{
  short1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort1 make_ushort1(unsigned short x)
{
  ushort1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short2 make_short2(short x, short y)
{
  short2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort2 make_ushort2(unsigned short x, unsigned short y)
{
  ushort2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short3 make_short3(short x,short y, short z)
{ 
  short3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
{
  ushort3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short4 make_short4(short x, short y, short z, short w)
{
  short4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
{
  ushort4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int1 make_int1(int x)
{
  int1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint1 make_uint1(unsigned int x)
{
  uint1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int2 make_int2(int x, int y)
{
  int2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint2 make_uint2(unsigned int x, unsigned int y)
{
  uint2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int3 make_int3(int x, int y, int z)
{
  int3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z)
{
  uint3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int4 make_int4(int x, int y, int z, int w)
{
  int4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w)
{
  uint4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long1 make_long1(long int x)
{
  long1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong1 make_ulong1(unsigned long int x)
{
  ulong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long2 make_long2(long int x, long int y)
{
  long2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong2 make_ulong2(unsigned long int x, unsigned long int y)
{
  ulong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long3 make_long3(long int x, long int y, long int z)
{
  long3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z)
{
  ulong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long4 make_long4(long int x, long int y, long int z, long int w)
{
  long4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w)
{
  ulong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float1 make_float1(float x)
{
  float1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float2 make_float2(float x, float y)
{
  float2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float3 make_float3(float x, float y, float z)
{
  float3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float4 make_float4(float x, float y, float z, float w)
{
  float4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong1 make_longlong1(long long int x)
{
  longlong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong1 make_ulonglong1(unsigned long long int x)
{
  ulonglong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong2 make_longlong2(long long int x, long long int y)
{
  longlong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y)
{
  ulonglong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong3 make_longlong3(long long int x, long long int y, long long int z)
{
  longlong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z)
{
  ulonglong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w)
{
  longlong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w)
{
  ulonglong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double1 make_double1(double x)
{
  double1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double2 make_double2(double x, double y)
{
  double2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double3 make_double3(double x, double y, double z)
{
  double3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double4 make_double4(double x, double y, double z, double w)
{
  double4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}



#line 316 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_functions.hpp"

#line 173 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_functions.h"
#line 174 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_functions.h"

#line 176 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_functions.h"
#line 102 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"











#line 114 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"












#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"






















































































































#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
































































































































































































































#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 72 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"






















































































































































































#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"
#line 73 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"












#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_memory.h"










#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_memcpy_s.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\errno.h"







#pragma once





#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {




     int* __cdecl _errno(void);
    

     errno_t __cdecl _set_errno(  int _Value);
     errno_t __cdecl _get_errno(  int* _Value);

     unsigned long* __cdecl __doserrno(void);
    

     errno_t __cdecl _set_doserrno(  unsigned long _Value);
     errno_t __cdecl _get_doserrno(  unsigned long * _Value);
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\errno.h"










































    
    
    
    
    
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\errno.h"






    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\errno.h"



} __pragma(pack(pop))

#pragma warning(pop) 
#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\errno.h"
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_memcpy_s.h"
#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime_string.h"







#pragma once



#pragma warning(push)
#pragma warning(disable:   4514 4820 )



__pragma(pack(push, 8)) extern "C" {



[[nodiscard]]  
 void const* __cdecl memchr(
      void const* _Buf,
                                 int         _Val,
                                 size_t      _MaxCount
    );

[[nodiscard]]  
int __cdecl memcmp(
      void const* _Buf1,
      void const* _Buf2,
                         size_t      _Size
    );


 

#line 43 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime_string.h"
void* __cdecl memcpy(
      void* _Dst,
            void const* _Src,
                               size_t      _Size
    );


 void* __cdecl memmove(
      void*       _Dst,
            void const* _Src,
                                   size_t      _Size
    );

 

#line 63 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime_string.h"
void* __cdecl memset(
      void*  _Dst,
                               int    _Val,
                               size_t _Size
    );

[[nodiscard]]  
 char const* __cdecl strchr(
      char const* _Str,
        int         _Val
    );

[[nodiscard]]  
 char const* __cdecl strrchr(
      char const* _Str,
        int         _Ch
    );

[[nodiscard]]    
 char const* __cdecl strstr(
      char const* _Str,
      char const* _SubStr
    );

[[nodiscard]]  

 wchar_t const* __cdecl wcschr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

[[nodiscard]]  
 wchar_t const* __cdecl wcsrchr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

[[nodiscard]]    

 wchar_t const* __cdecl wcsstr(
      wchar_t const* _Str,
      wchar_t const* _SubStr
    );



} __pragma(pack(pop))

#line 112 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime_string.h"

#pragma warning(pop) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_memcpy_s.h"

#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {


    
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_memcpy_s.h"














     
    
    static __inline errno_t __cdecl memcpy_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        if (_Source == 0 || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
            { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

            
            return 22;
        }
        memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }

    
    static __inline errno_t __cdecl memmove_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

        memmove(_Destination, _Source, _SourceSize);
        return 0;
    }

#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_memcpy_s.h"




#pragma warning(pop) 
} __pragma(pack(pop))
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_memory.h"


#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )




__pragma(pack(push, 8)) extern "C" {



 
 int __cdecl _memicmp(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size
    );

 
 int __cdecl _memicmp_l(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size,
                         _locale_t   _Locale
    );





    












#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_memory.h"

    












#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_memory.h"

#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_memory.h"





    
     void* __cdecl memccpy(
          void*       _Dst,
            void const* _Src,
                                   int         _Val,
                                   size_t      _Size
        );

      
     int __cdecl memicmp(
          void const* _Buf1,
          void const* _Buf2,
                                 size_t      _Size
        );

#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_memory.h"





    extern "C++"  
    inline void* __cdecl memchr(
          void*  _Pv,
                              int    _C,
                              size_t _N
        )
    {
        void const* const _Pvc = _Pv;
        return const_cast<void*>(memchr(_Pvc, _C, _N));
    }

#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_memory.h"



} __pragma(pack(pop))

#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_memory.h"

#pragma warning(pop) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"








#pragma once




#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )




__pragma(pack(push, 8)) extern "C" {










    
     errno_t __cdecl wcscat_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );

    
     errno_t __cdecl wcscpy_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );

    
     errno_t __cdecl wcsncat_s(
          wchar_t*       _Destination,
                                     rsize_t        _SizeInWords,
               wchar_t const* _Source,
                                     rsize_t        _MaxCount
        );

    
     errno_t __cdecl wcsncpy_s(
          wchar_t*       _Destination,
                                  rsize_t        _SizeInWords,
            wchar_t const* _Source,
                                  rsize_t        _MaxCount
        );

     
     wchar_t* __cdecl wcstok_s(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
            wchar_t**      _Context
        );

#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"











#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

 
 __declspec(allocator) wchar_t* __cdecl _wcsdup(
      wchar_t const* _String
    );



#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"



extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"


      wchar_t* __cdecl wcscat( wchar_t *_Destination,  wchar_t const* _Source);
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

 
 int __cdecl wcscmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl wcscpy( wchar_t *_Destination,  wchar_t const* _Source);
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

 
 size_t __cdecl wcscspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
 size_t __cdecl wcslen(
      wchar_t const* _String
    );

 

#line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"
 size_t __cdecl wcsnlen(
      wchar_t const* _Source,
                            size_t         _MaxCount
    );



     
    
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"
    
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"
    static __inline size_t __cdecl wcsnlen_s(
          wchar_t const* _Source,
                                size_t         _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }

#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(  wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl wcsncat(  wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

 
 int __cdecl wcsncmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl wcsncpy(    wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

 
 wchar_t const* __cdecl wcspbrk(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
 size_t __cdecl wcsspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

  
 wchar_t* __cdecl wcstok(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
        wchar_t**      _Context
    );



    

#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"
        



    #line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

      
    static __inline wchar_t* __cdecl _wcstok(
          wchar_t*       const _String,
                 wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }

    

#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

    
        extern "C++"   __declspec(deprecated("wcstok has been changed to conform with the ISO C standard, " "adding an extra context parameter. To use the legacy Microsoft " "wcstok, define _CRT_NON_CONFORMING_WCSTOK."))
        inline wchar_t* __cdecl wcstok(
              wchar_t*       _String,
                     wchar_t const* _Delimiter
            ) throw()
        {
            return wcstok(_String, _Delimiter, 0);
        }
    #line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"



 
  
 wchar_t* __cdecl _wcserror(
      int _ErrorNumber
    );


 errno_t __cdecl _wcserror_s(
      wchar_t* _Buffer,
                                  size_t   _SizeInWords,
                                  int      _ErrorNumber
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size],   int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

 
 
  
 wchar_t* __cdecl __wcserror(
      wchar_t const* _String
    );

  errno_t __cdecl __wcserror_s(
      wchar_t*       _Buffer,
                                  size_t         _SizeInWords,
                                wchar_t const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

   int __cdecl _wcsicmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

   int __cdecl _wcsicmp_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

   int __cdecl _wcsnicmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

   int __cdecl _wcsnicmp_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

  errno_t __cdecl _wcsnset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value,
                                 size_t   _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(  wchar_t (&_Destination)[_Size],   wchar_t _Value,   size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcsnset(  wchar_t *_String,   wchar_t _Value,   size_t _MaxCount);
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

 wchar_t* __cdecl _wcsrev(
      wchar_t* _String
    );

  errno_t __cdecl _wcsset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(  wchar_t (&_String)[_Size],   wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcsset(  wchar_t *_String,   wchar_t _Value);
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

  errno_t __cdecl _wcslwr_s(
      wchar_t* _String,
                                 size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(  wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcslwr( wchar_t *_String);
#line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"


 errno_t __cdecl _wcslwr_s_l(
      wchar_t*  _String,
                                 size_t    _SizeInWords,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcslwr_l(  wchar_t *_String,   _locale_t _Locale);
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"


 errno_t __cdecl _wcsupr_s(
      wchar_t* _String,
                          size_t   _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(  wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcsupr( wchar_t *_String);
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"


 errno_t __cdecl _wcsupr_s_l(
      wchar_t*  _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcsupr_l(  wchar_t *_String,   _locale_t _Locale);
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

 

 size_t __cdecl wcsxfrm(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount
    );

 

 size_t __cdecl _wcsxfrm_l(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount,
                                       _locale_t      _Locale
    );

 
 int __cdecl wcscoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
 int __cdecl _wcscoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
 int __cdecl _wcsicoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
 int __cdecl _wcsicoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
 int __cdecl _wcsncoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
 int __cdecl _wcsncoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

 
 int __cdecl _wcsnicoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
 int __cdecl _wcsnicoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );









extern "C++" {

     
    
    inline wchar_t* __cdecl wcschr(  wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcschr(static_cast<wchar_t const*>(_String), _C));
    }

     
    inline wchar_t* __cdecl wcspbrk(  wchar_t* _String,   wchar_t const* _Control)
    {
        return const_cast<wchar_t*>(wcspbrk(static_cast<wchar_t const*>(_String), _Control));
    }

     
    inline wchar_t* __cdecl wcsrchr(  wchar_t* _String,   wchar_t _C)
    {
        return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));
    }

       
    
    inline wchar_t* __cdecl wcsstr(  wchar_t* _String,   wchar_t const*_SubStr)
    {
        return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));
    }

}
#line 555 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"









    


#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

      
     wchar_t* __cdecl wcsdup(
          wchar_t const* _String
        );

    

#line 577 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

    
    

      
     int __cdecl wcsicmp(
          wchar_t const* _String1,
          wchar_t const* _String2
        );

      
     int __cdecl wcsnicmp(
          wchar_t const* _String1,
          wchar_t const* _String2,
                                size_t         _MaxCount
        );

    
     
     wchar_t* __cdecl wcsnset(
          wchar_t* _String,
                                  wchar_t  _Value,
                                  size_t   _MaxCount
        );

    
     
     wchar_t* __cdecl wcsrev(
          wchar_t* _String
        );

    
     
     wchar_t* __cdecl wcsset(
          wchar_t* _String,
               wchar_t  _Value
        );

    
     
     wchar_t* __cdecl wcslwr(
          wchar_t* _String
        );

    
     
     wchar_t* __cdecl wcsupr(
          wchar_t* _String
        );

      
     int __cdecl wcsicoll(
          wchar_t const* _String1,
          wchar_t const* _String2
        );

#line 634 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"



} __pragma(pack(pop))

#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstring.h"

#pragma warning(pop) 
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"




#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {







    
     errno_t __cdecl strcpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
                                char const* _Source
        );

    
     errno_t __cdecl strcat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
                                   char const* _Source
        );

    
     errno_t __cdecl strerror_s(
          char*  _Buffer,
                                  size_t _SizeInBytes,
                                  int    _ErrorNumber);

    
     errno_t __cdecl strncat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
               char const* _Source,
                                     rsize_t     _MaxCount
        );

    
     errno_t __cdecl strncpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
            char const* _Source,
                                  rsize_t     _MaxCount
        );

     
     char*  __cdecl strtok_s(
                          char*       _String,
                                 char const* _Delimiter,
            char**      _Context
        );

#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

 void* __cdecl _memccpy(
      void*       _Dst,
                                   void const* _Src,
                                   int         _Val,
                                   size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Destination)[_Size],   char const* _Source) throw() { return strcat_s(_Destination, _Size, _Source); } }
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"



      char* __cdecl strcat( char *_Destination,  char const* _Source);
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

 
int __cdecl strcmp(
      char const* _Str1,
      char const* _Str2
    );

 
 int __cdecl _strcmpi(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl strcoll(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl _strcoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(  char (&_Destination)[_Size],   char const* _Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

  char* __cdecl strcpy( char *_Destination,  char const* _Source);
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

 
 size_t __cdecl strcspn(
      char const* _Str,
      char const* _Control
    );




#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

 
 __declspec(allocator) char* __cdecl _strdup(
      char const* _Source
    );



#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

 
 
  
 char*  __cdecl _strerror(
      char const* _ErrorMessage
    );


 errno_t __cdecl _strerror_s(
      char*       _Buffer,
                              size_t      _SizeInBytes,
                        char const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size],   char const* _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

 
  
 char* __cdecl strerror(
      int _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size],   int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

 
 int __cdecl _stricmp(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl _stricoll(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl _stricoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
 int __cdecl _stricmp_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
size_t __cdecl strlen(
      char const* _Str
    );


 errno_t __cdecl _strlwr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(  char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

  char* __cdecl _strlwr( char *_String);
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"


 errno_t __cdecl _strlwr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

  char* __cdecl _strlwr_l(  char *_String,   _locale_t _Locale);
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(  char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

  char* __cdecl strncat(  char *_Destination,   char const* _Source,   size_t _Count);
#line 269 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

 
 int __cdecl strncmp(
      char const* _Str1,
      char const* _Str2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strnicmp(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strnicmp_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
 int __cdecl _strnicoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strnicoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
 int __cdecl _strncoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strncoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 size_t __cdecl __strncnt(
      char const* _String,
                         size_t      _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

  char* __cdecl strncpy(    char *_Destination,   char const* _Source,   size_t _Count);
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

 

#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

#line 351 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"
 size_t __cdecl strnlen(
      char const* _String,
                            size_t      _MaxCount
    );



     
    
#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"
    
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"
    static __inline size_t __cdecl strnlen_s(
          char const* _String,
                                size_t      _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }

#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"


 errno_t __cdecl _strnset_s(
      char*  _String,
                                 size_t _SizeInBytes,
                                 int    _Value,
                                 size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(  char (&_Destination)[_Size],   int _Value,   size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }
#line 391 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

  char* __cdecl _strnset(  char *_Destination,   int _Value,   size_t _Count);
#line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

 
 char const* __cdecl strpbrk(
      char const* _Str,
      char const* _Control
    );

 char* __cdecl _strrev(
      char* _Str
    );


 errno_t __cdecl _strset_s(
      char*  _Destination,
                                     size_t _DestinationSize,
                                     int    _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(  char (&_Destination)[_Size],   int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

  char* __cdecl _strset( char *_Destination,  int _Value);
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

 
 size_t __cdecl strspn(
      char const* _Str,
      char const* _Control
    );

  
 char* __cdecl strtok(
      char*       _String,
             char const* _Delimiter
    );


 errno_t __cdecl _strupr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(  char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

  char* __cdecl _strupr( char *_String);
#line 456 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"


 errno_t __cdecl _strupr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

  char* __cdecl _strupr_l(  char *_String,   _locale_t _Locale);
#line 476 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"

 

 size_t __cdecl strxfrm(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount
    );

 

 size_t __cdecl _strxfrm_l(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount,
                                       _locale_t   _Locale
    );




extern "C++"
{
     
    inline char* __cdecl strchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));
    }

     
    inline char* __cdecl strpbrk(  char* const _String,   char const* const _Control)
    {
        return const_cast<char*>(strpbrk(static_cast<char const*>(_String), _Control));
    }

     
    inline char* __cdecl strrchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));
    }

       
    inline char* __cdecl strstr(  char* const _String,   char const* const _SubString)
    {
        return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));
    }
}
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"





    
    
      
     char* __cdecl strdup(
          char const* _String
        );
    

    
      
     int __cdecl strcmpi(
          char const* _String1,
          char const* _String2
        );

      
     int __cdecl stricmp(
          char const* _String1,
          char const* _String2
        );

    
     char* __cdecl strlwr(
          char* _String
        );

      
     int __cdecl strnicmp(
          char const* _String1,
          char const* _String2,
                                size_t      _MaxCount
        );

    
     char* __cdecl strnset(
          char*  _String,
                                  int    _Value,
                                  size_t _MaxCount
        );

    
     char* __cdecl strrev(
          char* _String
        );

    
    char* __cdecl strset(
          char* _String,
               int   _Value);

    
     char* __cdecl strupr(
          char* _String
        );

#line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"



} __pragma(pack(pop))

#pragma warning(pop) 
#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"
#line 593 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\string.h"
#line 86 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wtime.h"








#pragma once



#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {








struct tm
{
    int tm_sec;   
    int tm_min;   
    int tm_hour;  
    int tm_mday;  
    int tm_mon;   
    int tm_year;  
    int tm_wday;  
    int tm_yday;  
    int tm_isdst; 
};







  
 
 
 wchar_t* __cdecl _wasctime(
      struct tm const* _Tm
    );

 

 errno_t __cdecl _wasctime_s(
        wchar_t*         _Buffer,
                                          size_t           _SizeInWords,
                                                       struct tm const* _Tm
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wasctime_s(  wchar_t (&_Buffer)[_Size],   struct tm const* _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wtime.h"

 

 size_t __cdecl wcsftime(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm
    );

 

 size_t __cdecl _wcsftime_l(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );

 
  
 wchar_t* __cdecl _wctime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _wctime32_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(  wchar_t (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wtime.h"

 
 
  
 wchar_t* __cdecl _wctime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _wctime64_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time64_t const* _Time);

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(  wchar_t (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wtime.h"


 errno_t __cdecl _wstrdate_s(
       wchar_t* _Buffer,
                                                                                size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wtime.h"

   wchar_t* __cdecl _wstrdate( wchar_t *_Buffer);
#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wtime.h"


 errno_t __cdecl _wstrtime_s(
       wchar_t* _Buffer,
                                                                                size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wtime.h"

   wchar_t* __cdecl _wstrtime( wchar_t *_Buffer);
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wtime.h"









    




















         
        static __inline wchar_t * __cdecl _wctime(
              time_t const* const _Time)
        {
            return _wctime64(_Time);
        }

        
        static __inline errno_t __cdecl _wctime_s(
                  wchar_t*      const _Buffer,
                                                             size_t        const _SizeInWords,
                                                             time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }

    #line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wtime.h"
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wtime.h"

} __pragma(pack(pop))

#pragma warning(pop) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"

#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {








typedef long clock_t;

struct _timespec32
{
    __time32_t tv_sec;
    long       tv_nsec;
};

struct _timespec64
{
    __time64_t tv_sec;
    long       tv_nsec;
};


    struct timespec
    {
        time_t tv_sec;  
        long   tv_nsec; 
    };
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"
















  
 int* __cdecl __daylight(void);




  
 long* __cdecl __dstbias(void);




  
 long* __cdecl __timezone(void);




    
 char** __cdecl __tzname(void);



  
 errno_t __cdecl _get_daylight(
      int* _Daylight
    );

 
 errno_t __cdecl _get_dstbias(
      long* _DaylightSavingsBias
    );

  
 errno_t __cdecl _get_timezone(
      long* _TimeZone
    );

 
 errno_t __cdecl _get_tzname(
                             size_t* _ReturnValue,
      char*   _Buffer,
                              size_t  _SizeInBytes,
                              int     _Index
    );








 
 
  
 char* __cdecl asctime(
      struct tm const* _Tm
    );


     
    
     errno_t __cdecl asctime_s(
            char*            _Buffer,
                                            size_t           _SizeInBytes,
                                                         struct tm const* _Tm
        );
#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl asctime_s(  char (&_Buffer)[_Size],   struct tm const* _Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }
#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"

 
 clock_t __cdecl clock(void);

 
 
  
 char* __cdecl _ctime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _ctime32_s(
        char*             _Buffer,
                                        size_t            _SizeInBytes,
                                                     __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime32_s(  char (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"

 
 
  
 char* __cdecl _ctime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _ctime64_s(
        char*             _Buffer,
                                          size_t            _SizeInBytes,
                                                       __time64_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime64_s(  char (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"

 
 double __cdecl _difftime32(
      __time32_t _Time1,
      __time32_t _Time2
    );

 
 double __cdecl _difftime64(
      __time64_t _Time1,
      __time64_t _Time2
    );

 
  
 struct tm* __cdecl _gmtime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _gmtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  
 struct tm* __cdecl _gmtime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _gmtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
  
 struct tm* __cdecl _localtime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _localtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  
 struct tm* __cdecl _localtime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _localtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
 __time32_t __cdecl _mkgmtime32(
      struct tm* _Tm
    );

 
 __time64_t __cdecl _mkgmtime64(
      struct tm* _Tm
    );


 __time32_t __cdecl _mktime32(
      struct tm* _Tm
    );


 __time64_t __cdecl _mktime64(
      struct tm* _Tm
    );

 

 size_t __cdecl strftime(
       char*            _Buffer,
                               size_t           _SizeInBytes,
        char const*      _Format,
                               struct tm const* _Tm
    );

 

 size_t __cdecl _strftime_l(
           char*            _Buffer,
                               size_t           _MaxSize,
        char const*      _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );


 errno_t __cdecl _strdate_s(
       char*  _Buffer,
                                                                              size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strdate_s(  char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }
#line 293 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"

   char* __cdecl _strdate( char *_Buffer);
#line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"


 errno_t __cdecl _strtime_s(
       char*  _Buffer,
                                                                              size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strtime_s(  char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"

  char* __cdecl _strtime( char *_Buffer);
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"

 __time32_t __cdecl _time32(
      __time32_t* _Time
    );

 __time64_t __cdecl _time64(
      __time64_t* _Time
    );

 
 
 int __cdecl _timespec32_get(
      struct _timespec32* _Ts,
       int                 _Base
    );

 
 
 int __cdecl _timespec64_get(
      struct _timespec64* _Ts,
       int                 _Base
    );










     void __cdecl _tzset(void);

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "GetLocalTime" " " "instead. See online help for details."))
     unsigned __cdecl _getsystime(
          struct tm* _Tm
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetLocalTime" " " "instead. See online help for details."))
     unsigned __cdecl _setsystime(
          struct tm* _Tm,
          unsigned   _Milliseconds
        );

#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"










    


































































































          
        static __inline char* __cdecl ctime(
              time_t const* const _Time
            )
        {
            return _ctime64(_Time);
        }

         
        static __inline double __cdecl difftime(
              time_t const _Time1,
              time_t const _Time2
            )
        {
            return _difftime64(_Time1, _Time2);
        }

          
        static __inline struct tm* __cdecl gmtime(
              time_t const* const _Time)
        {
            return _gmtime64(_Time);
        }

        
        static __inline struct tm* __cdecl localtime(
              time_t const* const _Time
            )
        {
            return _localtime64(_Time);
        }

         
        static __inline time_t __cdecl _mkgmtime(
              struct tm* const _Tm
            )
        {
            return _mkgmtime64(_Tm);
        }

        
        static __inline time_t __cdecl mktime(
              struct tm* const _Tm
            )
        {
            return _mktime64(_Tm);
        }

        static __inline time_t __cdecl time(
              time_t* const _Time
            )
        {
            return _time64(_Time);
        }

         
        static __inline int __cdecl timespec_get(
              struct timespec* const _Ts,
               int              const _Base
            )
        {
            return _timespec64_get((struct _timespec64*)_Ts, _Base);
        }

        
            
            static __inline errno_t __cdecl ctime_s(
                    char*         const _Buffer,
                                                    size_t        const _SizeInBytes,
                                                                 time_t const* const _Time
                )
            {
                return _ctime64_s(_Buffer, _SizeInBytes, _Time);
            }

            
            static __inline errno_t __cdecl gmtime_s(
                  struct tm*    const _Tm,
                   time_t const* const _Time
                )
            {
                return _gmtime64_s(_Tm, _Time);
            }

            
            static __inline errno_t __cdecl localtime_s(
                  struct tm*    const _Tm,
                   time_t const* const _Time
                )
            {
                return _localtime64_s(_Tm, _Time);
            }
        #line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"

    #line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"

#line 567 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"










    

    
          void __cdecl tzset(void);
    #line 582 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"

#line 584 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"



} __pragma(pack(pop))

#pragma warning(pop) 
#line 591 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\time.h"
#line 87 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"

extern "C"
{
#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) clock_t __cdecl clock(void)


#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"
;
extern         __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void*   __cdecl memset(void*, int, size_t) ;
extern         __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void*   __cdecl memcpy(void*, const void*, size_t) ;

}
#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"








#line 110 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"

#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\new"





#pragma once




#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\exception"





#pragma once


#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"





#pragma once





#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\crtdbg.h"







#pragma once




#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime_new_debug.h"







#pragma once

#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime_new.h"







#pragma once



#pragma warning(push)
#pragma warning(disable:   4514 4820 )
#pragma warning(disable: 4985) 


extern "C++" {

#pragma pack(push, 8)













    namespace std
    {
        struct nothrow_t {
            explicit nothrow_t() = default;
        };

        


            extern nothrow_t const nothrow;
        #line 44 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime_new.h"
    }
#line 46 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime_new.h"

[[nodiscard]]     __declspec(allocator)
void* __cdecl operator new(
    size_t _Size
    );

[[nodiscard]]       __declspec(allocator)
void* __cdecl operator new(
    size_t _Size,
    ::std::nothrow_t const&
    ) noexcept;

[[nodiscard]]     __declspec(allocator)
void* __cdecl operator new[](
    size_t _Size
    );

[[nodiscard]]       __declspec(allocator)
void* __cdecl operator new[](
    size_t _Size,
    ::std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete(
    void* _Block
    ) noexcept;

void __cdecl operator delete(
    void* _Block,
    ::std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete[](
    void* _Block
    ) noexcept;

void __cdecl operator delete[](
    void* _Block,
    ::std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete(
    void*  _Block,
    size_t _Size
    ) noexcept;

void __cdecl operator delete[](
    void* _Block,
    size_t _Size
    ) noexcept;
































































#pragma warning(push)
#pragma warning(disable: 4577) 
#pragma warning(disable: 4514) 

    
    [[nodiscard]]      
    inline void* __cdecl operator new(size_t _Size,   void* _Where) noexcept
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete(void*, void*) noexcept
    {
        return;
    }
#line 177 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime_new.h"


    
    [[nodiscard]]      
    inline void* __cdecl operator new[](size_t _Size,
          void* _Where) noexcept
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete[](void*, void*) noexcept
    {
    }
#line 192 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime_new.h"
#pragma warning(pop)



#pragma pack(pop)

} 
#line 200 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime_new.h"

#pragma warning(pop) 
#line 11 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime_new_debug.h"

#pragma warning(push)
#pragma warning(disable:   4514 4820 )


extern "C++" {

#pragma pack(push, 8)






    [[nodiscard]]      
    __declspec(allocator) void* __cdecl operator new(
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

    [[nodiscard]]      
    __declspec(allocator) void* __cdecl operator new[](
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

    void __cdecl operator delete(
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) noexcept;

    void __cdecl operator delete[](
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) noexcept;

#line 56 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime_new_debug.h"



#pragma pack(pop)

} 
#line 63 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime_new_debug.h"

#pragma warning(pop) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\crtdbg.h"

#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {



typedef void* _HFILE; 

























typedef int (__cdecl* _CRT_REPORT_HOOK )(int, char*,    int*);
typedef int (__cdecl* _CRT_REPORT_HOOKW)(int, wchar_t*, int*);





typedef int (__cdecl* _CRT_ALLOC_HOOK)(int, void*, size_t, int, long, unsigned char const*, int);























































typedef void (__cdecl* _CRT_DUMP_CLIENT)(void*, size_t);





struct _CrtMemBlockHeader;

typedef struct _CrtMemState
{
    struct _CrtMemBlockHeader* pBlockHeader;
    size_t lCounts[5];
    size_t lSizes[5];
    size_t lHighWaterCount;
    size_t lTotalCount;
} _CrtMemState;



    
    

    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
























































































#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\crtdbg.h"










    
    
    
    
    
    
    

    
    
    
    
    
    
    
    

    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

















































































































































































































































































































#line 590 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\crtdbg.h"











    
    
    
    
    
    
    

















































































#line 690 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\crtdbg.h"











    

    
        
    #line 706 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\crtdbg.h"

    
        
    #line 710 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\crtdbg.h"

    
        
    #line 714 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\crtdbg.h"

    
    

    
    

    
    

    
    












































#line 771 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\crtdbg.h"













    
#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\crtdbg.h"



























} __pragma(pack(pop))

#pragma warning(pop) 
#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\crtdbg.h"
#line 13 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\crtdefs.h"


















































































#line 14 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294  4984  )












#line 31 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"

#line 33 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
















#line 50 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 51 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 52 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"






















































#line 107 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 108 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"









#line 118 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"

#line 120 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 121 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"




#line 126 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"

#line 128 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"

#line 130 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"

#line 132 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"



#pragma detect_mismatch("_MSC_VER", "1900")
#line 137 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"


#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")
#line 141 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"



#pragma detect_mismatch("RuntimeLibrary", "MT_StaticRelease")






#line 152 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 153 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 154 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"






#line 161 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 162 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"



#line 166 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"





























#line 196 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"





#line 202 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"







#line 210 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"






#line 217 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 218 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"



#line 222 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"

#line 224 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"


#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\use_ansi.h"





#pragma once








#line 16 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\use_ansi.h"
















#line 33 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\use_ansi.h"



#line 37 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\use_ansi.h"




#line 42 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\use_ansi.h"
#line 43 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\use_ansi.h"




#line 48 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\use_ansi.h"

#pragma comment(lib, "libcpmt" "" "")






#line 57 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\use_ansi.h"

#line 59 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\use_ansi.h"

#line 61 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\use_ansi.h"
#line 227 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"



















#line 247 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"






#line 254 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 255 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"



#line 259 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"






#line 266 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 267 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"












#line 280 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"

#line 282 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"

#line 284 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 285 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"






#line 292 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 293 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"






#line 300 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 301 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"




#line 306 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"

#line 308 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 309 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"


















#line 328 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"

#line 330 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 331 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"



#line 335 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"



#line 339 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"


namespace std {
enum _Uninitialized { 
    _Noinit
};


class  _Lockit { 
public:














    __thiscall _Lockit() noexcept;
    explicit __thiscall _Lockit(int) noexcept; 
    __thiscall ~_Lockit() noexcept; 
#line 367 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"

    static void __cdecl _Lockit_ctor(int) noexcept;
    static void __cdecl _Lockit_dtor(int) noexcept;

private:
    static void __cdecl _Lockit_ctor(_Lockit*) noexcept;
    static void __cdecl _Lockit_ctor(_Lockit*, int) noexcept;
    static void __cdecl _Lockit_dtor(_Lockit*) noexcept;

public:
     _Lockit(const _Lockit&) = delete;
    _Lockit&  operator=(const _Lockit&) = delete;

private:
    int _Locktype;
};








































































#line 456 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"

class  _Init_locks { 
public:










    __thiscall _Init_locks() noexcept;
    __thiscall ~_Init_locks() noexcept;
#line 472 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"

private:
    static void __cdecl _Init_locks_ctor(_Init_locks*) noexcept;
    static void __cdecl _Init_locks_dtor(_Init_locks*) noexcept;
};





































#line 515 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
}
#line 517 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"







#pragma warning(pop)
#pragma pack(pop)
#line 527 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 528 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\yvals.h"
#line 10 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\exception"


#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"





#pragma once




#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstdint"





#pragma once





#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\stdint.h"







#pragma once






#pragma warning(push)
#pragma warning(disable:   4514 4820 )

typedef signed char        int8_t;
typedef short              int16_t;
typedef int                int32_t;
typedef long long          int64_t;
typedef unsigned char      uint8_t;
typedef unsigned short     uint16_t;
typedef unsigned int       uint32_t;
typedef unsigned long long uint64_t;

typedef signed char        int_least8_t;
typedef short              int_least16_t;
typedef int                int_least32_t;
typedef long long          int_least64_t;
typedef unsigned char      uint_least8_t;
typedef unsigned short     uint_least16_t;
typedef unsigned int       uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char        int_fast8_t;
typedef int                int_fast16_t;
typedef int                int_fast32_t;
typedef long long          int_fast64_t;
typedef unsigned char      uint_fast8_t;
typedef unsigned int       uint_fast16_t;
typedef unsigned int       uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef long long          intmax_t;
typedef unsigned long long uintmax_t;














































    
    
    
#line 97 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\stdint.h"







































#pragma warning(pop) 

#line 139 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\stdint.h"
#line 13 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstdint"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294  4984  )




namespace std {
using :: int8_t;
using :: int16_t;
using :: int32_t;
using :: int64_t;
using :: uint8_t;
using :: uint16_t;
using :: uint32_t;
using :: uint64_t;

using :: int_least8_t;
using :: int_least16_t;
using :: int_least32_t;
using :: int_least64_t;
using :: uint_least8_t;
using :: uint_least16_t;
using :: uint_least32_t;
using :: uint_least64_t;

using :: int_fast8_t;
using :: int_fast16_t;
using :: int_fast32_t;
using :: int_fast64_t;
using :: uint_fast8_t;
using :: uint_fast16_t;
using :: uint_fast32_t;
using :: uint_fast64_t;

using :: intmax_t;
using :: intptr_t;
using :: uintmax_t;
using :: uintptr_t;


namespace [[deprecated( "warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 {
    using :: int8_t;
    using :: int16_t;
    using :: int32_t;
    using :: int64_t;
    using :: uint8_t;
    using :: uint16_t;
    using :: uint32_t;
    using :: uint64_t;

    using :: int_least8_t;
    using :: int_least16_t;
    using :: int_least32_t;
    using :: int_least64_t;
    using :: uint_least8_t;
    using :: uint_least16_t;
    using :: uint_least32_t;
    using :: uint_least64_t;

    using :: int_fast8_t;
    using :: int_fast16_t;
    using :: int_fast32_t;
    using :: int_fast64_t;
    using :: uint_fast8_t;
    using :: uint_fast16_t;
    using :: uint_fast32_t;
    using :: uint_fast64_t;

    using :: intmax_t;
    using :: intptr_t;
    using :: uintmax_t;
    using :: uintptr_t;
} 
#line 89 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstdint"
}



#pragma warning(pop)
#pragma pack(pop)

#line 97 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstdint"
#line 98 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstdint"
#line 12 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"
#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xstddef"





#pragma once




#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstddef"





#pragma once






#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xtr1common"





#pragma once





#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294  4984  )




namespace std {

template <class _Ty, _Ty _Val>
struct integral_constant {
    static constexpr _Ty value = _Val;

    using value_type = _Ty;
    using type       = integral_constant;

    constexpr operator value_type() const noexcept {
        return value;
    }

    [[nodiscard]] constexpr value_type operator()() const noexcept {
        return value;
    }
};


template <bool _Val>
using bool_constant = integral_constant<bool, _Val>;

using true_type  = bool_constant<true>;
using false_type = bool_constant<false>;


template <bool _Test, class _Ty = void>
struct enable_if {}; 

template <class _Ty>
struct enable_if<true, _Ty> { 
    using type = _Ty;
};

template <bool _Test, class _Ty = void>
using enable_if_t = typename enable_if<_Test, _Ty>::type;


template <bool _Test, class _Ty1, class _Ty2>
struct conditional { 
    using type = _Ty1;
};

template <class _Ty1, class _Ty2>
struct conditional<false, _Ty1, _Ty2> {
    using type = _Ty2;
};

template <bool _Test, class _Ty1, class _Ty2>
using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;









template <class, class>
 constexpr bool is_same_v = false; 
template <class _Ty>
 constexpr bool is_same_v<_Ty, _Ty> = true;

template <class _Ty1, class _Ty2>
struct is_same : bool_constant<is_same_v<_Ty1, _Ty2>> {};
#line 86 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xtr1common"


template <class _Ty>
struct remove_const { 
    using type = _Ty;
};

template <class _Ty>
struct remove_const<const _Ty> {
    using type = _Ty;
};

template <class _Ty>
using remove_const_t = typename remove_const<_Ty>::type;


template <class _Ty>
struct remove_volatile { 
    using type = _Ty;
};

template <class _Ty>
struct remove_volatile<volatile _Ty> {
    using type = _Ty;
};

template <class _Ty>
using remove_volatile_t = typename remove_volatile<_Ty>::type;


template <class _Ty>
struct remove_cv { 
    using type = _Ty;

    template <template <class> class _Fn>
    using _Apply = _Fn<_Ty>; 
};

template <class _Ty>
struct remove_cv<const _Ty> {
    using type = _Ty;

    template <template <class> class _Fn>
    using _Apply = const _Fn<_Ty>;
};

template <class _Ty>
struct remove_cv<volatile _Ty> {
    using type = _Ty;

    template <template <class> class _Fn>
    using _Apply = volatile _Fn<_Ty>;
};

template <class _Ty>
struct remove_cv<const volatile _Ty> {
    using type = _Ty;

    template <template <class> class _Fn>
    using _Apply = const volatile _Fn<_Ty>;
};

template <class _Ty>
using remove_cv_t = typename remove_cv<_Ty>::type;


template <bool _First_value, class _First, class... _Rest>
struct _Disjunction { 
    using type = _First;
};

template <class _False, class _Next, class... _Rest>
struct _Disjunction<false, _False, _Next, _Rest...> { 
    using type = typename _Disjunction<_Next::value, _Next, _Rest...>::type;
};

template <class... _Traits>
struct disjunction : false_type {}; 

template <class _First, class... _Rest>
struct disjunction<_First, _Rest...> : _Disjunction<_First::value, _First, _Rest...>::type {
    
};

template <class... _Traits>
 constexpr bool disjunction_v = disjunction<_Traits...>::value;


template <class _Ty, class... _Types>
 constexpr bool _Is_any_of_v = 
    disjunction_v<is_same<_Ty, _Types>...>;






#line 184 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xtr1common"


template <class _Ty>
 constexpr bool is_integral_v = _Is_any_of_v<remove_cv_t<_Ty>, bool, char, signed char, unsigned char,
    wchar_t,



    char16_t, char32_t, short, unsigned short, int, unsigned int, long, unsigned long, long long, unsigned long long>;

template <class _Ty>
struct is_integral : bool_constant<is_integral_v<_Ty>> {};


template <class _Ty>
 constexpr bool is_floating_point_v = _Is_any_of_v<remove_cv_t<_Ty>, float, double, long double>;

template <class _Ty>
struct is_floating_point : bool_constant<is_floating_point_v<_Ty>> {};


template <class _Ty>
 constexpr bool is_arithmetic_v = 
    is_integral_v<_Ty> || is_floating_point_v<_Ty>;

template <class _Ty>
struct is_arithmetic : bool_constant<is_arithmetic_v<_Ty>> {};


template <class _Ty>
struct remove_reference {
    using type                 = _Ty;
    using _Const_thru_ref_type = const _Ty;
};

template <class _Ty>
struct remove_reference<_Ty&> {
    using type                 = _Ty;
    using _Const_thru_ref_type = const _Ty&;
};

template <class _Ty>
struct remove_reference<_Ty&&> {
    using type                 = _Ty;
    using _Const_thru_ref_type = const _Ty&&;
};

template <class _Ty>
using remove_reference_t = typename remove_reference<_Ty>::type;


template <class _Ty>
using _Const_thru_ref = typename remove_reference<_Ty>::_Const_thru_ref_type;

template <class _Ty>
using _Remove_cvref_t = remove_cv_t<remove_reference_t<_Ty>>;









#line 250 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xtr1common"

}


#pragma warning(pop)
#pragma pack(pop)
#line 257 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xtr1common"
#line 258 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xtr1common"
#line 14 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstddef"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294  4984  )




namespace std {
using :: ptrdiff_t;
using :: size_t;
using max_align_t = double; 



































































}

using ::std:: max_align_t; 



#pragma warning(pop)
#pragma pack(pop)

#line 103 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstddef"
#line 104 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstddef"
#line 12 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xstddef"
#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstdlib"





#pragma once





#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\math.h"










#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"







#pragma once





#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {


    
    
    struct _exception
    {
        int    type;   
        char*  name;   
        double arg1;   
        double arg2;   
        double retval; 
    };

    
    
    
        

        struct _complex
        {
            double x, y; 
        };

        


#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"
    #line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"










#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"
    typedef float  float_t;
    typedef double double_t;
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"















    
        extern double const _HUGE;
    

#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"


    
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"


















































































void __cdecl _fperrraise(  int _Except);

   short __cdecl _dclass(  double _X);
   short __cdecl _ldclass(  long double _X);
   short __cdecl _fdclass(  float _X);

   int __cdecl _dsign(  double _X);
   int __cdecl _ldsign(  long double _X);
   int __cdecl _fdsign(  float _X);

   int __cdecl _dpcomp(  double _X,   double _Y);
   int __cdecl _ldpcomp(  long double _X,   long double _Y);
   int __cdecl _fdpcomp(  float _X,   float _Y);

   short __cdecl _dtest(  double* _Px);
   short __cdecl _ldtest(  long double* _Px);
   short __cdecl _fdtest(  float* _Px);

 short __cdecl _d_int(  double* _Px,   short _Xexp);
 short __cdecl _ld_int(  long double* _Px,   short _Xexp);
 short __cdecl _fd_int(  float* _Px,   short _Xexp);

 short __cdecl _dscale(  double* _Px,   long _Lexp);
 short __cdecl _ldscale(  long double* _Px,   long _Lexp);
 short __cdecl _fdscale(  float* _Px,   long _Lexp);

 short __cdecl _dunscale(  short* _Pex,   double* _Px);
 short __cdecl _ldunscale(  short* _Pex,   long double* _Px);
 short __cdecl _fdunscale(  short* _Pex,   float* _Px);

   short __cdecl _dexp(  double* _Px,   double _Y,   long _Eoff);
   short __cdecl _ldexp(  long double* _Px,   long double _Y,   long _Eoff);
   short __cdecl _fdexp(  float* _Px,   float _Y,   long _Eoff);

   short __cdecl _dnorm(  unsigned short* _Ps);
   short __cdecl _fdnorm(  unsigned short* _Ps);

   double __cdecl _dpoly(  double _X,   double const* _Tab,   int _N);
   long double __cdecl _ldpoly(  long double _X,   long double const* _Tab,   int _N);
   float __cdecl _fdpoly(  float _X,   float const* _Tab,   int _N);

   double __cdecl _dlog(  double _X,   int _Baseflag);
   long double __cdecl _ldlog(  long double _X,   int _Baseflag);
   float __cdecl _fdlog(  float _X,   int _Baseflag);

   double __cdecl _dsin(  double _X,   unsigned int _Qoff);
   long double __cdecl _ldsin(  long double _X,   unsigned int _Qoff);
   float __cdecl _fdsin(  float _X,   unsigned int _Qoff);


typedef union
{   
    unsigned short _Sh[4];
    double _Val;
} _double_val;


typedef union
{   
    unsigned short _Sh[2];
    float _Val;
} _float_val;


typedef union
{   
    unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{   
    unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C,  _Inf_C,  _Nan_C,  _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C,  _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double      _Zero_C,  _Xbig_C;
extern const float       _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;




























extern "C++"
{
      inline int fpclassify(  float _X) throw()
    {
        return _fdtest(&_X);
    }

      inline int fpclassify(  double _X) throw()
    {
        return _dtest(&_X);
    }

      inline int fpclassify(  long double _X) throw()
    {
        return _ldtest(&_X);
    }

      inline bool signbit(  float _X) throw()
    {
        return _fdsign(_X) != 0;
    }

      inline bool signbit(  double _X) throw()
    {
        return _dsign(_X) != 0;
    }

      inline bool signbit(  long double _X) throw()
    {
        return _ldsign(_X) != 0;
    }

      inline int _fpcomp(  float _X,   float _Y) throw()
    {
        return _fdpcomp(_X, _Y);
    }

      inline int _fpcomp(  double _X,   double _Y) throw()
    {
        return _dpcomp(_X, _Y);
    }

      inline int _fpcomp(  long double _X,   long double _Y) throw()
    {
        return _ldpcomp(_X, _Y);
    }

    template <class _Trc, class _Tre> struct _Combined_type
    {   
        typedef float _Type;
    };

    template <> struct _Combined_type<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Combined_type<float, long double>
    {   
        typedef long double _Type;
    };

    template <class _Ty, class _T2> struct _Real_widened
    {   
        typedef long double _Type;
    };

    template <> struct _Real_widened<float, float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_widened<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, float>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, double>
    {   
        typedef double _Type;
    };

    template <class _Ty> struct _Real_type
    {   
        typedef double _Type;   
    };

    template <> struct _Real_type<float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_type<long double>
    {   
        typedef long double _Type;
    };

    template <class _T1, class _T2>
      inline int _fpcomp(  _T1 _X,   _T2 _Y) throw()
    {   
        typedef typename _Combined_type<float,
            typename _Real_widened<
            typename _Real_type<_T1>::_Type,
            typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
        return _fpcomp((_Tw)_X, (_Tw)_Y);
    }

    template <class _Ty>
      inline bool isfinite(  _Ty _X) throw()
    {
        return fpclassify(_X) <= 0;
    }

    template <class _Ty>
      inline bool isinf(  _Ty _X) throw()
    {
        return fpclassify(_X) == 1;
    }

    template <class _Ty>
      inline bool isnan(  _Ty _X) throw()
    {
        return fpclassify(_X) == 2;
    }

    template <class _Ty>
      inline bool isnormal(  _Ty _X) throw()
    {
        return fpclassify(_X) == (-1);
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 4) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreaterequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (2 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isless(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 1) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 2)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isunordered(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return _fpcomp(_X, _Y) == 0;
    }
}  
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"





      int       __cdecl abs(  int _X);
      long      __cdecl labs(  long _X);
      long long __cdecl llabs(  long long _X);

      double __cdecl acos(  double _X);
      double __cdecl asin(  double _X);
      double __cdecl atan(  double _X);
      double __cdecl atan2(  double _Y,   double _X);

      double __cdecl cos(  double _X);
      double __cdecl cosh(  double _X);
      double __cdecl exp(  double _X);
       double __cdecl fabs(  double _X);
      double __cdecl fmod(  double _X,   double _Y);
      double __cdecl log(  double _X);
      double __cdecl log10(  double _X);
      double __cdecl pow(  double _X,   double _Y);
      double __cdecl sin(  double _X);
      double __cdecl sinh(  double _X);
       double __cdecl sqrt(  double _X);
      double __cdecl tan(  double _X);
      double __cdecl tanh(  double _X);

       double    __cdecl acosh(  double _X);
       double    __cdecl asinh(  double _X);
       double    __cdecl atanh(  double _X);
        double    __cdecl atof(  char const* _String);
        double    __cdecl _atof_l(  char const* _String,   _locale_t _Locale);
       double    __cdecl _cabs(  struct _complex _Complex_value);
       double    __cdecl cbrt(  double _X);
       double    __cdecl ceil(  double _X);
       double    __cdecl _chgsign(  double _X);
       double    __cdecl copysign(  double _Number,   double _Sign);
       double    __cdecl _copysign(  double _Number,   double _Sign);
       double    __cdecl erf(  double _X);
       double    __cdecl erfc(  double _X);
       double    __cdecl exp2(  double _X);
       double    __cdecl expm1(  double _X);
       double    __cdecl fdim(  double _X,   double _Y);
       double    __cdecl floor(  double _X);
       double    __cdecl fma(  double _X,   double _Y,   double _Z);
       double    __cdecl fmax(  double _X,   double _Y);
       double    __cdecl fmin(  double _X,   double _Y);
       double    __cdecl frexp(  double _X,   int* _Y);
       double    __cdecl hypot(  double _X,   double _Y);
       double    __cdecl _hypot(  double _X,   double _Y);
       int       __cdecl ilogb(  double _X);
       double    __cdecl ldexp(  double _X,   int _Y);
       double    __cdecl lgamma(  double _X);
       long long __cdecl llrint(  double _X);
       long long __cdecl llround(  double _X);
       double    __cdecl log1p(  double _X);
       double    __cdecl log2(  double _X);
       double    __cdecl logb(  double _X);
       long      __cdecl lrint(  double _X);
       long      __cdecl lround(  double _X);

    int __cdecl _matherr(  struct _exception* _Except);

       double __cdecl modf(  double _X,   double* _Y);
       double __cdecl nan(  char const* _X);
       double __cdecl nearbyint(  double _X);
       double __cdecl nextafter(  double _X,   double _Y);
       double __cdecl nexttoward(  double _X,   long double _Y);
       double __cdecl remainder(  double _X,   double _Y);
       double __cdecl remquo(  double _X,   double _Y,   int* _Z);
       double __cdecl rint(  double _X);
       double __cdecl round(  double _X);
       double __cdecl scalbln(  double _X,   long _Y);
       double __cdecl scalbn(  double _X,   int _Y);
       double __cdecl tgamma(  double _X);
       double __cdecl trunc(  double _X);
       double __cdecl _j0(  double _X );
       double __cdecl _j1(  double _X );
       double __cdecl _jn(int _X,   double _Y);
       double __cdecl _y0(  double _X);
       double __cdecl _y1(  double _X);
       double __cdecl _yn(  int _X,   double _Y);

       float     __cdecl acoshf(  float _X);
       float     __cdecl asinhf(  float _X);
       float     __cdecl atanhf(  float _X);
       float     __cdecl cbrtf(  float _X);
       float     __cdecl _chgsignf(  float _X);
       float     __cdecl copysignf(  float _Number,   float _Sign);
       float     __cdecl _copysignf(  float _Number,   float _Sign);
       float     __cdecl erff(  float _X);
       float     __cdecl erfcf(  float _X);
       float     __cdecl expm1f(  float _X);
       float     __cdecl exp2f(  float _X);
       float     __cdecl fdimf(  float _X,   float _Y);
       float     __cdecl fmaf(  float _X,   float _Y,   float _Z);
       float     __cdecl fmaxf(  float _X,   float _Y);
       float     __cdecl fminf(  float _X,   float _Y);
       float     __cdecl _hypotf(  float _X,   float _Y);
       int       __cdecl ilogbf(  float _X);
       float     __cdecl lgammaf(  float _X);
       long long __cdecl llrintf(  float _X);
       long long __cdecl llroundf(  float _X);
       float     __cdecl log1pf(  float _X);
       float     __cdecl log2f(  float _X);
       float     __cdecl logbf(  float _X);
       long      __cdecl lrintf(  float _X);
       long      __cdecl lroundf(  float _X);
       float     __cdecl nanf(  char const* _X);
       float     __cdecl nearbyintf(  float _X);
       float     __cdecl nextafterf(  float _X,   float _Y);
       float     __cdecl nexttowardf(  float _X,   long double _Y);
       float     __cdecl remainderf(  float _X,   float _Y);
       float     __cdecl remquof(  float _X,   float _Y,   int* _Z);
       float     __cdecl rintf(  float _X);
       float     __cdecl roundf(  float _X);
       float     __cdecl scalblnf(  float _X,   long _Y);
       float     __cdecl scalbnf(  float _X,   int _Y);
       float     __cdecl tgammaf(  float _X);
       float     __cdecl truncf(  float _X);

    

           int  __cdecl _set_SSE2_enable(  int _Flag);

    #line 586 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"

    










#line 599 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"




#line 604 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"



    










#line 619 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"

          __inline float __cdecl acosf(  float _X)
        {
            return (float)acos(_X);
        }

          __inline float __cdecl asinf(  float _X)
        {
            return (float)asin(_X);
        }

          __inline float __cdecl atan2f(  float _Y,   float _X)
        {
            return (float)atan2(_Y, _X);
        }

          __inline float __cdecl atanf(  float _X)
        {
            return (float)atan(_X);
        }

          __inline float __cdecl ceilf(  float _X)
        {
            return (float)ceil(_X);
        }

          __inline float __cdecl cosf(  float _X)
        {
            return (float)cos(_X);
        }

          __inline float __cdecl coshf(  float _X)
        {
            return (float)cosh(_X);
        }

          __inline float __cdecl expf(  float _X)
        {
            return (float)exp(_X);
        }

    #line 661 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"

    



#line 667 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"

          __inline float __cdecl fabsf(  float _X)
        {
            return (float)fabs(_X);
        }

    #line 674 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"

    




#line 681 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"

          __inline float __cdecl floorf(  float _X)
        {
            return (float)floor(_X);
        }

          __inline float __cdecl fmodf(  float _X,   float _Y)
        {
            return (float)fmod(_X, _Y);
        }

    #line 693 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"

      __inline float __cdecl frexpf(  float _X,   int *_Y)
    {
        return (float)frexp(_X, _Y);
    }

      __inline float __cdecl hypotf(  float _X,   float _Y)
    {
        return _hypotf(_X, _Y);
    }

      __inline float __cdecl ldexpf(  float _X,   int _Y)
    {
        return (float)ldexp(_X, _Y);
    }

    











#line 722 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"

          __inline float __cdecl log10f(  float _X)
        {
            return (float)log10(_X);
        }

          __inline float __cdecl logf(  float _X)
        {
            return (float)log(_X);
        }

          __inline float __cdecl modff(  float _X,   float* _Y)
        {
            double _F, _I;
            _F = modf(_X, &_I);
            *_Y = (float)_I;
            return (float)_F;
        }

          __inline float __cdecl powf(  float _X,   float _Y)
        {
            return (float)pow(_X, _Y);
        }

          __inline float __cdecl sinf(  float _X)
        {
            return (float)sin(_X);
        }

          __inline float __cdecl sinhf(  float _X)
        {
            return (float)sinh(_X);
        }

          __inline float __cdecl sqrtf(  float _X)
        {
            return (float)sqrt(_X);
        }

          __inline float __cdecl tanf(  float _X)
        {
            return (float)tan(_X);
        }

          __inline float __cdecl tanhf(  float _X)
        {
            return (float)tanh(_X);
        }

    #line 772 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"

       long double __cdecl acoshl(  long double _X);

      __inline long double __cdecl acosl(  long double _X)
    {
        return acos((double)_X);
    }

       long double __cdecl asinhl(  long double _X);

      __inline long double __cdecl asinl(  long double _X)
    {
        return asin((double)_X);
    }

      __inline long double __cdecl atan2l(  long double _Y,   long double _X)
    {
        return atan2((double)_Y, (double)_X);
    }

       long double __cdecl atanhl(  long double _X);

      __inline long double __cdecl atanl(  long double _X)
    {
        return atan((double)_X);
    }

       long double __cdecl cbrtl(  long double _X);

      __inline long double __cdecl ceill(  long double _X)
    {
        return ceil((double)_X);
    }

      __inline long double __cdecl _chgsignl(  long double _X)
    {
        return _chgsign((double)_X);
    }

       long double __cdecl copysignl(  long double _Number,   long double _Sign);

      __inline long double __cdecl _copysignl(  long double _Number,   long double _Sign)
    {
        return _copysign((double)_Number, (double)_Sign);
    }

      __inline long double __cdecl coshl(  long double _X)
    {
        return cosh((double)_X);
    }

      __inline long double __cdecl cosl(  long double _X)
    {
        return cos((double)_X);
    }

       long double __cdecl erfl(  long double _X);
       long double __cdecl erfcl(  long double _X);

      __inline long double __cdecl expl(  long double _X)
    {
        return exp((double)_X);
    }

       long double __cdecl exp2l(  long double _X);
       long double __cdecl expm1l(  long double _X);

      __inline long double __cdecl fabsl(  long double _X)
    {
        return fabs((double)_X);
    }

       long double __cdecl fdiml(  long double _X,   long double _Y);

      __inline long double __cdecl floorl(  long double _X)
    {
        return floor((double)_X);
    }

       long double __cdecl fmal(  long double _X,   long double _Y,   long double _Z);
       long double __cdecl fmaxl(  long double _X,   long double _Y);
       long double __cdecl fminl(  long double _X,   long double _Y);

      __inline long double __cdecl fmodl(  long double _X,   long double _Y)
    {
        return fmod((double)_X, (double)_Y);
    }

      __inline long double __cdecl frexpl(  long double _X,   int *_Y)
    {
        return frexp((double)_X, _Y);
    }

       int __cdecl ilogbl(  long double _X);

      __inline long double __cdecl _hypotl(  long double _X,   long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

      __inline long double __cdecl hypotl(  long double _X,   long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

      __inline long double __cdecl ldexpl(  long double _X,   int _Y)
    {
        return ldexp((double)_X, _Y);
    }

       long double __cdecl lgammal(  long double _X);
       long long __cdecl llrintl(  long double _X);
       long long __cdecl llroundl(  long double _X);

      __inline long double __cdecl logl(  long double _X)
    {
        return log((double)_X);
    }

      __inline long double __cdecl log10l(  long double _X)
    {
        return log10((double)_X);
    }

       long double __cdecl log1pl(  long double _X);
       long double __cdecl log2l(  long double _X);
       long double __cdecl logbl(  long double _X);
       long __cdecl lrintl(  long double _X);
       long __cdecl lroundl(  long double _X);

      __inline long double __cdecl modfl(  long double _X,   long double* _Y)
    {
        double _F, _I;
        _F = modf((double)_X, &_I);
        *_Y = _I;
        return _F;
    }

       long double __cdecl nanl(  char const* _X);
       long double __cdecl nearbyintl(  long double _X);
       long double __cdecl nextafterl(  long double _X,   long double _Y);
       long double __cdecl nexttowardl(  long double _X,   long double _Y);

      __inline long double __cdecl powl(  long double _X,   long double _Y)
    {
        return pow((double)_X, (double)_Y);
    }

       long double __cdecl remainderl(  long double _X,   long double _Y);
       long double __cdecl remquol(  long double _X,   long double _Y,   int* _Z);
       long double __cdecl rintl(  long double _X);
       long double __cdecl roundl(  long double _X);
       long double __cdecl scalblnl(  long double _X,   long _Y);
       long double __cdecl scalbnl(  long double _X,   int _Y);

      __inline long double __cdecl sinhl(  long double _X)
    {
        return sinh((double)_X);
    }

      __inline long double __cdecl sinl(  long double _X)
    {
        return sin((double)_X);
    }

      __inline long double __cdecl sqrtl(  long double _X)
    {
        return sqrt((double)_X);
    }

      __inline long double __cdecl tanhl(  long double _X)
    {
        return tanh((double)_X);
    }

      __inline long double __cdecl tanl(  long double _X)
    {
        return tan((double)_X);
    }

       long double __cdecl tgammal(  long double _X);
       long double __cdecl truncl(  long double _X);

    



#line 960 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"



    
    
    
    
    
    

    

    
        
            extern double HUGE;
        

#line 978 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"

            double __cdecl j0(  double _X);
            double __cdecl j1(  double _X);
            double __cdecl jn(  int _X,   double _Y);
            double __cdecl y0(  double _X);
            double __cdecl y1(  double _X);
            double __cdecl yn(  int _X,   double _Y);
    #line 986 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"

#line 988 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"

} __pragma(pack(pop))

#pragma warning(pop) 
#line 993 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_math.h"
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\math.h"




#line 13 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstdlib"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_malloc.h"








#pragma once



#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {





































#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_malloc.h"

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _calloc_base(
      size_t _Count,
      size_t _Size
    );

     
  __declspec(allocator) __declspec(restrict) 
void* __cdecl calloc(
       size_t _Count,
       size_t _Size
    );

 
 int __cdecl _callnewh(
      size_t _Size
    );

     
 __declspec(allocator) 
void* __cdecl _expand(
                void*  _Block,
       size_t _Size
    );


void __cdecl _free_base(
        void* _Block
    );

 
void __cdecl free(
        void* _Block
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _malloc_base(
      size_t _Size
    );

     
 __declspec(allocator)  __declspec(restrict) 
void* __cdecl malloc(
       size_t _Size
    );

 

size_t __cdecl _msize_base(
      void* _Block
    );

 
 
size_t __cdecl _msize(
      void* _Block
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _realloc_base(
         void*  _Block,
                                 size_t _Size
    );

       
 __declspec(allocator) __declspec(restrict) 
void* __cdecl realloc(
        void*  _Block,
              size_t _Size
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc_base(
        void*  _Block,
                                size_t _Count,
                                size_t _Size
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size
    );


void __cdecl _aligned_free(
        void* _Block
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_malloc(
       size_t _Size,
                         size_t _Alignment
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
       size_t _Size,
                         size_t _Alignment,
                         size_t _Offset
    );

 

size_t __cdecl _aligned_msize(
      void*  _Block,
               size_t _Alignment,
               size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment
    );


















#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_malloc.h"



} __pragma(pack(pop))

#pragma warning(pop) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_search.h"










#pragma once




#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {


    typedef int (__cdecl* _CoreCrtSecureSearchSortCompareFunction)(void*, void const*, void const*);
    typedef int (__cdecl* _CoreCrtNonSecureSearchSortCompareFunction)(void const*, void const*);




     
     void* __cdecl bsearch_s(
                                                        void const* _Key,
          void const* _Base,
                                                        rsize_t     _NumOfElements,
                                                        rsize_t     _SizeOfElements,
                            _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                    void*       _Context
        );

     void __cdecl qsort_s(
          void*   _Base,
                                                             rsize_t _NumOfElements,
                                                             rsize_t _SizeOfElements,
                             _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                         void*   _Context
        );

#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_search.h"



 
 void* __cdecl bsearch(
                                                    void const* _Key,
      void const* _Base,
                                                    size_t      _NumOfElements,
                                                    size_t      _SizeOfElements,
                     _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

 void __cdecl qsort(
      void*  _Base,
                                                         size_t _NumOfElements,
                                                         size_t _SizeOfElements,
                     _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

 
 void* __cdecl _lfind_s(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       size_t        _SizeOfElements,
                             _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                       void*         _Context
    );

 
 void* __cdecl _lfind(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       unsigned int  _SizeOfElements,
                          _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

 
 void* __cdecl _lsearch_s(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             size_t        _SizeOfElements,
                                   _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                             void*         _Context
    );

 
 void* __cdecl _lsearch(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             unsigned int  _SizeOfElements,
                                _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );




















































































#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_search.h"





      
     void* __cdecl lfind(
                                                           void const*   _Key,
          void const*   _Base,
                                                        unsigned int* _NumOfElements,
                                                           unsigned int  _SizeOfElements,
                              _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );

      
     void* __cdecl lsearch(
                                                                void const*   _Key,
          void*         _Base,
                                                             unsigned int* _NumOfElements,
                                                                unsigned int  _SizeOfElements,
                                   _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );

#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_search.h"



} __pragma(pack(pop))

#pragma warning(pop) 
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdlib.h"








#pragma once



#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {


































     
    
     errno_t __cdecl _itow_s(
                                  int      _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(  int _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdlib.h"

      wchar_t* __cdecl _itow( int _Value,   wchar_t *_Buffer,  int _Radix);
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdlib.h"

     
    
     errno_t __cdecl _ltow_s(
                                  long     _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(  long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdlib.h"

      wchar_t* __cdecl _ltow( long _Value,   wchar_t *_Buffer,  int _Radix);
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdlib.h"

    
     errno_t __cdecl _ultow_s(
                                  unsigned long _Value,
          wchar_t*      _Buffer,
                                  size_t        _BufferCount,
                                  int           _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(  unsigned long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }
#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdlib.h"

      wchar_t* __cdecl _ultow( unsigned long _Value,   wchar_t *_Buffer,  int _Radix);
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdlib.h"

     
     double __cdecl wcstod(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
     double __cdecl _wcstod_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
     long __cdecl wcstol(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     long __cdecl _wcstol_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     long long __cdecl wcstoll(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     long long __cdecl _wcstoll_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     unsigned long __cdecl wcstoul(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     unsigned long __cdecl _wcstoul_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     unsigned long long __cdecl wcstoull(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     unsigned long long __cdecl _wcstoull_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     long double __cdecl wcstold(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
     long double __cdecl _wcstold_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
     float __cdecl wcstof(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
     float __cdecl _wcstof_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
     double __cdecl _wtof(
          wchar_t const* _String
        );

     
     double __cdecl _wtof_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
     int __cdecl _wtoi(
          wchar_t const* _String
        );

     
     int __cdecl _wtoi_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
     long __cdecl _wtol(
          wchar_t const* _String
        );

     
     long __cdecl _wtol_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
     long long __cdecl _wtoll(
          wchar_t const* _String
        );

     
     long long __cdecl _wtoll_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

    
     errno_t __cdecl _i64tow_s(
                                  __int64  _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    
     wchar_t* __cdecl _i64tow(
                            __int64  _Value,
            wchar_t* _Buffer,
                            int      _Radix
        );

    
     errno_t __cdecl _ui64tow_s(
                                  unsigned __int64 _Value,
          wchar_t*         _Buffer,
                                  size_t           _BufferCount,
                                  int              _Radix
        );

    
     wchar_t* __cdecl _ui64tow(
                            unsigned __int64 _Value,
            wchar_t*         _Buffer,
                            int              _Radix
        );

     
     __int64 __cdecl _wtoi64(
          wchar_t const* _String
        );

     
     __int64 __cdecl _wtoi64_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
     __int64 __cdecl _wcstoi64(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     __int64 __cdecl _wcstoi64_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     unsigned __int64 __cdecl _wcstoui64(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     unsigned __int64 __cdecl _wcstoui64_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

    
    

     
     
     __declspec(allocator) wchar_t* __cdecl _wfullpath(
          wchar_t*       _Buffer,
                                    wchar_t const* _Path,
                                      size_t         _BufferCount
        );

    

    
     errno_t __cdecl _wmakepath_s(
          wchar_t*       _Buffer,
                                  size_t         _BufferCount,
                            wchar_t const* _Drive,
                            wchar_t const* _Dir,
                            wchar_t const* _Filename,
                            wchar_t const* _Ext
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _Drive,   wchar_t const* _Dir,   wchar_t const* _Filename,   wchar_t const* _Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdlib.h"

  void __cdecl _wmakepath(  wchar_t *_Buffer,  wchar_t const* _Drive,  wchar_t const* _Dir,  wchar_t const* _Filename,  wchar_t const* _Ext);
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdlib.h"

     void __cdecl _wperror(
          wchar_t const* _ErrorMessage
        );

    
     void __cdecl _wsplitpath(
                            wchar_t const* _FullPath,
            wchar_t*       _Drive,
            wchar_t*       _Dir,
            wchar_t*       _Filename,
            wchar_t*       _Ext
        );

     errno_t __cdecl _wsplitpath_s(
                                      wchar_t const* _FullPath,
             wchar_t*       _Drive,
                                        size_t         _DriveCount,
               wchar_t*       _Dir,
                                        size_t         _DirCount,
          wchar_t*       _Filename,
                                        size_t         _FilenameCount,
               wchar_t*       _Ext,
                                        size_t         _ExtCount
        );

    extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s(   wchar_t const* _Path,   wchar_t (&_Drive)[_DriveSize],   wchar_t (&_Dir)[_DirSize],   wchar_t (&_Name)[_NameSize],   wchar_t (&_Ext)[_ExtSize] ) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdlib.h"

        
        

        
         errno_t __cdecl _wdupenv_s(
                wchar_t**      _Buffer,
                                                                                size_t*        _BufferCount,
                                                                                   wchar_t const* _VarName
            );

        

          
         wchar_t* __cdecl _wgetenv(
              wchar_t const* _VarName
            );

         
        
         errno_t __cdecl _wgetenv_s(
                                         size_t*        _RequiredCount,
              wchar_t*       _Buffer,
                                          size_t         _BufferCount,
                                        wchar_t const* _VarName
            );

        extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wgetenv_s(  size_t* _RequiredCount, wchar_t (&_Buffer)[_Size],   wchar_t const* _VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdlib.h"

         
         int __cdecl _wputenv(
              wchar_t const* _EnvString
            );

        
         errno_t __cdecl _wputenv_s(
              wchar_t const* _Name,
              wchar_t const* _Value
            );

         errno_t __cdecl _wsearchenv_s(
                                    wchar_t const* _Filename,
                                    wchar_t const* _VarName,
              wchar_t*       _Buffer,
                                      size_t         _BufferCount
            );

        extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(  wchar_t const* _Filename,   wchar_t const* _VarName, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }
#line 463 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdlib.h"

          void __cdecl _wsearchenv( wchar_t const* _Filename,  wchar_t const* _VarName,   wchar_t *_ResultPath);
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdlib.h"

         int __cdecl _wsystem(
              wchar_t const* _Command
            );

#line 476 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdlib.h"



} __pragma(pack(pop))

#pragma warning(pop) 
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"


#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {




    
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"









 void __cdecl _swab(
        char* _Buf1,
        char* _Buf2,
                                                                  int   _SizeInBytes
    );













     __declspec(noreturn) void __cdecl exit(  int _Code);
     __declspec(noreturn) void __cdecl _exit(  int _Code);
     __declspec(noreturn) void __cdecl _Exit(  int _Code);
     __declspec(noreturn) void __cdecl quick_exit(  int _Code);
     __declspec(noreturn) void __cdecl abort(void);
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"





 unsigned int __cdecl _set_abort_behavior(
      unsigned int _Flags,
      unsigned int _Mask
    );




    

    typedef int (__cdecl* _onexit_t)(void);
    


#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"


    
    
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

























































    int       __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit(  _onexit_t _Func);
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

int __cdecl at_quick_exit(void (__cdecl*)(void));









    
    typedef void (__cdecl* _purecall_handler)(void);

    
    typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*,
        unsigned int,
        uintptr_t
        );

    
     _purecall_handler __cdecl _set_purecall_handler(
          _purecall_handler _Handler
        );

     _purecall_handler __cdecl _get_purecall_handler(void);

    
     _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

     _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

     _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

     _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"












#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"









  int __cdecl _set_error_mode(  int _Mode);




     int* __cdecl _errno(void);
    

     errno_t __cdecl _set_errno(  int _Value);
     errno_t __cdecl _get_errno(  int* _Value);

     unsigned long* __cdecl __doserrno(void);
    

     errno_t __cdecl _set_doserrno(  unsigned long _Value);
     errno_t __cdecl _get_doserrno(  unsigned long * _Value);

    
      char** __cdecl __sys_errlist(void);
    

      int * __cdecl __sys_nerr(void);
    

     void __cdecl perror(  char const* _ErrMsg);
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"




  char**    __cdecl __p__pgmptr (void);
  wchar_t** __cdecl __p__wpgmptr(void);
  int*      __cdecl __p__fmode  (void);








    
    
    
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

 
 errno_t __cdecl _get_pgmptr (  char**    _Value);

 
 errno_t __cdecl _get_wpgmptr(  wchar_t** _Value);

 errno_t __cdecl _set_fmode  (               int       _Mode );

 errno_t __cdecl _get_fmode  (              int*      _PMode);








typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

  int       __cdecl abs   (  int       _Number);
  long      __cdecl labs  (  long      _Number);
  long long __cdecl llabs (  long long _Number);
  __int64   __cdecl _abs64(  __int64   _Number);

  unsigned short   __cdecl _byteswap_ushort(  unsigned short   _Number);
  unsigned long    __cdecl _byteswap_ulong (  unsigned long    _Number);
  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 _Number);

   div_t   __cdecl div  (  int       _Numerator,   int       _Denominator);
   ldiv_t  __cdecl ldiv (  long      _Numerator,   long      _Denominator);
   lldiv_t __cdecl lldiv(  long long _Numerator,   long long _Denominator);



#pragma warning(push)
#pragma warning(disable: 6540)

unsigned int __cdecl _rotl(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotl(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotl64(
      unsigned __int64 _Value,
      int              _Shift
    );

unsigned int __cdecl _rotr(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotr(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotr64(
      unsigned __int64 _Value,
      int              _Shift
    );

#pragma warning(pop)






 void __cdecl srand(  unsigned int _Seed);

   int __cdecl rand(void);



#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"




extern "C++"
{
    inline long abs(long const _X) throw()
    {
        return labs(_X);
    }

    inline long long abs(long long const _X) throw()
    {
        return llabs(_X);
    }

    inline ldiv_t div(long const _A1, long const _A2) throw()
    {
        return ldiv(_A1, _A2);
    }

    inline lldiv_t div(long long const _A1, long long const _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}
#line 384 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"










    #pragma pack(push, 4)
    typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;
    #pragma pack(pop)

    











#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;





typedef struct
{
    long double x;
} _LONGDOUBLE;



#pragma pack(push, 4)
typedef struct
{
    unsigned char ld12[12];
} _LDBL12;
#pragma pack(pop)








                      double    __cdecl atof   (  char const* _String);
    int       __cdecl atoi   (  char const* _String);
                      long      __cdecl atol   (  char const* _String);
                      long long __cdecl atoll  (  char const* _String);
                      __int64   __cdecl _atoi64(  char const* _String);

   double    __cdecl _atof_l  (  char const* _String,   _locale_t _Locale);
   int       __cdecl _atoi_l  (  char const* _String,   _locale_t _Locale);
   long      __cdecl _atol_l  (  char const* _String,   _locale_t _Locale);
   long long __cdecl _atoll_l (  char const* _String,   _locale_t _Locale);
   __int64   __cdecl _atoi64_l(  char const* _String,   _locale_t _Locale);

   int __cdecl _atoflt (  _CRT_FLOAT*  _Result,   char const* _String);
   int __cdecl _atodbl (  _CRT_DOUBLE* _Result,   char*       _String);
   int __cdecl _atoldbl(  _LDOUBLE*    _Result,   char*       _String);

 
 int __cdecl _atoflt_l(
         _CRT_FLOAT* _Result,
        char const* _String,
      _locale_t   _Locale
    );

 
 int __cdecl _atodbl_l(
         _CRT_DOUBLE* _Result,
        char*        _String,
      _locale_t    _Locale
    );


 
 int __cdecl _atoldbl_l(
         _LDOUBLE* _Result,
        char*     _String,
      _locale_t _Locale
    );

 
 float __cdecl strtof(
                        char const* _String,
        char**      _EndPtr
    );

 
 float __cdecl _strtof_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
 double __cdecl strtod(
                        char const* _String,
        char**      _EndPtr
    );

 
 double __cdecl _strtod_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
 long double __cdecl strtold(
                        char const* _String,
        char**      _EndPtr
    );

 
 long double __cdecl _strtold_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
 long __cdecl strtol(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 long __cdecl _strtol_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 long long __cdecl strtoll(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 long long __cdecl _strtoll_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 unsigned long __cdecl strtoul(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 unsigned long __cdecl _strtoul_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 unsigned long long __cdecl strtoull(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 unsigned long long __cdecl _strtoull_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 __int64 __cdecl _strtoi64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 __int64 __cdecl _strtoi64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 unsigned __int64 __cdecl _strtoui64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 unsigned __int64 __cdecl _strtoui64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );








 

 errno_t __cdecl _itoa_s(
                              int    _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _itoa_s(  int _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

  char* __cdecl _itoa( int _Value,   char *_Buffer,  int _Radix);
#line 647 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

 

 errno_t __cdecl _ltoa_s(
                              long   _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(  long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 663 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

  char* __cdecl _ltoa( long _Value,   char *_Buffer,  int _Radix);
#line 670 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

 

 errno_t __cdecl _ultoa_s(
                              unsigned long _Value,
      char*         _Buffer,
                              size_t        _BufferCount,
                              int           _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(  unsigned long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 686 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

  char* __cdecl _ultoa( unsigned long _Value,   char *_Buffer,  int _Radix);
#line 693 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

 

 errno_t __cdecl _i64toa_s(
                              __int64 _Value,
      char*   _Buffer,
                              size_t  _BufferCount,
                              int     _Radix
    );

 

 char* __cdecl _i64toa(
                        __int64 _Value,
        char*   _Buffer,
                        int     _Radix
    );

 

 errno_t __cdecl _ui64toa_s(
                              unsigned __int64 _Value,
      char*            _Buffer,
                              size_t           _BufferCount,
                              int              _Radix
    );


 char* __cdecl _ui64toa(
                        unsigned __int64 _Value,
        char*            _Buffer,
                        int              _Radix
    );













 

 errno_t __cdecl _ecvt_s(
      char* _Buffer,
       size_t                       _BufferCount,
       double                       _Value,
       int                          _DigitCount,
      int*                         _PtDec,
      int*                         _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount,   int* _PtDec,   int* _PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
#line 758 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

  
 char* __cdecl _ecvt(
       double _Value,
       int    _DigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 

 errno_t __cdecl _fcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _FractionalDigitCount,
                             int*   _PtDec,
                             int*   _PtSign
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size],   double _Value,   int _FractionalDigitCount,   int* _PtDec,   int* _PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
#line 787 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

 
  
 char* __cdecl _fcvt(
       double _Value,
       int    _FractionalDigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 
 errno_t __cdecl _gcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _DigitCount
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }
#line 812 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"


 char* __cdecl _gcvt(
                        double _Value,
                        int    _DigitCount,
        char*  _Buffer
    );











    

#line 833 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"
        
    #line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

    


        
    #line 841 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

     
     int __cdecl ___mb_cur_max_func(void);

     
     int __cdecl ___mb_cur_max_l_func(_locale_t _Locale);
#line 848 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"



 
 int __cdecl mblen(
        char const* _Ch,
                                             size_t      _MaxCount
    );

 
 int __cdecl _mblen_l(
        char const* _Ch,
                                             size_t      _MaxCount,
                                         _locale_t   _Locale
    );

 
 
 size_t __cdecl _mbstrlen(
      char const* _String
    );

 
 
 size_t __cdecl _mbstrlen_l(
        char const* _String,
      _locale_t   _Locale
    );

 
 
 size_t __cdecl _mbstrnlen(
      char const* _String,
        size_t      _MaxCount
    );

 
 
 size_t __cdecl _mbstrnlen_l(
        char const* _String,
          size_t      _MaxCount,
      _locale_t   _Locale
    );

 
 int __cdecl mbtowc(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes
    );

 
 int __cdecl _mbtowc_l(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes,
                                  _locale_t   _Locale
    );


 errno_t __cdecl mbstowcs_s(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

  size_t __cdecl mbstowcs( wchar_t *_Dest,  char const* _Source,  size_t _MaxCount);
#line 930 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"


 errno_t __cdecl _mbstowcs_s_l(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount,
                                                       _locale_t   _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 949 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

  size_t __cdecl _mbstowcs_l(  wchar_t *_Dest,   char const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 958 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"





 int __cdecl wctomb(
      char*   _MbCh,
                                wchar_t _WCh
    );


 int __cdecl _wctomb_l(
        char*     _MbCh,
                          wchar_t   _WCh,
                      _locale_t _Locale
    );



    
     errno_t __cdecl wctomb_s(
                                                         int*    _SizeConverted,
          char*   _MbCh,
                                                              rsize_t _SizeInBytes,
                                                              wchar_t _WCh
        );

#line 986 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"


 errno_t __cdecl _wctomb_s_l(
                             int*     _SizeConverted,
      char*     _MbCh,
                                  size_t    _SizeInBytes,
                                  wchar_t   _WCh,
                              _locale_t _Locale);


 errno_t __cdecl wcstombs_s(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 1011 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

  size_t __cdecl wcstombs( char *_Dest,  wchar_t const* _Source,  size_t _MaxCount);
#line 1018 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"


 errno_t __cdecl _wcstombs_s_l(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes,
                                                                _locale_t      _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 1037 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

  size_t __cdecl _wcstombs_l(  char *_Dest,   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 1046 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"




















 
 
 __declspec(allocator) char* __cdecl _fullpath(
      char*       _Buffer,
                                char const* _Path,
                                  size_t      _BufferCount
    );




 errno_t __cdecl _makepath_s(
      char*       _Buffer,
                              size_t      _BufferCount,
                        char const* _Drive,
                        char const* _Dir,
                        char const* _Filename,
                        char const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Buffer)[_Size],   char const* _Drive,   char const* _Dir,   char const* _Filename,   char const* _Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 1094 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

  void __cdecl _makepath(  char *_Buffer,  char const* _Drive,  char const* _Dir,  char const* _Filename,  char const* _Ext);
#line 1103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"


 void __cdecl _splitpath(
                        char const* _FullPath,
        char*       _Drive,
        char*       _Dir,
        char*       _Filename,
        char*       _Ext
    );


 errno_t __cdecl _splitpath_s(
                                  char const* _FullPath,
         char*       _Drive,
                                    size_t      _DriveCount,
           char*       _Dir,
                                    size_t      _DirCount,
      char*       _Filename,
                                    size_t      _FilenameCount,
           char*       _Ext,
                                    size_t      _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s(   char const* _Dest,   char (&_Drive)[_DriveSize],   char (&_Dir)[_DirSize],   char (&_Name)[_NameSize],   char (&_Ext)[_ExtSize] ) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }




 
 errno_t __cdecl getenv_s(
                                 size_t*     _RequiredCount,
      char*       _Buffer,
                                  rsize_t     _BufferCount,
                                char const* _VarName
    );

#line 1140 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"




 int*       __cdecl __p___argc (void);
 char***    __cdecl __p___argv (void);
 wchar_t*** __cdecl __p___wargv(void);






    
    
    
#line 1157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

 char***    __cdecl __p__environ (void);
 wchar_t*** __cdecl __p__wenviron(void);


    
#line 1164 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"







    
    
#line 1174 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"









      
     char* __cdecl getenv(
          char const* _VarName
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(  size_t* _RequiredCount, char (&_Buffer)[_Size],   char const* _VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 1194 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

    


#line 1199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

    
     errno_t __cdecl _dupenv_s(
            char**      _Buffer,
                                                                            size_t*     _BufferCount,
                                                                               char const* _VarName
        );

    

#line 1210 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

     int __cdecl system(
          char const* _Command
        );

    
    
    #pragma warning(push)
    #pragma warning(disable: 6540)

     
     int __cdecl _putenv(
          char const* _EnvString
        );

    
     errno_t __cdecl _putenv_s(
          char const* _Name,
          char const* _Value
        );

    #pragma warning(pop)

     errno_t __cdecl _searchenv_s(
                                char const* _Filename,
                                char const* _VarName,
          char*       _Buffer,
                                  size_t      _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(  char const* _Filename,   char const* _VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

      void __cdecl _searchenv( char const* _Filename,  char const* _VarName,   char *_Buffer);
#line 1253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
     void __cdecl _seterrormode(
          int _Mode
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
     void __cdecl _beep(
          unsigned _Frequency,
          unsigned _Duration
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
     void __cdecl _sleep(
          unsigned long _Duration
        );

#line 1272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"









    




    
    

    #pragma warning(push)
    #pragma warning(disable: 4141) 

       
     char* __cdecl ecvt(
           double _Value,
           int    _DigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

       
     char* __cdecl fcvt(
           double _Value,
           int    _FractionalDigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

     
     char* __cdecl gcvt(
                            double _Value,
                            int    _DigitCount,
            char*  _DstBuf
        );

     
     char* __cdecl itoa(
                            int   _Value,
            char* _Buffer,
                            int   _Radix
        );

     
     char* __cdecl ltoa(
                            long  _Value,
            char* _Buffer,
                            int   _Radix
        );


    
     void __cdecl swab(
          char* _Buf1,
          char* _Buf2,
                                     int   _SizeInBytes
        );

     
     char* __cdecl ultoa(
                            unsigned long _Value,
            char*         _Buffer,
                            int           _Radix
        );

    

      
     int __cdecl putenv(
          char const* _EnvString
        );

    #pragma warning(pop)

    _onexit_t __cdecl onexit(  _onexit_t _Func);

#line 1356 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"



} __pragma(pack(pop))

#pragma warning(pop) 
#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdlib.h"
#line 14 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstdlib"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294  4984  )





[[nodiscard]]   inline double abs(  double _Xx) noexcept  {
    return :: fabs(_Xx);
}

[[nodiscard]]   inline float abs(  float _Xx) noexcept  {
    return :: fabsf(_Xx);
}

[[nodiscard]]   inline long double abs(  long double _Xx) noexcept  {
    return :: fabsl(_Xx);
}

namespace std {
using :: size_t;
using :: div_t;
using :: ldiv_t;
using :: abort;
using :: abs;
using :: atexit;
using :: atof;
using :: atoi;
using :: atol;
using :: bsearch;
using :: calloc;
using :: div;
using :: exit;
using :: free;
using :: labs;
using :: ldiv;
using :: malloc;
using :: mblen;
using :: mbstowcs;
using :: mbtowc;
using :: qsort;
using :: rand;
using :: realloc;
using :: srand;
using :: strtod;
using :: strtol;
using :: strtoul;
using :: wcstombs;
using :: wctomb;

using :: lldiv_t;


using :: getenv;
using :: system;
#line 72 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstdlib"

using :: atoll;
using :: llabs;
using :: lldiv;
using :: strtof;
using :: strtold;
using :: strtoll;
using :: strtoull;

using :: _Exit;
using :: at_quick_exit;
using :: quick_exit;
}



#pragma warning(pop)
#pragma pack(pop)

#line 92 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstdlib"
#line 93 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cstdlib"
#line 13 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xstddef"
#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\initializer_list"





#pragma once






#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294  4984  )




namespace std {

template <class _Elem>
class initializer_list {
public:
    using value_type      = _Elem;
    using reference       = const _Elem&;
    using const_reference = const _Elem&;
    using size_type       = size_t;

    using iterator       = const _Elem*;
    using const_iterator = const _Elem*;

    constexpr initializer_list() noexcept : _First(nullptr), _Last(nullptr) {}

    constexpr initializer_list(const _Elem* _First_arg, const _Elem* _Last_arg) noexcept
        : _First(_First_arg), _Last(_Last_arg) {}

    [[nodiscard]] constexpr const _Elem* begin() const noexcept {
        return _First;
    }

    [[nodiscard]] constexpr const _Elem* end() const noexcept {
        return _Last;
    }

    [[nodiscard]] constexpr size_t size() const noexcept {
        return static_cast<size_t>(_Last - _First);
    }

private:
    const _Elem* _First;
    const _Elem* _Last;
};


template <class _Elem>
[[nodiscard]] constexpr const _Elem* begin(initializer_list<_Elem> _Ilist) noexcept {
    return _Ilist.begin();
}


template <class _Elem>
[[nodiscard]] constexpr const _Elem* end(initializer_list<_Elem> _Ilist) noexcept {
    return _Ilist.end();
}
}


#pragma warning(pop)
#pragma pack(pop)
#line 72 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\initializer_list"
#line 73 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\initializer_list"
#line 14 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xstddef"


#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294  4984  )




namespace std {

template <class>

 constexpr bool _Always_false = false;




template <class _Arg, class _Result>
struct unary_function { 
    using argument_type = _Arg;
    using result_type   = _Result;
};


template <class _Arg1, class _Arg2, class _Result>
struct binary_function { 
    using first_argument_type  = _Arg1;
    using second_argument_type = _Arg2;
    using result_type          = _Result;
};
#line 46 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xstddef"


template <class _Ty = void>
struct plus {
     typedef _Ty first_argument_type;
     typedef _Ty second_argument_type;
     typedef _Ty result_type;

    [[nodiscard]] constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left + _Right;
    }
};


template <class _Ty = void>
struct minus {
     typedef _Ty first_argument_type;
     typedef _Ty second_argument_type;
     typedef _Ty result_type;

    [[nodiscard]] constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left - _Right;
    }
};


template <class _Ty = void>
struct multiplies {
     typedef _Ty first_argument_type;
     typedef _Ty second_argument_type;
     typedef _Ty result_type;

    [[nodiscard]] constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left * _Right;
    }
};


template <class _Ty = void>
struct equal_to {
     typedef _Ty first_argument_type;
     typedef _Ty second_argument_type;
     typedef bool result_type;

    [[nodiscard]] constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left == _Right;
    }
};


template <class _Ty = void>
struct not_equal_to {
     typedef _Ty first_argument_type;
     typedef _Ty second_argument_type;
     typedef bool result_type;

    [[nodiscard]] constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left != _Right;
    }
};


template <class _Ty = void>
struct greater {
     typedef _Ty first_argument_type;
     typedef _Ty second_argument_type;
     typedef bool result_type;

    [[nodiscard]] constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left > _Right;
    }
};


template <class _Ty = void>
struct less {
     typedef _Ty first_argument_type;
     typedef _Ty second_argument_type;
     typedef bool result_type;

    [[nodiscard]] constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left < _Right;
    }
};


template <class _Ty = void>
struct greater_equal {
     typedef _Ty first_argument_type;
     typedef _Ty second_argument_type;
     typedef bool result_type;

    [[nodiscard]] constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left >= _Right;
    }
};


template <class _Ty = void>
struct less_equal {
     typedef _Ty first_argument_type;
     typedef _Ty second_argument_type;
     typedef bool result_type;

    [[nodiscard]] constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left <= _Right;
    }
};


template <>
struct plus<void> {
    template <class _Ty1, class _Ty2>
    [[nodiscard]] constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) + static_cast<_Ty2&&>(_Right))) 
        -> decltype(static_cast<_Ty1&&>(_Left) + static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) + static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};


template <>
struct minus<void> {
    template <class _Ty1, class _Ty2>
    [[nodiscard]] constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) - static_cast<_Ty2&&>(_Right))) 
        -> decltype(static_cast<_Ty1&&>(_Left) - static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) - static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};


template <>
struct multiplies<void> {
    template <class _Ty1, class _Ty2>
    [[nodiscard]] constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) * static_cast<_Ty2&&>(_Right))) 
        -> decltype(static_cast<_Ty1&&>(_Left) * static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) * static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};


template <>
struct equal_to<void> {
    template <class _Ty1, class _Ty2>
    [[nodiscard]] constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) == static_cast<_Ty2&&>(_Right))) 
        -> decltype(static_cast<_Ty1&&>(_Left) == static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) == static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};


template <>
struct not_equal_to<void> {
    template <class _Ty1, class _Ty2>
    [[nodiscard]] constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) != static_cast<_Ty2&&>(_Right))) 
        -> decltype(static_cast<_Ty1&&>(_Left) != static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) != static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};


template <>
struct greater<void> {
    template <class _Ty1, class _Ty2>
    [[nodiscard]] constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) > static_cast<_Ty2&&>(_Right))) 
        -> decltype(static_cast<_Ty1&&>(_Left) > static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) > static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};


template <>
struct less<void> {
    template <class _Ty1, class _Ty2>
    [[nodiscard]] constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right))) 
        -> decltype(static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};


template <>
struct greater_equal<void> {
    template <class _Ty1, class _Ty2>
    [[nodiscard]] constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) >= static_cast<_Ty2&&>(_Right))) 
        -> decltype(static_cast<_Ty1&&>(_Left) >= static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) >= static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};


template <>
struct less_equal<void> {
    template <class _Ty1, class _Ty2>
    [[nodiscard]] constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) <= static_cast<_Ty2&&>(_Right))) 
        -> decltype(static_cast<_Ty1&&>(_Left) <= static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) <= static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};


template <class _Ty>
[[nodiscard]] constexpr _Ty* addressof(_Ty& _Val) noexcept {
    return __builtin_addressof(_Val);
}

template <class _Ty>
const _Ty* addressof(const _Ty&&) = delete;


template <class _Ptrty>
[[nodiscard]] constexpr auto _Unfancy(_Ptrty _Ptr) noexcept { 
    return ::std:: addressof(*_Ptr);
}

template <class _Ty>
[[nodiscard]] constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { 
    return _Ptr;
}
}








#line 301 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xstddef"






#line 308 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xstddef"








#line 317 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xstddef"






#line 324 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xstddef"

























#line 350 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xstddef"


























#line 377 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xstddef"









































#line 419 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xstddef"



#pragma warning(pop)
#pragma pack(pop)
#line 425 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xstddef"
#line 426 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\xstddef"
#line 13 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294  4984  )




namespace std {

template <class _Ty, _Ty... _Vals>
struct integer_sequence { 
    static_assert(is_integral_v<_Ty>, "integer_sequence<T, I...> requires T to be an integral type.");

    using value_type = _Ty;

    [[nodiscard]] static constexpr size_t size() noexcept {
        return sizeof...(_Vals);
    }
};


template <class _Ty, _Ty _Size>
using make_integer_sequence = __make_integer_seq<integer_sequence, _Ty, _Size>;

template <size_t... _Vals>
using index_sequence = integer_sequence<size_t, _Vals...>;

template <size_t _Size>
using make_index_sequence = make_integer_sequence<size_t, _Size>;

template <class... _Types>
using index_sequence_for = make_index_sequence<sizeof...(_Types)>;


template <bool _First_value, class _First, class... _Rest>
struct _Conjunction { 
    using type = _First;
};

template <class _True, class _Next, class... _Rest>
struct _Conjunction<true, _True, _Next, _Rest...> { 
    using type = typename _Conjunction<_Next::value, _Next, _Rest...>::type;
};

template <class... _Traits>
struct conjunction : true_type {}; 

template <class _First, class... _Rest>
struct conjunction<_First, _Rest...> : _Conjunction<_First::value, _First, _Rest...>::type {
    
};

template <class... _Traits>
 constexpr bool conjunction_v = conjunction<_Traits...>::value;


template <class _Trait>
struct negation : bool_constant<!static_cast<bool>(_Trait::value)> {}; 

template <class _Trait>
 constexpr bool negation_v = negation<_Trait>::value;


template <class _Ty>
 constexpr bool is_void_v = is_same_v<remove_cv_t<_Ty>, void>;

template <class _Ty>
struct is_void : bool_constant<is_void_v<_Ty>> {};


template <class... _Types>
using void_t = void;



template <class _Ty>
struct add_const { 
    using type = const _Ty;
};

template <class _Ty>
using add_const_t = typename add_const<_Ty>::type;


template <class _Ty>
struct add_volatile { 
    using type = volatile _Ty;
};

template <class _Ty>
using add_volatile_t = typename add_volatile<_Ty>::type;


template <class _Ty>
struct add_cv { 
    using type = const volatile _Ty;
};

template <class _Ty>
using add_cv_t = typename add_cv<_Ty>::type;


template <class _Ty, class = void>
struct _Add_reference { 
    using _Lvalue = _Ty;
    using _Rvalue = _Ty;
};

template <class _Ty>
struct _Add_reference<_Ty, void_t<_Ty&>> { 
    using _Lvalue = _Ty&;
    using _Rvalue = _Ty&&;
};


template <class _Ty>
struct add_lvalue_reference {
    using type = typename _Add_reference<_Ty>::_Lvalue;
};

template <class _Ty>
using add_lvalue_reference_t = typename _Add_reference<_Ty>::_Lvalue;


template <class _Ty>
struct add_rvalue_reference {
    using type = typename _Add_reference<_Ty>::_Rvalue;
};

template <class _Ty>
using add_rvalue_reference_t = typename _Add_reference<_Ty>::_Rvalue;


template <class _Ty>
add_rvalue_reference_t<_Ty> declval() noexcept;


template <class _Ty>
struct remove_extent { 
    using type = _Ty;
};

template <class _Ty, size_t _Ix>
struct remove_extent<_Ty[_Ix]> {
    using type = _Ty;
};

template <class _Ty>
struct remove_extent<_Ty[]> {
    using type = _Ty;
};

template <class _Ty>
using remove_extent_t = typename remove_extent<_Ty>::type;


template <class _Ty>
struct remove_all_extents { 
    using type = _Ty;
};

template <class _Ty, size_t _Ix>
struct remove_all_extents<_Ty[_Ix]> {
    using type = typename remove_all_extents<_Ty>::type;
};

template <class _Ty>
struct remove_all_extents<_Ty[]> {
    using type = typename remove_all_extents<_Ty>::type;
};

template <class _Ty>
using remove_all_extents_t = typename remove_all_extents<_Ty>::type;


template <class _Ty>
struct remove_pointer {
    using type = _Ty;
};

template <class _Ty>
struct remove_pointer<_Ty*> {
    using type = _Ty;
};

template <class _Ty>
struct remove_pointer<_Ty* const> {
    using type = _Ty;
};

template <class _Ty>
struct remove_pointer<_Ty* volatile> {
    using type = _Ty;
};

template <class _Ty>
struct remove_pointer<_Ty* const volatile> {
    using type = _Ty;
};

template <class _Ty>
using remove_pointer_t = typename remove_pointer<_Ty>::type;


template <class _Ty, class = void>
struct _Add_pointer { 
    using type = _Ty;
};

template <class _Ty>
struct _Add_pointer<_Ty, void_t<remove_reference_t<_Ty>*>> { 
    using type = remove_reference_t<_Ty>*;
};

template <class _Ty>
struct add_pointer {
    using type = typename _Add_pointer<_Ty>::type;
};

template <class _Ty>
using add_pointer_t = typename _Add_pointer<_Ty>::type;



template <class>
 constexpr bool is_array_v = false; 

template <class _Ty, size_t _Nx>
 constexpr bool is_array_v<_Ty[_Nx]> = true;

template <class _Ty>
 constexpr bool is_array_v<_Ty[]> = true;

template <class _Ty>
struct is_array : bool_constant<is_array_v<_Ty>> {};





















#line 271 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"


template <class>
 constexpr bool is_lvalue_reference_v = false; 

template <class _Ty>
 constexpr bool is_lvalue_reference_v<_Ty&> = true;

template <class _Ty>
struct is_lvalue_reference : bool_constant<is_lvalue_reference_v<_Ty>> {};


template <class>
 constexpr bool is_rvalue_reference_v = false; 

template <class _Ty>
 constexpr bool is_rvalue_reference_v<_Ty&&> = true;

template <class _Ty>
struct is_rvalue_reference : bool_constant<is_rvalue_reference_v<_Ty>> {};


template <class>
 constexpr bool is_reference_v = false; 

template <class _Ty>
 constexpr bool is_reference_v<_Ty&> = true;

template <class _Ty>
 constexpr bool is_reference_v<_Ty&&> = true;

template <class _Ty>
struct is_reference : bool_constant<is_reference_v<_Ty>> {};


template <class>
 constexpr bool is_pointer_v = false; 

template <class _Ty>
 constexpr bool is_pointer_v<_Ty*> = true;

template <class _Ty>
 constexpr bool is_pointer_v<_Ty* const> = true;

template <class _Ty>
 constexpr bool is_pointer_v<_Ty* volatile> = true;

template <class _Ty>
 constexpr bool is_pointer_v<_Ty* const volatile> = true;

template <class _Ty>
struct is_pointer : bool_constant<is_pointer_v<_Ty>> {};


template <class _Ty>
 constexpr bool is_null_pointer_v =
    is_same_v<remove_cv_t<_Ty>, nullptr_t>; 

template <class _Ty>
struct is_null_pointer : bool_constant<is_null_pointer_v<_Ty>> {};


template <class _Ty>
struct is_union : bool_constant<__is_union(_Ty)> {}; 

template <class _Ty>
 constexpr bool is_union_v = __is_union(_Ty);


template <class _Ty>
struct is_class : bool_constant<__is_class(_Ty)> {}; 

template <class _Ty>
 constexpr bool is_class_v = __is_class(_Ty);


template <class _Ty>
 constexpr bool is_fundamental_v = is_arithmetic_v<_Ty> || is_void_v<_Ty> || is_null_pointer_v<_Ty>;

template <class _Ty>
struct is_fundamental : bool_constant<is_fundamental_v<_Ty>> {}; 


template <class _From, class _To>
struct is_convertible : bool_constant<__is_convertible_to(_From, _To)> {
    
};

template <class _From, class _To>
 constexpr bool is_convertible_v = __is_convertible_to(_From, _To);


template <class _Ty>
struct is_enum : bool_constant<__is_enum(_Ty)> {}; 

template <class _Ty>
 constexpr bool is_enum_v = __is_enum(_Ty);


template <class _Ty>
struct is_compound : bool_constant<!is_fundamental_v<_Ty>> {}; 

template <class _Ty>
 constexpr bool is_compound_v = !is_fundamental_v<_Ty>;


template <class... _Types>
struct _Arg_types {}; 

template <class _Ty1>
struct _Arg_types<_Ty1> {
     typedef _Ty1 argument_type;
};

template <class _Ty1, class _Ty2>
struct _Arg_types<_Ty1, _Ty2> {
     typedef _Ty1 first_argument_type;
     typedef _Ty2 second_argument_type;
};


template <class _Ty>
struct _Is_memfunptr { 
    using _Bool_type = false_type; 
};











template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)   > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; };  template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...)   > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...)   > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...)   > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)   > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const  > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; };  template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const  > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const  > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const  > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const  > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile  > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; };  template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile  > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile  > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile  > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile  > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile  > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; };  template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile  > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile  > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile  > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile  > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  & > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; };  template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...)  & > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...)  & > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...)  & > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  & > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const & > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; };  template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const & > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const & > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const & > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const & > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile & > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; };  template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile & > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile & > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile & > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile & > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile & > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; };  template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile & > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile & > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile & > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile & > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  && > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; };  template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...)  && > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...)  && > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...)  && > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  && > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const && > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; };  template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const && > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const && > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const && > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const && > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile && > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; };  template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile && > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile && > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile && > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile && > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile && > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; };  template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile && > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile && > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile && > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile && > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret(_Types...)>; };












template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) > { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const&> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile&> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile&> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &&> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const&&> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile&&> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile&&> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; };






template <class _Ty>
 constexpr bool is_member_function_pointer_v = _Is_memfunptr<remove_cv_t<_Ty>>::_Bool_type::value;
#line 430 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"

template <class _Ty>
struct is_member_function_pointer : bool_constant<is_member_function_pointer_v<_Ty>> {};


template <class>
 constexpr bool is_const_v = false; 

template <class _Ty>
 constexpr bool is_const_v<const _Ty> = true;

template <class _Ty>
struct is_const : bool_constant<is_const_v<_Ty>> {};


template <class>
 constexpr bool is_volatile_v = false; 

template <class _Ty>
 constexpr bool is_volatile_v<volatile _Ty> = true;

template <class _Ty>
struct is_volatile : bool_constant<is_volatile_v<_Ty>> {};


template <class _Ty>
 constexpr bool is_function_v = 
    !is_const_v<const _Ty> && !is_reference_v<_Ty>;

template <class _Ty>
struct is_function : bool_constant<is_function_v<_Ty>> {};


template <class _Ty>
 constexpr bool is_object_v = 
    is_const_v<const _Ty> && !is_void_v<_Ty>;

template <class _Ty>
struct is_object : bool_constant<is_object_v<_Ty>> {};


template <class>
struct _Is_member_object_pointer {
    static constexpr bool value = false;
};

template <class _Ty1, class _Ty2>
struct _Is_member_object_pointer<_Ty1 _Ty2::*> {
    static constexpr bool value = !is_function_v<_Ty1>;
    using _Class_type           = _Ty2;
};





template <class _Ty>
 constexpr bool is_member_object_pointer_v = _Is_member_object_pointer<remove_cv_t<_Ty>>::value;
#line 489 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"

template <class _Ty>
struct is_member_object_pointer : bool_constant<is_member_object_pointer_v<_Ty>> {};






template <class _Ty>
 constexpr bool is_member_pointer_v = is_member_object_pointer_v<_Ty> || is_member_function_pointer_v<_Ty>;
#line 501 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"

template <class _Ty>
struct is_member_pointer : bool_constant<is_member_pointer_v<_Ty>> {}; 


template <class _Ty>
 constexpr bool is_scalar_v = 
    is_arithmetic_v<_Ty> || is_enum_v<_Ty> || is_pointer_v<_Ty> || is_member_pointer_v<_Ty> || is_null_pointer_v<_Ty>;

template <class _Ty>
struct is_scalar : bool_constant<is_scalar_v<_Ty>> {};


template <class _Ty>
struct  is_pod : bool_constant<__is_pod(_Ty)> {}; 

template <class _Ty>
  constexpr bool is_pod_v = __is_pod(_Ty);


template <class _Ty>
struct is_empty : bool_constant<__is_empty(_Ty)> {}; 

template <class _Ty>
 constexpr bool is_empty_v = __is_empty(_Ty);


template <class _Ty>
struct is_polymorphic : bool_constant<__is_polymorphic(_Ty)> {}; 

template <class _Ty>
 constexpr bool is_polymorphic_v = __is_polymorphic(_Ty);


template <class _Ty>
struct is_abstract : bool_constant<__is_abstract(_Ty)> {}; 

template <class _Ty>
 constexpr bool is_abstract_v = __is_abstract(_Ty);


template <class _Ty>
struct is_final : bool_constant<__is_final(_Ty)> {}; 

template <class _Ty>
 constexpr bool is_final_v = __is_final(_Ty);


template <class _Ty>
struct is_standard_layout : bool_constant<__is_standard_layout(_Ty)> {}; 

template <class _Ty>
 constexpr bool is_standard_layout_v = __is_standard_layout(_Ty);



template <class _Ty>
struct  is_literal_type : bool_constant<__is_literal_type(_Ty)> {
    
};

template <class _Ty>
  constexpr bool is_literal_type_v = __is_literal_type(_Ty);
#line 565 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"



template <class _Ty>
struct is_trivial : bool_constant<__is_trivially_constructible(_Ty) && __is_trivially_copyable(_Ty)> {
    
};

template <class _Ty>
 constexpr bool is_trivial_v = __is_trivially_constructible(_Ty) && __is_trivially_copyable(_Ty);






#line 582 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"


template <class _Ty>
struct is_trivially_copyable : bool_constant<__is_trivially_copyable(_Ty)> {
    
};

template <class _Ty>
 constexpr bool is_trivially_copyable_v = __is_trivially_copyable(_Ty);


template <class _Ty>
struct has_virtual_destructor : bool_constant<__has_virtual_destructor(_Ty)> {
    
};

template <class _Ty>
 constexpr bool has_virtual_destructor_v = __has_virtual_destructor(_Ty);

















#line 618 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"



template <class _Ty, class... _Args>
struct is_constructible : bool_constant<__is_constructible(_Ty, _Args...)> {
    
};

template <class _Ty, class... _Args>
 constexpr bool is_constructible_v = __is_constructible(_Ty, _Args...);


template <class _Ty>
struct is_copy_constructible : bool_constant<__is_constructible(_Ty, add_lvalue_reference_t<const _Ty>)> {
    
};

template <class _Ty>
 constexpr bool is_copy_constructible_v = __is_constructible(_Ty, add_lvalue_reference_t<const _Ty>);


template <class _Ty>
struct is_default_constructible : bool_constant<__is_constructible(_Ty)> {
    
};

template <class _Ty>
 constexpr bool is_default_constructible_v = __is_constructible(_Ty);


template <class _Ty, class = void>
struct _Is_implicitly_default_constructible : false_type {
    
};

template <class _Ty>
void _Implicitly_default_construct(const _Ty&);

template <class _Ty>
struct _Is_implicitly_default_constructible<_Ty, void_t<decltype(_Implicitly_default_construct<_Ty>({}))>> : true_type {
};


template <class _Ty>
struct is_move_constructible : bool_constant<__is_constructible(_Ty, _Ty)> {
    
};

template <class _Ty>
 constexpr bool is_move_constructible_v = __is_constructible(_Ty, _Ty);


template <class _To, class _From>
struct is_assignable : bool_constant<__is_assignable(_To, _From)> {}; 

template <class _To, class _From>
 constexpr bool is_assignable_v = __is_assignable(_To, _From);


template <class _Ty>
struct is_copy_assignable
    : bool_constant<__is_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>)> {
    
};

template <class _Ty>
 constexpr bool is_copy_assignable_v = __is_assignable(
    add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>);










#line 697 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"
template <class _Ty>
using _Is_copy_assignable_no_precondition_check = is_copy_assignable<_Ty>;

template <class _Ty>
 constexpr bool _Is_copy_assignable_unchecked_v = is_copy_assignable_v<_Ty>;
#line 703 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"


template <class _Ty>
struct is_move_assignable : bool_constant<__is_assignable(add_lvalue_reference_t<_Ty>, _Ty)> {
    
};

template <class _Ty>
 constexpr bool is_move_assignable_v = __is_assignable(add_lvalue_reference_t<_Ty>, _Ty);









#line 722 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"
template <class _Ty>
using _Is_move_assignable_no_precondition_check = is_move_assignable<_Ty>;

template <class _Ty>
 constexpr bool _Is_move_assignable_unchecked_v = is_move_assignable_v<_Ty>;
#line 728 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"


template <class _Ty>
struct is_destructible : bool_constant<__is_destructible(_Ty)> {
    
};

template <class _Ty>
 constexpr bool is_destructible_v = __is_destructible(_Ty);



template <class _Ty, class... _Args>
struct is_trivially_constructible : bool_constant<__is_trivially_constructible(_Ty, _Args...)> {
    
};

template <class _Ty, class... _Args>
 constexpr bool is_trivially_constructible_v = __is_trivially_constructible(_Ty, _Args...);


template <class _Ty>
struct is_trivially_copy_constructible
    : bool_constant<__is_trivially_constructible(_Ty, add_lvalue_reference_t<const _Ty>)> {
    
};

template <class _Ty>
 constexpr bool is_trivially_copy_constructible_v = __is_trivially_constructible(
    _Ty, add_lvalue_reference_t<const _Ty>);


template <class _Ty>
struct is_trivially_default_constructible : bool_constant<__is_trivially_constructible(_Ty)> {
    
};

template <class _Ty>
 constexpr bool is_trivially_default_constructible_v = __is_trivially_constructible(_Ty);


template <class _Ty>
struct is_trivially_move_constructible : bool_constant<__is_trivially_constructible(_Ty, _Ty)> {
    
};

template <class _Ty>
 constexpr bool is_trivially_move_constructible_v = __is_trivially_constructible(_Ty, _Ty);


template <class _To, class _From>
struct is_trivially_assignable : bool_constant<__is_trivially_assignable(_To, _From)> {
    
};

template <class _To, class _From>
 constexpr bool is_trivially_assignable_v = __is_trivially_assignable(_To, _From);


template <class _Ty>
struct is_trivially_copy_assignable
    : bool_constant<__is_trivially_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>)> {
    
};

template <class _Ty>
 constexpr bool is_trivially_copy_assignable_v = __is_trivially_assignable(
    add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>);


template <class _Ty>
struct is_trivially_move_assignable : bool_constant<__is_trivially_assignable(add_lvalue_reference_t<_Ty>, _Ty)> {
    
};

template <class _Ty>
 constexpr bool is_trivially_move_assignable_v = __is_trivially_assignable(add_lvalue_reference_t<_Ty>, _Ty);


template <class _Ty>
struct is_trivially_destructible : bool_constant<__is_trivially_destructible(_Ty)> {
    
};

template <class _Ty>
 constexpr bool is_trivially_destructible_v = __is_trivially_destructible(_Ty);



template <class _Ty, class... _Args>
struct is_nothrow_constructible : bool_constant<__is_nothrow_constructible(_Ty, _Args...)> {
    
};

template <class _Ty, class... _Args>
 constexpr bool is_nothrow_constructible_v = __is_nothrow_constructible(_Ty, _Args...);


template <class _Ty>
struct is_nothrow_copy_constructible
    : bool_constant<__is_nothrow_constructible(_Ty, add_lvalue_reference_t<const _Ty>)> {
    
    
};

template <class _Ty>
 constexpr bool is_nothrow_copy_constructible_v = __is_nothrow_constructible(
    _Ty, add_lvalue_reference_t<const _Ty>);


template <class _Ty>
struct is_nothrow_default_constructible : bool_constant<__is_nothrow_constructible(_Ty)> {
    
};

template <class _Ty>
 constexpr bool is_nothrow_default_constructible_v = __is_nothrow_constructible(_Ty);


template <class _Ty>
struct is_nothrow_move_constructible : bool_constant<__is_nothrow_constructible(_Ty, _Ty)> {
    
};

template <class _Ty>
 constexpr bool is_nothrow_move_constructible_v = __is_nothrow_constructible(_Ty, _Ty);


template <class _To, class _From>
struct is_nothrow_assignable : bool_constant<__is_nothrow_assignable(_To, _From)> {
    
};

template <class _To, class _From>
 constexpr bool is_nothrow_assignable_v = __is_nothrow_assignable(_To, _From);


template <class _Ty>
struct is_nothrow_copy_assignable
    : bool_constant<__is_nothrow_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>)> {
    
};

template <class _Ty>
 constexpr bool is_nothrow_copy_assignable_v = __is_nothrow_assignable(
    add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>);


template <class _Ty>
struct is_nothrow_move_assignable : bool_constant<__is_nothrow_assignable(add_lvalue_reference_t<_Ty>, _Ty)> {
    
};

template <class _Ty>
 constexpr bool is_nothrow_move_assignable_v = __is_nothrow_assignable(add_lvalue_reference_t<_Ty>, _Ty);


template <class _Ty>
struct is_nothrow_destructible : bool_constant<__is_nothrow_destructible(_Ty)> {
    
    
};

template <class _Ty>
 constexpr bool is_nothrow_destructible_v = __is_nothrow_destructible(_Ty);


template <class _Ty, bool = is_integral_v<_Ty>>
struct _Sign_base { 
    using _Uty = remove_cv_t<_Ty>;

    static constexpr bool _Signed   = static_cast<_Uty>(-1) < static_cast<_Uty>(0);
    static constexpr bool _Unsigned = !_Signed;
};

template <class _Ty>
struct _Sign_base<_Ty, false> { 
                                
    static constexpr bool _Signed   = is_floating_point_v<_Ty>;
    static constexpr bool _Unsigned = false;
};

template <class _Ty>
struct is_signed : bool_constant<_Sign_base<_Ty>::_Signed> {}; 

template <class _Ty>
 constexpr bool is_signed_v = _Sign_base<_Ty>::_Signed;


template <class _Ty>
struct is_unsigned : bool_constant<_Sign_base<_Ty>::_Unsigned> {}; 

template <class _Ty>
 constexpr bool is_unsigned_v = _Sign_base<_Ty>::_Unsigned;


template <class _Ty>
 constexpr bool _Is_nonbool_integral = is_integral_v<_Ty> && !is_same_v<remove_cv_t<_Ty>, bool>;


template <bool>
struct _Select { 
    template <class _Ty1, class>
    using _Apply = _Ty1;
};

template <>
struct _Select<false> {
    template <class, class _Ty2>
    using _Apply = _Ty2;
};

template <size_t>
struct _Make_signed2; 

template <>
struct _Make_signed2<1> {
    template <class>
    using _Apply = signed char;
};

template <>
struct _Make_signed2<2> {
    template <class>
    using _Apply = short;
};

template <>
struct _Make_signed2<4> {
    template <class _Ty>
    using _Apply = 
        typename _Select<is_same_v<_Ty, long> || is_same_v<_Ty, unsigned long>>::template _Apply<long, int>;
};

template <>
struct _Make_signed2<8> {
    template <class>
    using _Apply = long long;
};

template <class _Ty>
using _Make_signed1 = 
    typename _Make_signed2<sizeof(_Ty)>::template _Apply<_Ty>;

template <class _Ty>
struct make_signed { 
    static_assert(_Is_nonbool_integral<_Ty> || is_enum_v<_Ty>,
        "make_signed<T> requires that T shall be a (possibly cv-qualified) "
        "integral type or enumeration but not a bool type.");

    using type = typename remove_cv<_Ty>::template _Apply<_Make_signed1>;
};

template <class _Ty>
using make_signed_t = typename make_signed<_Ty>::type;


template <size_t>
struct _Make_unsigned2; 

template <>
struct _Make_unsigned2<1> {
    template <class>
    using _Apply = unsigned char;
};

template <>
struct _Make_unsigned2<2> {
    template <class>
    using _Apply = unsigned short;
};

template <>
struct _Make_unsigned2<4> {
    template <class _Ty>
    using _Apply = 
        typename _Select<is_same_v<_Ty, long> || is_same_v<_Ty, unsigned long>>::template _Apply<unsigned long,
            unsigned int>;
};

template <>
struct _Make_unsigned2<8> {
    template <class>
    using _Apply = unsigned long long;
};

template <class _Ty>
using _Make_unsigned1 = 
    typename _Make_unsigned2<sizeof(_Ty)>::template _Apply<_Ty>;

template <class _Ty>
struct make_unsigned { 
    static_assert(_Is_nonbool_integral<_Ty> || is_enum_v<_Ty>,
        "make_unsigned<T> requires that T shall be a (possibly cv-qualified) "
        "integral type or enumeration but not a bool type.");

    using type = typename remove_cv<_Ty>::template _Apply<_Make_unsigned1>;
};

template <class _Ty>
using make_unsigned_t = typename make_unsigned<_Ty>::type;


template <class _Rep>
constexpr make_unsigned_t<_Rep> _Unsigned_value(_Rep _Val) { 
    return static_cast<make_unsigned_t<_Rep>>(_Val);
}


template <class _Ty>
struct alignment_of : integral_constant<size_t, alignof(_Ty)> {}; 

template <class _Ty>
 constexpr size_t alignment_of_v = alignof(_Ty);


template <class _Ty, size_t _Len>
union _Align_type { 
    _Ty _Val;
    char _Pad[_Len];
};

template <size_t _Len, size_t _Align, class _Ty, bool _Ok>
struct _Aligned; 

template <size_t _Len, size_t _Align, class _Ty>
struct _Aligned<_Len, _Align, _Ty, true> {
    using type = _Align_type<_Ty, _Len>;
};

template <size_t _Len, size_t _Align>
struct _Aligned<_Len, _Align, double, false> {






    static_assert(_Always_false<_Aligned>,
        "You've instantiated std::aligned_storage<Len, Align> with an extended alignment (in other "
        "words, Align > alignof(max_align_t)). Before VS 2017 15.8, the member \"type\" would "
        "non-conformingly have an alignment of only alignof(max_align_t). VS 2017 15.8 was fixed to "
        "handle this correctly, but the fix inherently changes layout and breaks binary compatibility "
        "(*only* for uses of aligned_storage with extended alignments). "
        "Please define either "
        "(1) _ENABLE_EXTENDED_ALIGNED_STORAGE to acknowledge that you understand this message and "
        "that you actually want a type with an extended alignment, or "
        "(2) _DISABLE_EXTENDED_ALIGNED_STORAGE to silence this message and get the old non-conforming "
        "behavior.");
#line 1078 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"
    using type = _Align_type<max_align_t, _Len>;
#line 1080 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"
};

template <size_t _Len, size_t _Align>
struct _Aligned<_Len, _Align, int, false> {
    using _Next                 = double;
    static constexpr bool _Fits = _Align <= alignof(_Next);
    using type                  = typename _Aligned<_Len, _Align, _Next, _Fits>::type;
};

template <size_t _Len, size_t _Align>
struct _Aligned<_Len, _Align, short, false> {
    using _Next                 = int;
    static constexpr bool _Fits = _Align <= alignof(_Next);
    using type                  = typename _Aligned<_Len, _Align, _Next, _Fits>::type;
};

template <size_t _Len, size_t _Align>
struct _Aligned<_Len, _Align, char, false> {
    using _Next                 = short;
    static constexpr bool _Fits = _Align <= alignof(_Next);
    using type                  = typename _Aligned<_Len, _Align, _Next, _Fits>::type;
};

template <size_t _Len, size_t _Align = alignof(max_align_t)>
struct aligned_storage { 
    using _Next                 = char;
    static constexpr bool _Fits = _Align <= alignof(_Next);
    using type                  = typename _Aligned<_Len, _Align, _Next, _Fits>::type;
};

template <size_t _Len, size_t _Align = alignof(max_align_t)>
using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;


template <size_t... _Vals>
struct _Maximum;

template <>
struct _Maximum<> : integral_constant<size_t, 0> {}; 

template <size_t _Val>
struct _Maximum<_Val> : integral_constant<size_t, _Val> {}; 

template <size_t _First, size_t _Second, size_t... _Rest>
struct _Maximum<_First, _Second, _Rest...> : _Maximum<(_First < _Second ? _Second : _First), _Rest...>::type {
    
};

template <size_t _Len, class... _Types>
struct aligned_union { 
    static constexpr size_t _Max_len        = _Maximum<_Len, sizeof(_Types)...>::value; 
    static constexpr size_t alignment_value = _Maximum<alignof(_Types)...>::value;

    using type = aligned_storage_t<_Max_len, alignment_value>;
};

template <size_t _Len, class... _Types>
using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


template <class _Ty, bool = is_enum_v<_Ty>>
struct _Underlying_type {
    using type = __underlying_type(_Ty);
};

template <class _Ty>
struct _Underlying_type<_Ty, false> {};

template <class _Ty>
struct underlying_type : _Underlying_type<_Ty> {}; 

template <class _Ty>
using underlying_type_t = typename _Underlying_type<_Ty>::type;


template <class _Ty>
 constexpr size_t rank_v = 0; 

template <class _Ty, size_t _Nx>
 constexpr size_t rank_v<_Ty[_Nx]> = rank_v<_Ty> + 1;

template <class _Ty>
 constexpr size_t rank_v<_Ty[]> = rank_v<_Ty> + 1;

template <class _Ty>
struct rank : integral_constant<size_t, rank_v<_Ty>> {};


template <class _Ty, unsigned int _Ix = 0>
 constexpr size_t extent_v = 0; 

template <class _Ty, size_t _Nx>
 constexpr size_t extent_v<_Ty[_Nx], 0> = _Nx;

template <class _Ty, unsigned int _Ix, size_t _Nx>
 constexpr size_t extent_v<_Ty[_Nx], _Ix> = extent_v<_Ty, _Ix - 1>;

template <class _Ty, unsigned int _Ix>
 constexpr size_t extent_v<_Ty[], _Ix> = extent_v<_Ty, _Ix - 1>;

template <class _Ty, unsigned int _Ix = 0>
struct extent : integral_constant<size_t, extent_v<_Ty, _Ix>> {};


template <class _Base, class _Derived>
struct is_base_of : bool_constant<__is_base_of(_Base, _Derived)> {
    
};

template <class _Base, class _Derived>
 constexpr bool is_base_of_v = __is_base_of(_Base, _Derived);


template <class _Ty>
struct decay { 
    using _Ty1 = remove_reference_t<_Ty>;
    using _Ty2 = typename _Select<is_function_v<_Ty1>>::template _Apply<add_pointer<_Ty1>, remove_cv<_Ty1>>;
    using type = typename _Select<is_array_v<_Ty1>>::template _Apply<add_pointer<remove_extent_t<_Ty1>>, _Ty2>::type;
};

template <class _Ty>
using decay_t = typename decay<_Ty>::type;


template <class _Ty1, class _Ty2>
using _Conditional_type = decltype(false ? ::std:: declval<_Ty1>() : ::std:: declval<_Ty2>());















#line 1222 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"
template <class _Ty1, class _Ty2, class = void>
struct _Decayed_cond_oper {};
#line 1225 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"

template <class _Ty1, class _Ty2>
struct _Decayed_cond_oper<_Ty1, _Ty2, void_t<_Conditional_type<_Ty1, _Ty2>>> {
    using type = decay_t<_Conditional_type<_Ty1, _Ty2>>;
};

template <class... _Ty>
struct common_type;

template <class... _Ty>
using common_type_t = typename common_type<_Ty...>::type;

template <>
struct common_type<> {};

template <class _Ty1>
struct common_type<_Ty1> : common_type<_Ty1, _Ty1> {};

template <class _Ty1, class _Ty2, class _Decayed1 = decay_t<_Ty1>, class _Decayed2 = decay_t<_Ty2>>
struct _Common_type2 : common_type<_Decayed1, _Decayed2> {};

template <class _Ty1, class _Ty2>
struct _Common_type2<_Ty1, _Ty2, _Ty1, _Ty2> : _Decayed_cond_oper<_Ty1, _Ty2> {};

template <class _Ty1, class _Ty2>
struct common_type<_Ty1, _Ty2> : _Common_type2<_Ty1, _Ty2> {};

template <class _Void, class _Ty1, class _Ty2, class... _Rest>
struct _Common_type3 {};

template <class _Ty1, class _Ty2, class... _Rest>
struct _Common_type3<void_t<common_type_t<_Ty1, _Ty2>>, _Ty1, _Ty2, _Rest...>
    : common_type<common_type_t<_Ty1, _Ty2>, _Rest...> {};

template <class _Ty1, class _Ty2, class... _Rest>
struct common_type<_Ty1, _Ty2, _Rest...> : _Common_type3<void, _Ty1, _Ty2, _Rest...> {};






















































































































































#line 1412 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"


template <class _Ty>
struct _Identity {
    using type = _Ty;
};
template <class _Ty>
using _Identity_t = typename _Identity<_Ty>::type;









#line 1430 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"


template <class _Type, template <class...> class _Template>
 constexpr bool _Is_specialization_v = false; 
template <template <class...> class _Template, class... _Types>
 constexpr bool _Is_specialization_v<_Template<_Types...>, _Template> = true;

template <class _Type, template <class...> class _Template>
struct _Is_specialization : bool_constant<_Is_specialization_v<_Type, _Template>> {};


template <class _Ty>
[[nodiscard]] constexpr _Ty&& forward(
    remove_reference_t<_Ty>& _Arg) noexcept { 
    return static_cast<_Ty&&>(_Arg);
}

template <class _Ty>
[[nodiscard]] constexpr _Ty&& forward(remove_reference_t<_Ty>&& _Arg) noexcept { 
    static_assert(!is_lvalue_reference_v<_Ty>, "bad forward call");
    return static_cast<_Ty&&>(_Arg);
}


template <class _Ty>
[[nodiscard]] constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { 
    return static_cast<remove_reference_t<_Ty>&&>(_Arg);
}


template <class _Ty>
[[nodiscard]] constexpr conditional_t<!is_nothrow_move_constructible_v<_Ty> && is_copy_constructible_v<_Ty>, const _Ty&,
    _Ty&&>
    move_if_noexcept(_Ty& _Arg) noexcept { 
    return ::std:: move(_Arg);
}

template <class _Ty>
class reference_wrapper;






#pragma warning(push) 
#pragma warning(disable : 28278) 
enum class _Invoker_strategy {
    _Functor,
    _Pmf_object,
    _Pmf_refwrap,
    _Pmf_pointer,
    _Pmd_object,
    _Pmd_refwrap,
    _Pmd_pointer
};

struct _Invoker_functor {
    static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Functor;

    template <class _Callable, class... _Types>
    static constexpr auto _Call(_Callable&& _Obj, _Types&&... _Args) noexcept(
        noexcept(static_cast<_Callable&&>(_Obj)(static_cast<_Types&&>(_Args)...)))
        -> decltype(static_cast<_Callable&&>(_Obj)(static_cast<_Types&&>(_Args)...)) {
        return static_cast<_Callable&&>(_Obj)(static_cast<_Types&&>(_Args)...);
    }
};

struct _Invoker_pmf_object {
    static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmf_object;

    template <class _Decayed, class _Ty1, class... _Types2>
    static constexpr auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(
        noexcept((static_cast<_Ty1&&>(_Arg1).*_Pmf)(static_cast<_Types2&&>(_Args2)...)))
        -> decltype((static_cast<_Ty1&&>(_Arg1).*_Pmf)(static_cast<_Types2&&>(_Args2)...)) {
        return (static_cast<_Ty1&&>(_Arg1).*_Pmf)(static_cast<_Types2&&>(_Args2)...);
    }
};

struct _Invoker_pmf_refwrap {
    static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmf_refwrap;

    template <class _Decayed, class _Refwrap, class... _Types2>
    static constexpr auto _Call(_Decayed _Pmf, _Refwrap _Rw, _Types2&&... _Args2) noexcept(
        noexcept((_Rw.get().*_Pmf)(static_cast<_Types2&&>(_Args2)...)))
        -> decltype((_Rw.get().*_Pmf)(static_cast<_Types2&&>(_Args2)...)) {
        return (_Rw.get().*_Pmf)(static_cast<_Types2&&>(_Args2)...);
    }
};

struct _Invoker_pmf_pointer {
    static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmf_pointer;

    template <class _Decayed, class _Ty1, class... _Types2>
    static constexpr auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(
        noexcept(((*static_cast<_Ty1&&>(_Arg1)).*_Pmf)(static_cast<_Types2&&>(_Args2)...)))
        -> decltype(((*static_cast<_Ty1&&>(_Arg1)).*_Pmf)(static_cast<_Types2&&>(_Args2)...)) {
        return ((*static_cast<_Ty1&&>(_Arg1)).*_Pmf)(static_cast<_Types2&&>(_Args2)...);
    }
};

struct _Invoker_pmd_object {
    static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmd_object;

    template <class _Decayed, class _Ty1>
    static constexpr auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept -> decltype(static_cast<_Ty1&&>(_Arg1).*_Pmd) {
        return static_cast<_Ty1&&>(_Arg1).*_Pmd;
    }
};

struct _Invoker_pmd_refwrap {
    static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmd_refwrap;

    template <class _Decayed, class _Refwrap>
    static constexpr auto _Call(_Decayed _Pmd, _Refwrap _Rw) noexcept -> decltype(_Rw.get().*_Pmd) {
        return _Rw.get().*_Pmd;
    }
};

struct _Invoker_pmd_pointer {
    static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmd_pointer;

    template <class _Decayed, class _Ty1>
    static constexpr auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept(noexcept((*static_cast<_Ty1&&>(_Arg1)).*_Pmd))
        -> decltype((*static_cast<_Ty1&&>(_Arg1)).*_Pmd) {
        return (*static_cast<_Ty1&&>(_Arg1)).*_Pmd;
    }
};

template <class _Callable, class _Ty1, class _Removed_cvref = _Remove_cvref_t<_Callable>,
    bool _Is_pmf = is_member_function_pointer_v<_Removed_cvref>,
    bool _Is_pmd = is_member_object_pointer_v<_Removed_cvref>>
struct _Invoker1;

template <class _Callable, class _Ty1, class _Removed_cvref>
struct _Invoker1<_Callable, _Ty1, _Removed_cvref, true, false>
    : conditional_t<is_base_of_v<typename _Is_memfunptr<_Removed_cvref>::_Class_type, remove_reference_t<_Ty1>>,
          _Invoker_pmf_object,
          conditional_t<_Is_specialization_v<_Remove_cvref_t<_Ty1>, reference_wrapper>, _Invoker_pmf_refwrap,
              _Invoker_pmf_pointer>> {}; 

template <class _Callable, class _Ty1, class _Removed_cvref>
struct _Invoker1<_Callable, _Ty1, _Removed_cvref, false, true>
    : conditional_t<
          is_base_of_v<typename _Is_member_object_pointer<_Removed_cvref>::_Class_type, remove_reference_t<_Ty1>>,
          _Invoker_pmd_object,
          conditional_t<_Is_specialization_v<_Remove_cvref_t<_Ty1>, reference_wrapper>, _Invoker_pmd_refwrap,
              _Invoker_pmd_pointer>> {}; 

template <class _Callable, class _Ty1, class _Removed_cvref>
struct _Invoker1<_Callable, _Ty1, _Removed_cvref, false, false> : _Invoker_functor {};

template <class _Callable>
inline auto invoke(_Callable&& _Obj) noexcept(noexcept(static_cast<_Callable&&>(_Obj)()))
    -> decltype(static_cast<_Callable&&>(_Obj)()) {
    return static_cast<_Callable&&>(_Obj)();
}

template <class _Callable, class _Ty1, class... _Types2>
inline auto invoke(_Callable&& _Obj, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(
    noexcept(_Invoker1<_Callable, _Ty1>::_Call(
        static_cast<_Callable&&>(_Obj), static_cast<_Ty1&&>(_Arg1), static_cast<_Types2&&>(_Args2)...)))
    -> decltype(_Invoker1<_Callable, _Ty1>::_Call(
        static_cast<_Callable&&>(_Obj), static_cast<_Ty1&&>(_Arg1), static_cast<_Types2&&>(_Args2)...)) {
    if constexpr (_Invoker1<_Callable, _Ty1>::_Strategy == _Invoker_strategy::_Functor) {
        return static_cast<_Callable&&>(_Obj)(static_cast<_Ty1&&>(_Arg1), static_cast<_Types2&&>(_Args2)...);
    } else if constexpr (_Invoker1<_Callable, _Ty1>::_Strategy == _Invoker_strategy::_Pmf_object) {
        return (static_cast<_Ty1&&>(_Arg1).*_Obj)(static_cast<_Types2&&>(_Args2)...);
    } else if constexpr (_Invoker1<_Callable, _Ty1>::_Strategy == _Invoker_strategy::_Pmf_refwrap) {
        return (_Arg1.get().*_Obj)(static_cast<_Types2&&>(_Args2)...);
    } else if constexpr (_Invoker1<_Callable, _Ty1>::_Strategy == _Invoker_strategy::_Pmf_pointer) {
        return ((*static_cast<_Ty1&&>(_Arg1)).*_Obj)(static_cast<_Types2&&>(_Args2)...);
    } else if constexpr (_Invoker1<_Callable, _Ty1>::_Strategy == _Invoker_strategy::_Pmd_object) {
        return static_cast<_Ty1&&>(_Arg1).*_Obj;
    } else if constexpr (_Invoker1<_Callable, _Ty1>::_Strategy == _Invoker_strategy::_Pmd_refwrap) {
        return _Arg1.get().*_Obj;
    } else {
        static_assert(_Invoker1<_Callable, _Ty1>::_Strategy == _Invoker_strategy::_Pmd_pointer, "bug in invoke");
        return (*static_cast<_Ty1&&>(_Arg1)).*_Obj;
    }
}
#pragma warning(pop) 


#pragma warning(push)
#pragma warning(disable : 4242) 
#pragma warning(disable : 4244) 
#pragma warning(disable : 4365) 
#pragma warning(disable : 5215) 






template <class _To>
void _Implicitly_convert_to(_To) noexcept; 

template <class _From, class _To, bool = is_convertible_v<_From, _To>, bool = is_void_v<_To>>
 constexpr bool _Is_nothrow_convertible_v = noexcept(_Implicitly_convert_to<_To>(::std:: declval<_From>()));





#pragma warning(pop)

template <class _From, class _To, bool _IsVoid>
 constexpr bool _Is_nothrow_convertible_v<_From, _To, false, _IsVoid> = false;

template <class _From, class _To>
 constexpr bool _Is_nothrow_convertible_v<_From, _To, true, true> = true;

template <class _From, class _To>
struct _Is_nothrow_convertible : bool_constant<_Is_nothrow_convertible_v<_From, _To>> {
    
};







#line 1655 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"

template <class _Ty>
_Ty _Returns_exactly() noexcept; 

template <class _From, class _To, class = void>
struct _Invoke_convertible : false_type {};

template <class _From, class _To>
struct _Invoke_convertible<_From, _To, void_t<decltype(_Implicitly_convert_to<_To>(_Returns_exactly<_From>()))>>
    : true_type {};

template <class _From, class _To>
struct _Invoke_nothrow_convertible : bool_constant<noexcept(_Implicitly_convert_to<_To>(_Returns_exactly<_From>()))> {};

template <class _Result, bool _Nothrow>
struct _Invoke_traits_common {
    using type                  = _Result;
    using _Is_invocable         = true_type;
    using _Is_nothrow_invocable = bool_constant<_Nothrow>;
    template <class _Rx>
    using _Is_invocable_r = bool_constant<disjunction_v<is_void<_Rx>, _Invoke_convertible<type, _Rx>>>;
    template <class _Rx>
    using _Is_nothrow_invocable_r = bool_constant<conjunction_v<_Is_nothrow_invocable,
        disjunction<is_void<_Rx>,
            conjunction<_Invoke_convertible<type, _Rx>, _Invoke_nothrow_convertible<type, _Rx>>>>>;
};

template <class _Void, class _Callable>
struct _Invoke_traits_zero {
    
    using _Is_invocable         = false_type;
    using _Is_nothrow_invocable = false_type;
    template <class _Rx>
    using _Is_invocable_r = false_type;
    template <class _Rx>
    using _Is_nothrow_invocable_r = false_type;
};

template <class _Callable>
using _Decltype_invoke_zero = decltype(::std:: declval<_Callable>()());

template <class _Callable>
struct _Invoke_traits_zero<void_t<_Decltype_invoke_zero<_Callable>>, _Callable>
    : _Invoke_traits_common<_Decltype_invoke_zero<_Callable>, noexcept(::std:: declval<_Callable>()())> {};

template <class _Void, class... _Types>
struct _Invoke_traits_nonzero {
    
    using _Is_invocable         = false_type;
    using _Is_nothrow_invocable = false_type;
    template <class _Rx>
    using _Is_invocable_r = false_type;
    template <class _Rx>
    using _Is_nothrow_invocable_r = false_type;
};

template <class _Callable, class _Ty1, class... _Types2>
using _Decltype_invoke_nonzero = decltype(
    _Invoker1<_Callable, _Ty1>::_Call(::std:: declval<_Callable>(), ::std:: declval<_Ty1>(), ::std:: declval<_Types2>()...));

template <class _Callable, class _Ty1, class... _Types2>
struct _Invoke_traits_nonzero<void_t<_Decltype_invoke_nonzero<_Callable, _Ty1, _Types2...>>, _Callable, _Ty1,
    _Types2...> : _Invoke_traits_common<_Decltype_invoke_nonzero<_Callable, _Ty1, _Types2...>,
                      noexcept(_Invoker1<_Callable, _Ty1>::_Call(
                          ::std:: declval<_Callable>(), ::std:: declval<_Ty1>(), ::std:: declval<_Types2>()...))> {};

template <class _Callable, class... _Args>
using _Select_invoke_traits = conditional_t<sizeof...(_Args) == 0, _Invoke_traits_zero<void, _Callable>,
    _Invoke_traits_nonzero<void, _Callable, _Args...>>;



template <class _Fty>
struct  result_of { 
    static_assert(_Always_false<_Fty>, "result_of<CallableType> is invalid; use "
                                       "result_of<CallableType(zero or more argument types)> instead.");
};







template <class _Callable, class... _Args> struct  result_of<_Callable __cdecl(_Args...)> : _Select_invoke_traits<_Callable, _Args...> { };  template <class _Callable, class... _Args> struct  result_of<_Callable __fastcall(_Args...)> : _Select_invoke_traits<_Callable, _Args...> { }; template <class _Callable, class... _Args> struct  result_of<_Callable __stdcall(_Args...)> : _Select_invoke_traits<_Callable, _Args...> { }; template <class _Callable, class... _Args> struct  result_of<_Callable __vectorcall(_Args...)> : _Select_invoke_traits<_Callable, _Args...> { };


__pragma(warning(push)) __pragma(warning(disable : 4996))
template <class _Ty>
using result_of_t  = typename result_of<_Ty>::type;
__pragma(warning(pop))
#line 1747 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"

template <class _Callable, class... _Args>
using _Invoke_result_t = typename _Select_invoke_traits<_Callable, _Args...>::type;

template <class _Rx, class _Callable, class... _Args>
using _Is_invocable_r_ = typename _Select_invoke_traits<_Callable, _Args...>::template _Is_invocable_r<_Rx>;

template <class _Rx, class _Callable, class... _Args>
struct _Is_invocable_r : _Is_invocable_r_<_Rx, _Callable, _Args...> {
    
};















































#line 1806 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"































#line 1838 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"


template <class _Ty>
struct _Function_args {}; 







template <class _Ret, class... _Types> struct _Function_args<_Ret __cdecl(_Types...)   > : _Arg_types<_Types...> {  typedef _Ret result_type; };  template <class _Ret, class... _Types> struct _Function_args<_Ret __fastcall(_Types...)   > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __stdcall(_Types...)   > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __vectorcall(_Types...)   > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __cdecl(_Types...) const  > : _Arg_types<_Types...> {  typedef _Ret result_type; };  template <class _Ret, class... _Types> struct _Function_args<_Ret __fastcall(_Types...) const  > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __stdcall(_Types...) const  > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __vectorcall(_Types...) const  > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __cdecl(_Types...) volatile  > : _Arg_types<_Types...> {  typedef _Ret result_type; };  template <class _Ret, class... _Types> struct _Function_args<_Ret __fastcall(_Types...) volatile  > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __stdcall(_Types...) volatile  > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __vectorcall(_Types...) volatile  > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __cdecl(_Types...) const volatile  > : _Arg_types<_Types...> {  typedef _Ret result_type; };  template <class _Ret, class... _Types> struct _Function_args<_Ret __fastcall(_Types...) const volatile  > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __stdcall(_Types...) const volatile  > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __vectorcall(_Types...) const volatile  > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __cdecl(_Types...)  & > : _Arg_types<_Types...> {  typedef _Ret result_type; };  template <class _Ret, class... _Types> struct _Function_args<_Ret __fastcall(_Types...)  & > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __stdcall(_Types...)  & > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __vectorcall(_Types...)  & > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __cdecl(_Types...) const & > : _Arg_types<_Types...> {  typedef _Ret result_type; };  template <class _Ret, class... _Types> struct _Function_args<_Ret __fastcall(_Types...) const & > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __stdcall(_Types...) const & > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __vectorcall(_Types...) const & > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __cdecl(_Types...) volatile & > : _Arg_types<_Types...> {  typedef _Ret result_type; };  template <class _Ret, class... _Types> struct _Function_args<_Ret __fastcall(_Types...) volatile & > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __stdcall(_Types...) volatile & > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __vectorcall(_Types...) volatile & > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __cdecl(_Types...) const volatile & > : _Arg_types<_Types...> {  typedef _Ret result_type; };  template <class _Ret, class... _Types> struct _Function_args<_Ret __fastcall(_Types...) const volatile & > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __stdcall(_Types...) const volatile & > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __vectorcall(_Types...) const volatile & > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __cdecl(_Types...)  && > : _Arg_types<_Types...> {  typedef _Ret result_type; };  template <class _Ret, class... _Types> struct _Function_args<_Ret __fastcall(_Types...)  && > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __stdcall(_Types...)  && > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __vectorcall(_Types...)  && > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __cdecl(_Types...) const && > : _Arg_types<_Types...> {  typedef _Ret result_type; };  template <class _Ret, class... _Types> struct _Function_args<_Ret __fastcall(_Types...) const && > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __stdcall(_Types...) const && > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __vectorcall(_Types...) const && > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __cdecl(_Types...) volatile && > : _Arg_types<_Types...> {  typedef _Ret result_type; };  template <class _Ret, class... _Types> struct _Function_args<_Ret __fastcall(_Types...) volatile && > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __stdcall(_Types...) volatile && > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __vectorcall(_Types...) volatile && > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __cdecl(_Types...) const volatile && > : _Arg_types<_Types...> {  typedef _Ret result_type; };  template <class _Ret, class... _Types> struct _Function_args<_Ret __fastcall(_Types...) const volatile && > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __stdcall(_Types...) const volatile && > : _Arg_types<_Types...> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret __vectorcall(_Types...) const volatile && > : _Arg_types<_Types...> {  typedef _Ret result_type; };








template <class _Ret, class... _Types> struct _Function_args<_Ret(_Types..., ...) > {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret(_Types..., ...) const> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret(_Types..., ...) volatile> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret(_Types..., ...) const volatile> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret(_Types..., ...) &> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret(_Types..., ...) const&> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret(_Types..., ...) volatile&> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret(_Types..., ...) const volatile&> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret(_Types..., ...) &&> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret(_Types..., ...) const&&> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret(_Types..., ...) volatile&&> {  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Function_args<_Ret(_Types..., ...) const volatile&&> {  typedef _Ret result_type; };


template <class _Ty, class = void>
struct _Weak_result_type {}; 

__pragma(warning(push)) __pragma(warning(disable : 4996))
template <class _Ty>
struct _Weak_result_type<_Ty, void_t<typename _Ty::result_type>> { 
     typedef typename _Ty::result_type result_type;
};
__pragma(warning(pop))

template <class _Ty, class = void>
struct _Weak_argument_type : _Weak_result_type<_Ty> {}; 

__pragma(warning(push)) __pragma(warning(disable : 4996))
template <class _Ty>
struct _Weak_argument_type<_Ty, void_t<typename _Ty::argument_type>> : _Weak_result_type<_Ty> {
    
     typedef typename _Ty::argument_type argument_type;
};
__pragma(warning(pop))

template <class _Ty, class = void>
struct _Weak_binary_args : _Weak_argument_type<_Ty> {}; 

__pragma(warning(push)) __pragma(warning(disable : 4996))
template <class _Ty>
struct _Weak_binary_args<_Ty, void_t<typename _Ty::first_argument_type,
                                  typename _Ty::second_argument_type>>
    : _Weak_argument_type<_Ty> { 
     typedef typename _Ty::first_argument_type first_argument_type;
     typedef typename _Ty::second_argument_type second_argument_type;
};
__pragma(warning(pop))

template <class _Ty>
using _Weak_types = conditional_t<is_function_v<remove_pointer_t<_Ty>>, _Function_args<remove_pointer_t<_Ty>>,
    conditional_t<is_member_function_pointer_v<_Ty>, _Is_memfunptr<remove_cv_t<_Ty>>, _Weak_binary_args<_Ty>>>;


template <class _Ty>
void _Refwrap_ctor_fun(_Identity_t<_Ty&>) noexcept;
template <class _Ty>
void _Refwrap_ctor_fun(_Identity_t<_Ty&&>) = delete;

template <class _Ty, class _Uty, class = void>
struct _Refwrap_has_ctor_from : false_type {};

template <class _Ty, class _Uty>
struct _Refwrap_has_ctor_from<_Ty, _Uty, void_t<decltype(_Refwrap_ctor_fun<_Ty>(::std:: declval<_Uty>()))>> : true_type {};

template <class _Ty>
class reference_wrapper

    : public _Weak_types<_Ty>
#line 1916 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"
{
public:
    static_assert(is_object_v<_Ty> || is_function_v<_Ty>,
        "reference_wrapper<T> requires T to be an object type or a function type.");

    using type = _Ty;

    template <class _Uty, enable_if_t<conjunction_v<negation<is_same<_Remove_cvref_t<_Uty>, reference_wrapper>>,
                                          _Refwrap_has_ctor_from<_Ty, _Uty>>,
                              int> = 0>
    inline reference_wrapper(_Uty&& _Val) noexcept(noexcept(_Refwrap_ctor_fun<_Ty>(::std:: declval<_Uty>()))) {
        _Ty& _Ref = static_cast<_Uty&&>(_Val);
        _Ptr      = ::std:: addressof(_Ref);
    }

    inline operator _Ty&() const noexcept {
        return *_Ptr;
    }

    [[nodiscard]] inline _Ty& get() const noexcept {
        return *_Ptr;
    }

private:
    _Ty* _Ptr{};

public:
    template <class... _Types>
    inline auto operator()(_Types&&... _Args) const
        noexcept(noexcept(::std:: invoke(*_Ptr, static_cast<_Types&&>(_Args)...))) 
        -> decltype(::std:: invoke(*_Ptr, static_cast<_Types&&>(_Args)...)) {
        return ::std:: invoke(*_Ptr, static_cast<_Types&&>(_Args)...);
    }
};




#line 1955 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"


template <class _Ty>
[[nodiscard]] inline reference_wrapper<_Ty> ref(_Ty& _Val) noexcept {
    return reference_wrapper<_Ty>(_Val);
}

template <class _Ty>
void ref(const _Ty&&) = delete;

template <class _Ty>
[[nodiscard]] inline reference_wrapper<_Ty> ref(reference_wrapper<_Ty> _Val) noexcept {
    return ::std:: ref(_Val.get());
}

template <class _Ty>
[[nodiscard]] inline reference_wrapper<const _Ty> cref(const _Ty& _Val) noexcept {
    return reference_wrapper<const _Ty>(_Val);
}

template <class _Ty>
void cref(const _Ty&&) = delete;

template <class _Ty>
[[nodiscard]] inline reference_wrapper<const _Ty> cref(reference_wrapper<_Ty> _Val) noexcept {
    return ::std:: cref(_Val.get());
}





















#line 2004 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"


template <class _Ty>
struct _Is_swappable;


template <class _Ty>
struct _Is_nothrow_swappable;




#line 2017 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"
template <class _Ty, int _Enabled = 0>
#line 2019 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"
inline void swap(_Ty&, _Ty&) noexcept(is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>);

template <class _Ty, size_t _Size, enable_if_t<_Is_swappable<_Ty>::value, int> = 0>
inline void swap(_Ty (&)[_Size], _Ty (&)[_Size]) noexcept(_Is_nothrow_swappable<_Ty>::value);


template <class _Ty1, class _Ty2, class = void>
struct _Swappable_with_helper : false_type {}; 

template <class _Ty1, class _Ty2>
struct _Swappable_with_helper<_Ty1, _Ty2, void_t<decltype(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))>>
    : true_type {}; 


template <class _Ty1, class _Ty2>
struct _Is_swappable_with
    : bool_constant<conjunction_v<_Swappable_with_helper<_Ty1, _Ty2>, _Swappable_with_helper<_Ty2, _Ty1>>> {
    
};


template <class _Ty>
struct _Is_swappable : _Is_swappable_with<add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<_Ty>>::type {
    
};


template <class _Ty1, class _Ty2>
struct _Swap_cannot_throw : bool_constant<noexcept(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>())) 
                                    && noexcept(swap(::std:: declval<_Ty2>(), ::std:: declval<_Ty1>()))> {
    
    
};


template <class _Ty1, class _Ty2>
struct _Is_nothrow_swappable_with
    : bool_constant<conjunction_v<_Is_swappable_with<_Ty1, _Ty2>, _Swap_cannot_throw<_Ty1, _Ty2>>> {
    
    
};


template <class _Ty>
struct _Is_nothrow_swappable
    : _Is_nothrow_swappable_with<add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<_Ty>>::type {
    
};






































#line 2106 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"


namespace _Has_ADL_swap_detail {
    void swap(); 

    template <class, class = void>
    struct _Has_ADL_swap : false_type {};
    template <class _Ty>
    struct _Has_ADL_swap<_Ty, void_t<decltype(swap(::std:: declval<_Ty&>(), ::std:: declval<_Ty&>()))>> : true_type {};
} 
using _Has_ADL_swap_detail::_Has_ADL_swap;

template <class _Ty>
 constexpr bool _Is_trivially_swappable_v = conjunction_v<is_trivially_destructible<_Ty>,
    is_trivially_move_constructible<_Ty>, is_trivially_move_assignable<_Ty>, negation<_Has_ADL_swap<_Ty>>>;

template <class _Ty>
struct _Is_trivially_swappable : bool_constant<_Is_trivially_swappable_v<_Ty>> {
    
};



















































#line 2178 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"
 constexpr size_t _FNV_offset_basis = 2166136261U;
 constexpr size_t _FNV_prime        = 16777619U;
#line 2181 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"

[[nodiscard]] inline size_t _Fnv1a_append_bytes(size_t _Val, const unsigned char* const _First,
    const size_t _Count) noexcept { 
    for (size_t _Idx = 0; _Idx < _Count; ++_Idx) {
        _Val ^= static_cast<size_t>(_First[_Idx]);
        _Val *= _FNV_prime;
    }

    return _Val;
}

template <class _Ty>
[[nodiscard]] size_t _Fnv1a_append_range(const size_t _Val, const _Ty* const _First,
    const _Ty* const _Last) noexcept { 
    static_assert(is_trivial_v<_Ty>, "Only trivial types can be directly hashed.");
    const auto _Firstb = reinterpret_cast<const unsigned char*>(_First);
    const auto _Lastb  = reinterpret_cast<const unsigned char*>(_Last);
    return _Fnv1a_append_bytes(_Val, _Firstb, static_cast<size_t>(_Lastb - _Firstb));
}

template <class _Kty>
[[nodiscard]] size_t _Fnv1a_append_value(
    const size_t _Val, const _Kty& _Keyval) noexcept { 
    static_assert(is_trivial_v<_Kty>, "Only trivial types can be directly hashed.");
    return _Fnv1a_append_bytes(_Val, &reinterpret_cast<const unsigned char&>(_Keyval), sizeof(_Kty));
}


template <class _Kty>
[[nodiscard]] size_t _Hash_representation(const _Kty& _Keyval) noexcept { 
    return _Fnv1a_append_value(_FNV_offset_basis, _Keyval);
}


template <class _Kty>
[[nodiscard]] size_t _Hash_array_representation(
    const _Kty* const _First, const size_t _Count) noexcept { 
    static_assert(is_trivial_v<_Kty>, "Only trivial types can be directly hashed.");
    return _Fnv1a_append_bytes(
        _FNV_offset_basis, reinterpret_cast<const unsigned char*>(_First), _Count * sizeof(_Kty));
}


template <class _Kty>
struct hash;

template <class _Kty, bool _Enabled>
struct _Conditionally_enabled_hash { 
     typedef _Kty argument_type;
     typedef size_t result_type;

    [[nodiscard]] size_t operator()(const _Kty& _Keyval) const
        noexcept(noexcept(hash<_Kty>::_Do_hash(_Keyval)))  {
        return hash<_Kty>::_Do_hash(_Keyval);
    }
};

template <class _Kty>
struct _Conditionally_enabled_hash<_Kty, false> { 
    _Conditionally_enabled_hash()                                   = delete;
    _Conditionally_enabled_hash(const _Conditionally_enabled_hash&) = delete;
    _Conditionally_enabled_hash(_Conditionally_enabled_hash&&)      = delete;
    _Conditionally_enabled_hash& operator=(const _Conditionally_enabled_hash&) = delete;
    _Conditionally_enabled_hash& operator=(_Conditionally_enabled_hash&&) = delete;
};


template <class _Kty>
struct hash
    : _Conditionally_enabled_hash<_Kty,
          !is_const_v<_Kty> && !is_volatile_v<_Kty> && (is_enum_v<_Kty> || is_integral_v<_Kty> || is_pointer_v<_Kty>)> {
    
    static size_t _Do_hash(const _Kty& _Keyval) noexcept {
        return _Hash_representation(_Keyval);
    }
};

template <>
struct hash<float> {
     typedef float argument_type;
     typedef size_t result_type;
    [[nodiscard]] size_t operator()(const float _Keyval) const noexcept {
        return _Hash_representation(_Keyval == 0.0F ? 0.0F : _Keyval); 
    }
};

template <>
struct hash<double> {
     typedef double argument_type;
     typedef size_t result_type;
    [[nodiscard]] size_t operator()(const double _Keyval) const noexcept {
        return _Hash_representation(_Keyval == 0.0 ? 0.0 : _Keyval); 
    }
};

template <>
struct hash<long double> {
     typedef long double argument_type;
     typedef size_t result_type;
    [[nodiscard]] size_t operator()(const long double _Keyval) const noexcept {
        return _Hash_representation(_Keyval == 0.0L ? 0.0L : _Keyval); 
    }
};

template <>
struct hash<nullptr_t> {
     typedef nullptr_t argument_type;
     typedef size_t result_type;
    [[nodiscard]] size_t operator()(nullptr_t) const noexcept {
        void* _Null{};
        return _Hash_representation(_Null);
    }
};


template <class _Kty, class = void>
struct _Is_nothrow_hashable : false_type {}; 

template <class _Kty>
struct _Is_nothrow_hashable<_Kty, void_t<decltype(hash<_Kty>{}(::std:: declval<const _Kty&>()))>>
    : bool_constant<noexcept(hash<_Kty>{}(::std:: declval<const _Kty&>()))> {};



template <class _FloatingType>
struct _Floating_type_traits;

template <>
struct _Floating_type_traits<float> {
    static constexpr int32_t _Mantissa_bits           = 24; 
    static constexpr int32_t _Exponent_bits           = 8; 
    static constexpr int32_t _Maximum_binary_exponent = 127; 
    static constexpr int32_t _Minimum_binary_exponent = -126; 
    static constexpr int32_t _Exponent_bias           = 127;
    static constexpr int32_t _Sign_shift              = 31; 
    static constexpr int32_t _Exponent_shift          = 23; 

    using _Uint_type = uint32_t;

    static constexpr uint32_t _Exponent_mask             = 0x000000FFu; 
    static constexpr uint32_t _Normal_mantissa_mask      = 0x00FFFFFFu; 
    static constexpr uint32_t _Denormal_mantissa_mask    = 0x007FFFFFu; 
    static constexpr uint32_t _Special_nan_mantissa_mask = 0x00400000u; 
    static constexpr uint32_t _Shifted_sign_mask         = 0x80000000u; 
    static constexpr uint32_t _Shifted_exponent_mask     = 0x7F800000u; 
};

template <>
struct _Floating_type_traits<double> {
    static constexpr int32_t _Mantissa_bits           = 53; 
    static constexpr int32_t _Exponent_bits           = 11; 
    static constexpr int32_t _Maximum_binary_exponent = 1023; 
    static constexpr int32_t _Minimum_binary_exponent = -1022; 
    static constexpr int32_t _Exponent_bias           = 1023;
    static constexpr int32_t _Sign_shift              = 63; 
    static constexpr int32_t _Exponent_shift          = 52; 

    using _Uint_type = uint64_t;

    static constexpr uint64_t _Exponent_mask             = 0x00000000000007FFu; 
    static constexpr uint64_t _Normal_mantissa_mask      = 0x001FFFFFFFFFFFFFu; 
    static constexpr uint64_t _Denormal_mantissa_mask    = 0x000FFFFFFFFFFFFFu; 
    static constexpr uint64_t _Special_nan_mantissa_mask = 0x0008000000000000u; 
    static constexpr uint64_t _Shifted_sign_mask         = 0x8000000000000000u; 
    static constexpr uint64_t _Shifted_exponent_mask     = 0x7FF0000000000000u; 
};

template <>
struct _Floating_type_traits<long double> : _Floating_type_traits<double> {};




__pragma(warning(push)) __pragma(warning(disable : 4996))
namespace [[deprecated( "warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 {
    using ::std:: add_const;
    using ::std:: add_cv;
    using ::std:: add_pointer;
    using ::std:: add_volatile;
    using ::std:: aligned_storage;
    using ::std:: alignment_of;
    using ::std:: conditional;
    using ::std:: decay;
    using ::std:: enable_if;
    using ::std:: extent;
    using ::std:: false_type;
    using ::std:: has_virtual_destructor;
    using ::std:: integral_constant;
    using ::std:: is_abstract;
    using ::std:: is_arithmetic;
    using ::std:: is_array;
    using ::std:: is_base_of;
    using ::std:: is_class;
    using ::std:: is_compound;
    using ::std:: is_const;
    using ::std:: is_convertible;
    using ::std:: is_empty;
    using ::std:: is_enum;
    using ::std:: is_floating_point;
    using ::std:: is_function;
    using ::std:: is_fundamental;
    using ::std:: is_integral;
    using ::std:: is_member_function_pointer;
    using ::std:: is_member_object_pointer;
    using ::std:: is_member_pointer;
    using ::std:: is_object;
    using ::std:: is_pod;
    using ::std:: is_pointer;
    using ::std:: is_polymorphic;
    using ::std:: is_reference;
    using ::std:: is_same;
    using ::std:: is_scalar;
    using ::std:: is_signed;
    using ::std:: is_union;
    using ::std:: is_unsigned;
    using ::std:: is_void;
    using ::std:: is_volatile;
    using ::std:: make_signed;
    using ::std:: make_unsigned;
    using ::std:: rank;
    using ::std:: remove_all_extents;
    using ::std:: remove_const;
    using ::std:: remove_cv;
    using ::std:: remove_extent;
    using ::std:: remove_pointer;
    using ::std:: remove_reference;
    using ::std:: remove_volatile;
    using ::std:: true_type;
    using ::std:: cref;
    using ::std:: ref;
    using ::std:: reference_wrapper;

    using ::std:: result_of;
#line 2415 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"
    using ::std:: hash;
} 
__pragma(warning(pop))
#line 2419 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"

}



#pragma warning(pop)
#pragma pack(pop)

#line 2428 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"
#line 2429 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\type_traits"
#line 13 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\exception"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294  4984  )




namespace std {


  bool __cdecl uncaught_exception() noexcept;
#line 26 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\exception"
 int __cdecl uncaught_exceptions() noexcept;

}



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\malloc.h"







#pragma once






#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {







    
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\malloc.h"













typedef struct _heapinfo
{
    int* _pentry;
    size_t _size;
    int _useflag;
} _HEAPINFO;






   
void* __cdecl _alloca(  size_t _Size);





     intptr_t __cdecl _get_heap_handle(void);

     
     int __cdecl _heapmin(void);

    
         int __cdecl _heapwalk(  _HEAPINFO* _EntryInfo);
    #line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\malloc.h"

    
           int __cdecl _heapchk(void);
    #line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\malloc.h"

     int __cdecl _resetstkoflw(void);

    
    
    

    


        
    #line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\malloc.h"

    static_assert((sizeof(unsigned int) <= 8), "sizeof(unsigned int) <= _ALLOCA_S_MARKER_SIZE");


    #pragma warning(push)
    #pragma warning(disable: 6540) 
                                   

    __inline void* _MarkAllocaS(   void* _Ptr, unsigned int _Marker)
    {
        if (_Ptr)
        {
            *((unsigned int*)_Ptr) = _Marker;
            _Ptr = (char*)_Ptr + 8;
        }
        return _Ptr;
    }

    __inline size_t _MallocaComputeSize(size_t _Size)
    {
        size_t _MarkedSize = _Size + 8;
        return _MarkedSize > _Size ? _MarkedSize : 0;
    }

    #pragma warning(pop)

#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\malloc.h"

















    
    







#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\malloc.h"




#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\malloc.h"
#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\malloc.h"

    

    #pragma warning(push)
    #pragma warning(disable: 6014) 
    __inline void __cdecl _freea(    void* _Memory)
    {
        unsigned int _Marker;
        if (_Memory)
        {
            _Memory = (char*)_Memory - 8;
            _Marker = *(unsigned int*)_Memory;
            if (_Marker == 0xDDDD)
            {
                free(_Memory);
            }
            
            else if (_Marker != 0xCCCC)
            {
                ((void)0);
            }
            #line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\malloc.h"
        }
    }
    #pragma warning(pop)

#line 172 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\malloc.h"




    
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\malloc.h"



} __pragma(pack(pop))

#pragma warning(pop) 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\malloc.h"
#line 33 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\exception"
#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime_exception.h"







#pragma once

#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\eh.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_terminate.h"







#pragma once



#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )




__pragma(pack(push, 8)) extern "C" {



typedef void (__cdecl* terminate_handler )(void);
typedef void (__cdecl* terminate_function)(void);








     __declspec(noreturn) void __cdecl abort();
     __declspec(noreturn) void __cdecl terminate() throw();

    

         terminate_handler __cdecl set_terminate(
              terminate_handler _NewTerminateHandler
            ) throw();

         terminate_handler __cdecl _get_terminate();

    #line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_terminate.h"

#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_terminate.h"

} __pragma(pack(pop))

#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_terminate.h"

#pragma warning(pop) 
#line 13 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\eh.h"



#pragma warning(push)
#pragma warning(disable:   4514 4820 )

__pragma(pack(push, 8)) extern "C" {



typedef void (__cdecl* unexpected_handler )(void);
typedef void (__cdecl* unexpected_function)(void);






struct _EXCEPTION_POINTERS;



     __declspec(noreturn) void __cdecl unexpected() noexcept(false);

    

         unexpected_handler __cdecl set_unexpected(
              unexpected_handler _NewUnexpectedHandler
            ) noexcept;

         unexpected_handler __cdecl _get_unexpected() noexcept;

        typedef void (__cdecl* _se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);

         _se_translator_function __cdecl _set_se_translator(
              _se_translator_function _NewSETranslator
            );

    #line 52 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\eh.h"

    class type_info;

     int __cdecl _is_exception_typeof(
          type_info const&     _Type,
          _EXCEPTION_POINTERS* _ExceptionPtr
        );

     bool __cdecl __uncaught_exception();
     int  __cdecl __uncaught_exceptions();

#line 64 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\eh.h"

} __pragma(pack(pop))

#pragma warning(pop) 

#line 70 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\eh.h"
#line 11 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime_exception.h"







#pragma warning(push)
#pragma warning(disable:   4514 4820 )

#pragma pack(push, 8)

__pragma(pack(push, 8)) extern "C" {

struct __std_exception_data
{
    char const* _What;
    bool        _DoFree;
};

 void __cdecl __std_exception_copy(
       __std_exception_data const* _From,
      __std_exception_data*       _To
    );

 void __cdecl __std_exception_destroy(
      __std_exception_data* _Data
    );

} __pragma(pack(pop))



namespace std {

#pragma warning(push)
#pragma warning(disable: 4577) 
class exception
{
public:

    exception() noexcept
        : _Data()
    {
    }

    explicit exception(char const* const _Message) noexcept
        : _Data()
    {
        __std_exception_data _InitData = { _Message, true };
        __std_exception_copy(&_InitData, &_Data);
    }

    exception(char const* const _Message, int) noexcept
        : _Data()
    {
        _Data._What = _Message;
    }

    exception(exception const& _Other) noexcept
        : _Data()
    {
        __std_exception_copy(&_Other._Data, &_Data);
    }

    exception& operator=(exception const& _Other) noexcept
    {
        if (this == &_Other)
        {
            return *this;
        }

        __std_exception_destroy(&_Data);
        __std_exception_copy(&_Other._Data, &_Data);
        return *this;
    }

    virtual ~exception() noexcept
    {
        __std_exception_destroy(&_Data);
    }

    [[nodiscard]] virtual char const* what() const
    {
        return _Data._What ? _Data._What : "Unknown exception";
    }

private:

    __std_exception_data _Data;
};

class bad_exception
    : public exception
{
public:

    bad_exception() noexcept
        : exception("bad exception", 1)
    {
    }
};

class bad_alloc
    : public exception
{
public:

    bad_alloc() noexcept
        : exception("bad allocation", 1)
    {
    }

private:

    friend class bad_array_new_length;

    bad_alloc(char const* const _Message) noexcept
        : exception(_Message, 1)
    {
    }
};

class bad_array_new_length
    : public bad_alloc
{
public:

    bad_array_new_length() noexcept
        : bad_alloc("bad array new length")
    {
    }
};

#pragma warning(pop)

} 

#pragma pack(pop)

#pragma warning(pop) 
#line 153 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\vcruntime_exception.h"
#line 34 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\exception"

namespace std {

using ::terminate;


using ::set_terminate;
using ::terminate_handler;

[[nodiscard]] inline terminate_handler __cdecl get_terminate() noexcept { 
    return _get_terminate();
}
#line 47 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\exception"


using ::unexpected;


using ::set_unexpected;
using ::unexpected_handler;

[[nodiscard]] inline unexpected_handler __cdecl get_unexpected() noexcept { 
    return _get_unexpected();
}
#line 59 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\exception"
#line 60 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\exception"

}








































































































































#line 199 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\exception"

 void __cdecl __ExceptionPtrCreate(  void*) noexcept;
 void __cdecl __ExceptionPtrDestroy(  void*) noexcept;
 void __cdecl __ExceptionPtrCopy(  void*,   const void*) noexcept;
 void __cdecl __ExceptionPtrAssign(  void*,   const void*) noexcept;
 bool __cdecl __ExceptionPtrCompare(  const void*,   const void*) noexcept;
 bool __cdecl __ExceptionPtrToBool(  const void*) noexcept;
 void __cdecl __ExceptionPtrSwap(  void*,   void*) noexcept;
 void __cdecl __ExceptionPtrCurrentException(void*) noexcept;
[[noreturn]]  void __cdecl __ExceptionPtrRethrow(  const void*);
 void __cdecl __ExceptionPtrCopyException(
      void*,   const void*,   const void*) noexcept;

namespace std {

class exception_ptr {
public:
    exception_ptr() noexcept {
        __ExceptionPtrCreate(this);
    }

    exception_ptr(nullptr_t) noexcept {
        __ExceptionPtrCreate(this);
    }

    ~exception_ptr() noexcept {
        __ExceptionPtrDestroy(this);
    }

    exception_ptr(const exception_ptr& _Rhs) noexcept {
        __ExceptionPtrCopy(this, &_Rhs);
    }

    exception_ptr& operator=(const exception_ptr& _Rhs) noexcept {
        __ExceptionPtrAssign(this, &_Rhs);
        return *this;
    }

    exception_ptr& operator=(nullptr_t) noexcept {
        exception_ptr _Ptr;
        __ExceptionPtrAssign(this, &_Ptr);
        return *this;
    }

    explicit operator bool() const noexcept {
        return __ExceptionPtrToBool(this);
    }

    static exception_ptr _Current_exception() noexcept {
        exception_ptr _Retval;
        __ExceptionPtrCurrentException(&_Retval);
        return _Retval;
    }

    static exception_ptr _Copy_exception(  void* _Except,   const void* _Ptr) {
        exception_ptr _Retval;
        if (!_Ptr) {
            
            return _Retval;
        }
        __ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
        return _Retval;
    }

    friend void swap(exception_ptr& _Lhs, exception_ptr& _Rhs) noexcept {
        __ExceptionPtrSwap(&_Lhs, &_Rhs);
    }

    [[nodiscard]] friend bool operator==(const exception_ptr& _Lhs, const exception_ptr& _Rhs) noexcept {
        return __ExceptionPtrCompare(&_Lhs, &_Rhs);
    }

    [[nodiscard]] friend bool operator==(nullptr_t, const exception_ptr& _Rhs) noexcept {
        return !_Rhs;
    }

    [[nodiscard]] friend bool operator==(const exception_ptr& _Lhs, nullptr_t) noexcept {
        return !_Lhs;
    }

    [[nodiscard]] friend bool operator!=(const exception_ptr& _Lhs, const exception_ptr& _Rhs) noexcept {
        return !(_Lhs == _Rhs);
    }

    [[nodiscard]] friend bool operator!=(nullptr_t _Lhs, const exception_ptr& _Rhs) noexcept {
        return !(_Lhs == _Rhs);
    }

    [[nodiscard]] friend bool operator!=(const exception_ptr& _Lhs, nullptr_t _Rhs) noexcept {
        return !(_Lhs == _Rhs);
    }

private:




    void* _Data1;
    void* _Data2;



};

[[nodiscard]] inline exception_ptr current_exception() noexcept {
    return exception_ptr::_Current_exception();
}

[[noreturn]] inline void rethrow_exception(  exception_ptr _Ptr) {
    __ExceptionPtrRethrow(&_Ptr);
}

template <class _Ex>
void* __GetExceptionInfo(_Ex);

template <class _Ex>
[[nodiscard]] exception_ptr make_exception_ptr(_Ex _Except) noexcept {
    return exception_ptr::_Copy_exception(::std:: addressof(_Except), __GetExceptionInfo(_Except));
}


[[noreturn]] inline void _Throw_bad_array_new_length() {
    throw bad_array_new_length{};
}


class nested_exception { 
public:
    nested_exception() noexcept : _Exc(::std:: current_exception()) {}

    nested_exception(const nested_exception&) noexcept = default;
    nested_exception& operator=(const nested_exception&) noexcept = default;
    virtual ~nested_exception() noexcept {}

    [[noreturn]] void rethrow_nested() const { 
        if (_Exc) {
            ::std:: rethrow_exception(_Exc);
        } else {
            ::std:: terminate();
        }
    }

    [[nodiscard]] exception_ptr nested_ptr() const noexcept { 
        return _Exc;
    }

private:
    exception_ptr _Exc;
};


template <class _Ty, class _Uty>
struct _With_nested : _Uty, nested_exception { 
    explicit _With_nested(_Ty&& _Arg)
        : _Uty(::std:: forward<_Ty>(_Arg)), nested_exception() {} 
};

template <class _Ty>
[[noreturn]] void throw_with_nested(_Ty&& _Arg) { 
    using _Uty = decay_t<_Ty>;

    if constexpr (is_class_v<_Uty> && !is_base_of_v<nested_exception, _Uty> && !is_final_v<_Uty>) {
        
        using _Glued = _With_nested<_Ty, _Uty>;
        throw _Glued(::std:: forward<_Ty>(_Arg));
    } else {
        
        throw ::std:: forward<_Ty>(_Arg);
    }
}



template <class _Ty>
void _Rethrow_if_nested(const _Ty* _Ptr, true_type) { 
    const auto _Nested = dynamic_cast<const nested_exception*>(_Ptr);

    if (_Nested) {
        _Nested->rethrow_nested();
    }
}

template <class _Ty>
void _Rethrow_if_nested(const _Ty*, false_type) {} 

template <class _Ty>
void rethrow_if_nested(const _Ty& _Arg) { 
    bool_constant<
        is_polymorphic_v<_Ty> && (!is_base_of_v<nested_exception, _Ty> || is_convertible_v<_Ty*, nested_exception*>)>
        _Tag;

    _Rethrow_if_nested(::std:: addressof(_Arg), _Tag);
}



#line 396 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\exception"

}



#pragma warning(pop)
#pragma pack(pop)

#line 405 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\exception"
#line 406 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\exception"
#line 12 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\new"


#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294  4984  )




namespace std {
























#line 47 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\new"




using new_handler = void(__cdecl*)();
#line 53 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\new"


 new_handler __cdecl set_new_handler(  new_handler) noexcept;
[[nodiscard]]  new_handler __cdecl get_new_handler() noexcept;
}



#pragma warning(pop)
#pragma pack(pop)

#line 65 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\new"
#line 66 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\new"
#line 112 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"
#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"






#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"



#line 124 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"

extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl operator new( size_t, void*) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl operator new[]( size_t, void*) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete(void*, void*) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete[](void*, void*) throw();

extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete(void*,  size_t) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete[](void*,  size_t) throw();
#line 133 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"
#line 134 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"









#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_stdio_config.h"







#pragma once



#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {



#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_stdio_config.h"




#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_stdio_config.h"
    
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_stdio_config.h"


    
        
    



#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_stdio_config.h"
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_stdio_config.h"














    








#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_stdio_config.h"




#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_stdio_config.h"

    
        


            #pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
        #line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_stdio_config.h"
    #line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_stdio_config.h"
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_stdio_config.h"






#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_stdio_config.h"


    
    
       
    
    __declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_printf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }

    
    
       
    
    __declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_scanf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_stdio_config.h"



#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_stdio_config.h"




















} __pragma(pack(pop))

#pragma warning(pop) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {







    
    typedef struct _iobuf
    {
        void* _Placeholder;
    } FILE;
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

 FILE* __cdecl __acrt_iob_func(unsigned _Ix);










    
    
    
    
    
    
     wint_t __cdecl fgetwc(
          FILE* _Stream
        );

    
     wint_t __cdecl _fgetwchar(void);

    
     wint_t __cdecl fputwc(
             wchar_t _Character,
          FILE*   _Stream);

    
     wint_t __cdecl _fputwchar(
          wchar_t _Character
        );

     
     wint_t __cdecl getwc(
          FILE* _Stream
        );

     
     wint_t __cdecl getwchar(void);


    
     
     wchar_t* __cdecl fgetws(
          wchar_t* _Buffer,
                                  int      _BufferCount,
                               FILE*    _Stream
        );

    
     int __cdecl fputws(
           wchar_t const* _Buffer,
          FILE*          _Stream
        );

    
     
     wchar_t* __cdecl _getws_s(
          wchar_t* _Buffer,
                                  size_t   _BufferCount
        );

    extern "C++" { template <size_t _Size> inline   wchar_t* __cdecl _getws_s( wchar_t (&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
     wint_t __cdecl putwc(
             wchar_t _Character,
          FILE*   _Stream
        );

    
     wint_t __cdecl putwchar(
          wchar_t _Character
        );

    
     int __cdecl _putws(
          wchar_t const* _Buffer
        );

    
     wint_t __cdecl ungetwc(
             wint_t _Character,
          FILE*  _Stream
        );

     
     FILE * __cdecl _wfdopen(
            int            _FileHandle,
          wchar_t const* _Mode
        );

      
     FILE* __cdecl _wfopen(
          wchar_t const* _FileName,
          wchar_t const* _Mode
        );

    
     errno_t __cdecl _wfopen_s(
          FILE**         _Stream,
                             wchar_t const* _FileName,
                             wchar_t const* _Mode
        );

     
    
     FILE* __cdecl _wfreopen(
           wchar_t const* _FileName,
           wchar_t const* _Mode,
          FILE*          _OldStream
        );

    
     errno_t __cdecl _wfreopen_s(
          FILE**         _Stream,
                             wchar_t const* _FileName,
                             wchar_t const* _Mode,
                            FILE*          _OldStream
        );

     
     FILE* __cdecl _wfsopen(
          wchar_t const* _FileName,
          wchar_t const* _Mode,
            int            _ShFlag
        );

     void __cdecl _wperror(
          wchar_t const* _ErrorMessage
        );

    

         
         FILE* __cdecl _wpopen(
              wchar_t const* _Command,
              wchar_t const* _Mode
            );

    #line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     int __cdecl _wremove(
          wchar_t const* _FileName
        );

    
    

     
     __declspec(allocator) wchar_t* __cdecl _wtempnam(
          wchar_t const* _Directory,
          wchar_t const* _FilePrefix
        );

    

     
    
     errno_t __cdecl _wtmpnam_s(
          wchar_t* _Buffer,
                                  size_t   _BufferCount
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wtmpnam_s( wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

       wchar_t* __cdecl _wtmpnam(  wchar_t *_Buffer);
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"



    
    
    
    
    
    
     wint_t __cdecl _fgetwc_nolock(
          FILE* _Stream
        );

    
     wint_t __cdecl _fputwc_nolock(
             wchar_t _Character,
          FILE*   _Stream
        );

    
     wint_t __cdecl _getwc_nolock(
          FILE* _Stream
        );

    
     wint_t __cdecl _putwc_nolock(
             wchar_t _Character,
          FILE*   _Stream
        );

    
     wint_t __cdecl _ungetwc_nolock(
             wint_t _Character,
          FILE*  _Stream
        );

    



#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"



    
    





    
    
    
    
    
    
     int __cdecl __stdio_common_vfwprintf(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
     int __cdecl __stdio_common_vfwprintf_s(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
     int __cdecl __stdio_common_vfwprintf_p(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __inline int __cdecl _vfwprintf_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl vfwprintf(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 322 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_l(_Stream, _Format, 0, _ArgList);
    }
    #line 326 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vfwprintf_s_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 337 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl vfwprintf_s(
                                    FILE*          const _Stream,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
        }
    #line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    #line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vfwprintf_p_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 370 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vfwprintf_p(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 384 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
    }
    #line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 402 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl vwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
    #line 415 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl vwprintf_s(
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        }
    #line 444 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    #line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 456 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 460 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwprintf_p(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
    #line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwprintf_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 483 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl fwprintf(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)
    

#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 510 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwprintf_s_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl fwprintf_s(
                                    FILE*          const _Stream,
                wchar_t const* const _Format,
            ...)
    

#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    #line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwprintf_p_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 570 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwprintf_p(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)
    

#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 588 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 606 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl wprintf(
            wchar_t const* const _Format,
        ...)
    

#line 614 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 623 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 632 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 641 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl wprintf_s(
                wchar_t const* const _Format,
            ...)
    

#line 651 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 660 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    #line 662 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 680 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wprintf_p(
            wchar_t const* const _Format,
        ...)
    

#line 688 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 697 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"


    
    
    
    
    
    
     int __cdecl __stdio_common_vfwscanf(
                                            unsigned __int64 _Options,
                                         FILE*            _Stream,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

    
    __inline int __cdecl _vfwscanf_l(
          FILE*                                const _Stream,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 723 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ()),
            _Stream, _Format, _Locale, _ArgList);
    }
    #line 729 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl vfwscanf(
          FILE*                                const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 739 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_l(_Stream, _Format, 0, _ArgList);
    }
    #line 743 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vfwscanf_s_l(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 754 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Stream, _Format, _Locale, _ArgList);
    }
    #line 760 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl vfwscanf_s(
                                    FILE*          const _Stream,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 772 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
        }
    #line 776 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    #line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    __inline int __cdecl _vwscanf_l(
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 787 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }
    #line 791 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl vwscanf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 800 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }
    #line 804 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwscanf_s_l(
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 814 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }
    #line 818 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl vwscanf_s(
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 829 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        }
    #line 833 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    #line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    __inline int __cdecl _fwscanf_l(
                                         FILE*          const _Stream,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)
    

#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 854 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

      
    __inline int __cdecl fwscanf(
                               FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)
    

#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 872 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwscanf_s_l(
                                           FILE*          const _Stream,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    

#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl fwscanf_s(
                                     FILE*          const _Stream,
                wchar_t const* const _Format,
            ...)
    

#line 902 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 911 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    #line 913 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    __inline int __cdecl _wscanf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)
    

#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 931 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

      
    __inline int __cdecl wscanf(
            wchar_t const* const _Format,
        ...)
    

#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 948 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wscanf_s_l(
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    

#line 957 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 966 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl wscanf_s(
                wchar_t const* const _Format,
            ...)
    

#line 976 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 985 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    #line 987 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"



    
    
    
    
    
    
        



    

#line 1003 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
     int __cdecl __stdio_common_vswprintf(
                                             unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                             size_t           _BufferCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    
     int __cdecl __stdio_common_vswprintf_s(
                                             unsigned __int64 _Options,
                     wchar_t*         _Buffer,
                                             size_t           _BufferCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    
     int __cdecl __stdio_common_vsnwprintf_s(
                                             unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                             size_t           _BufferCount,
                                             size_t           _MaxCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    
     int __cdecl __stdio_common_vswprintf_p(
                                             unsigned __int64 _Options,
                     wchar_t*         _Buffer,
                                             size_t           _BufferCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     
    __inline int __cdecl _vsnwprintf_l(
            wchar_t*       const _Buffer,
                                                  size_t         const _BufferCount,
                 wchar_t const* const _Format,
                                              _locale_t      const _Locale,
                                                     va_list              _ArgList
        )
    

#line 1061 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1069 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vsnwprintf_s_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
                                                          va_list              _ArgList
        )
    

#line 1083 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vsnwprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1091 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vsnwprintf_s(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
        )
    

#line 1104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }
    #line 1108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     __inline   int __cdecl _snwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, ...);  __inline   int __cdecl _vsnwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, va_list _Args);
#line 1117 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vsnwprintf(
            wchar_t*       _Buffer,
                                                  size_t         _BufferCount,
                           wchar_t const* _Format,
                                                     va_list        _ArgList
        )
    

#line 1129 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
    #line 1133 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    extern "C++" { template <size_t _Size> inline   int __cdecl _vsnwprintf_s( wchar_t (&_Buffer)[_Size],   size_t _BufferCount,     wchar_t const* _Format, va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1142 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_c_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
                                                          va_list              _ArgList
        )
    

#line 1155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1163 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_c(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
        )
    

#line 1175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
    #line 1179 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
                                                          va_list              _ArgList
        )
    

#line 1192 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }
    #line 1196 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl __vswprintf_l(
                  wchar_t*       const _Buffer,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 1208 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 1212 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf(
           wchar_t*       const _Buffer,
               wchar_t const* const _Format,
                                         va_list              _ArgList
        )
    

#line 1223 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
    }
    #line 1227 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl vswprintf(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                          va_list              _ArgList
        )
    

#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
    #line 1243 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_s_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
                                                      va_list              _ArgList
        )
    

#line 1256 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1264 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    

         
        __inline int __cdecl vswprintf_s(
               wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
            )
    

#line 1277 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        }
    #line 1281 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    #line 1283 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    extern "C++" { template <size_t _Size> inline   int __cdecl vswprintf_s( wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1291 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_p_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
                                                      va_list              _ArgList
        )
    

#line 1304 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1312 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_p(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                            wchar_t const* const _Format,
                                                      va_list              _ArgList
        )
    

#line 1324 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
    #line 1328 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vscwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 1339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vscwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 1357 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vscwprintf_l(_Format, 0, _ArgList);
    }
    #line 1361 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vscwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 1372 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1380 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vscwprintf_p(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 1390 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vscwprintf_p_l(_Format, 0, _ArgList);
    }
    #line 1394 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl __swprintf_l(
                  wchar_t*       const _Buffer,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 1405 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1414 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
        ...)
    

#line 1426 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1435 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf(
           wchar_t*       const _Buffer,
               wchar_t const* const _Format,
        ...)
    

#line 1445 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1454 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl swprintf(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
        ...)
    

#line 1465 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1474 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     __inline   int __cdecl __swprintf_l(   wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, ...);  __inline   int __cdecl __vswprintf_l(   wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, va_list _Args);
#line 1483 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     __inline   int __cdecl _swprintf(   wchar_t *_Buffer,     wchar_t const* _Format, ...);  __inline   int __cdecl _vswprintf(   wchar_t *_Buffer,     wchar_t const* _Format, va_list _Args);
#line 1490 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_s_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
        ...)
    

#line 1502 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1511 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    

         
        __inline int __cdecl swprintf_s(
               wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
            ...)
    

#line 1523 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1532 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    #line 1534 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    extern "C++" { template <size_t _Size> inline   int __cdecl swprintf_s( wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1541 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_p_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
        ...)
    

#line 1553 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1562 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_p(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                            wchar_t const* const _Format,
        ...)
    

#line 1573 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1582 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_c_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
        ...)
    

#line 1594 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1603 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_c(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
        ...)
    

#line 1614 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1623 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _snwprintf_l(
            wchar_t*       const _Buffer,
                                                  size_t         const _BufferCount,
                 wchar_t const* const _Format,
                                              _locale_t      const _Locale,
        ...)
    

#line 1635 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1646 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwprintf(
            wchar_t*       _Buffer,
                                                  size_t         _BufferCount,
                           wchar_t const* _Format,
        ...)
    

#line 1657 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1668 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwprintf_s_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
        ...)
    

#line 1681 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1690 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwprintf_s(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                                wchar_t const* const _Format,
        ...)
    

#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1711 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    extern "C++" { template <size_t _Size> inline   int __cdecl _snwprintf_s( wchar_t (&_Buffer)[_Size],   size_t _BufferCount,     wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1719 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    __inline int __cdecl _scwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 1728 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1737 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _scwprintf(
            wchar_t const* const _Format,
        ...)
    

#line 1746 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscwprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1755 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _scwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 1765 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1774 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _scwprintf_p(
            wchar_t const* const _Format,
        ...)
    

#line 1783 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscwprintf_p_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1792 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"


    
        
        
        #pragma warning(push)
        #pragma warning(disable: 4141 6054)

        

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) 
            inline int swprintf(
                           wchar_t*       const _Buffer,
                    wchar_t const* const _Format,
                ...) throw()
            {
                int _Result;
                va_list _ArgList;
                ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
                _Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList);
                ((void)(_ArgList = (va_list)0));
                return _Result;
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) 
            inline int __cdecl vswprintf(
                           wchar_t*       const _Buffer,
                    wchar_t const* const _Format,
                                              va_list              _ArgList
                ) throw()
            {
                return vswprintf(_Buffer, 2147483647, _Format, _ArgList);
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) 
            inline int _swprintf_l(
                                     wchar_t*       const _Buffer,
                    wchar_t const* const _Format,
                                                 _locale_t      const _Locale,
                ...) throw()
            {
                int _Result;
                va_list _ArgList;
                ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
                _Result = _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
                ((void)(_ArgList = (va_list)0));
                return _Result;
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) 
            inline int __cdecl _vswprintf_l(
                                     wchar_t*       const _Buffer,
                    wchar_t const* const _Format,
                                                 _locale_t      const _Locale,
                                                        va_list              _ArgList
                ) throw()
            {
                return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
            }

        #line 1853 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

        #pragma warning(pop)
    #line 1856 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    




#line 1863 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"


    
    
    
    
    
     
     int __cdecl __stdio_common_vswscanf(
                                            unsigned __int64 _Options,
                  wchar_t const*   _Buffer,
                                            size_t           _BufferCount,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

     
    
    __inline int __cdecl _vswscanf_l(
                                 wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 1891 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 1897 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl vswscanf(
                                 wchar_t const* _Buffer,
            wchar_t const* _Format,
                                      va_list        _ArgList
        )
    

#line 1908 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswscanf_l(_Buffer, _Format, 0, _ArgList);
    }
    #line 1912 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswscanf_s_l(
                                 wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 1924 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 1930 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    

         
        
        __inline int __cdecl vswscanf_s(
                                     wchar_t const* const _Buffer,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 1943 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
        }
    #line 1947 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    #line 1949 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    extern "C++" { template <size_t _Size> inline   int __cdecl vswscanf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _ArgList) throw() { return vswscanf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1957 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vsnwscanf_l(
                  wchar_t const* const _Buffer,
                                            size_t         const _BufferCount,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                               va_list              _ArgList
        )
    

#line 1970 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }
    #line 1976 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vsnwscanf_s_l(
                    wchar_t const* const _Buffer,
                                              size_t         const _BufferCount,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
                                                 va_list              _ArgList
        )
    

#line 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }
    #line 1995 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _swscanf_l(
                                          wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                                        _locale_t            _Locale,
        ...)
    

#line 2006 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2015 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
      
    __inline int __cdecl swscanf(
                                wchar_t const* const _Buffer,
            wchar_t const* const _Format,
        ...)
    

#line 2025 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2034 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swscanf_s_l(
                                            wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    

#line 2045 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2054 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    

         
        
        __inline int __cdecl swscanf_s(
                                      wchar_t const* const _Buffer,
                wchar_t const* const _Format,
            ...)
    

#line 2066 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 2075 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    #line 2077 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _snwscanf_l(
                  wchar_t const* const _Buffer,
                                            size_t         const _BufferCount,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)
    

#line 2089 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2100 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _snwscanf(
            wchar_t const* const _Buffer,
                                      size_t         const _BufferCount,
                wchar_t const* const _Format,
        ...)
    

#line 2111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2122 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwscanf_s_l(
                    wchar_t const* const _Buffer,
                                              size_t         const _BufferCount,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    

#line 2134 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2143 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwscanf_s(
             wchar_t const* const _Buffer,
                                       size_t         const _BufferCount,
               wchar_t const* const _Format,
        ...)
    

#line 2154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2163 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

    


#line 2168 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\corecrt_wstdio.h"

} __pragma(pack(pop))

#pragma warning(pop) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {































    
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"















    
    
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"


typedef __int64 fpos_t;





    
     errno_t __cdecl _get_stream_buffer_pointers(
               FILE*   _Stream,
          char*** _Base,
          char*** _Pointer,
          int**   _Count
        );


    
    
    
    
    
    

        
         errno_t __cdecl clearerr_s(
              FILE* _Stream
            );

        
         
         errno_t __cdecl fopen_s(
              FILE**      _Stream,
                                     char const* _FileName,
                                     char const* _Mode
            );

        
         
         size_t __cdecl fread_s(
                void*  _Buffer,
                                    size_t _BufferSize,
                                                                            size_t _ElementSize,
                                                                            size_t _ElementCount,
                                                                         FILE*  _Stream
            );

        
         errno_t __cdecl freopen_s(
              FILE**      _Stream,
                                 char const* _FileName,
                                 char const* _Mode,
                                FILE*       _OldStream
            );

         
         char* __cdecl gets_s(
              char*   _Buffer,
                               rsize_t _Size
            );

        
         errno_t __cdecl tmpfile_s(
                FILE** _Stream
            );

         
        
         errno_t __cdecl tmpnam_s(
              char*   _Buffer,
                               rsize_t _Size
            );

    #line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     void __cdecl clearerr(
          FILE* _Stream
        );

     
    
     int __cdecl fclose(
          FILE* _Stream
        );

    
     int __cdecl _fcloseall(void);

     
     FILE* __cdecl _fdopen(
            int         _FileHandle,
          char const* _Mode
        );

     
     int __cdecl feof(
          FILE* _Stream
        );

     
     int __cdecl ferror(
          FILE* _Stream
        );

    
     int __cdecl fflush(
          FILE* _Stream
        );

     
    
     int __cdecl fgetc(
          FILE* _Stream
        );

    
     int __cdecl _fgetchar(void);

     
    
     int __cdecl fgetpos(
          FILE*   _Stream,
            fpos_t* _Position
        );

     
    
     char* __cdecl fgets(
          char* _Buffer,
                               int   _MaxCount,
                            FILE* _Stream
        );

     
     int __cdecl _fileno(
          FILE* _Stream
        );

    
     int __cdecl _flushall(void);

      
     FILE* __cdecl fopen(
          char const* _FileName,
          char const* _Mode
        );


     
    
     int __cdecl fputc(
             int   _Character,
          FILE* _Stream
        );

    
     int __cdecl _fputchar(
          int _Character
        );

     
    
     int __cdecl fputs(
           char const* _Buffer,
          FILE*       _Stream
        );

    
     size_t __cdecl fread(
          void*  _Buffer,
                                                      size_t _ElementSize,
                                                      size_t _ElementCount,
                                                   FILE*  _Stream
        );

     
      
     FILE* __cdecl freopen(
           char const* _FileName,
           char const* _Mode,
          FILE*       _Stream
        );

     
     FILE* __cdecl _fsopen(
          char const* _FileName,
          char const* _Mode,
            int         _ShFlag
        );

     
    
     int __cdecl fsetpos(
          FILE*         _Stream,
             fpos_t const* _Position
        );

     
    
     int __cdecl fseek(
          FILE* _Stream,
             long  _Offset,
             int   _Origin
        );

     
    
     int __cdecl _fseeki64(
          FILE*   _Stream,
             __int64 _Offset,
             int     _Origin
        );

     
     
     long __cdecl ftell(
          FILE* _Stream
        );

     
     
     __int64 __cdecl _ftelli64(
          FILE* _Stream
        );

    
     size_t __cdecl fwrite(
          void const* _Buffer,
                                                    size_t      _ElementSize,
                                                    size_t      _ElementCount,
                                                 FILE*       _Stream
        );

     
     
     int __cdecl getc(
          FILE* _Stream
        );

     
     int __cdecl getchar(void);

     
     int __cdecl _getmaxstdio(void);

    extern "C++" { template <size_t _Size> inline char* __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
     int __cdecl _getw(
          FILE* _Stream
        );

     void __cdecl perror(
          char const* _ErrorMessage
        );

    

         
        
         int __cdecl _pclose(
              FILE* _Stream
            );

         
         FILE* __cdecl _popen(
              char const* _Command,
              char const* _Mode
            );

    #line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
     int __cdecl putc(
             int   _Character,
          FILE* _Stream
        );

    
     int __cdecl putchar(
          int _Character
        );

    
     int __cdecl puts(
          char const* _Buffer
        );

     
    
     int __cdecl _putw(
             int   _Word,
          FILE* _Stream
        );

     int __cdecl remove(
          char const* _FileName
        );

     
     int __cdecl rename(
          char const* _OldFileName,
          char const* _NewFileName
        );

     int __cdecl _unlink(
          char const* _FileName
        );

    

        
         int __cdecl unlink(
              char const* _FileName
            );

    #line 391 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     void __cdecl rewind(
          FILE* _Stream
        );

    
     int __cdecl _rmtmp(void);

    
     void __cdecl setbuf(
                                                      FILE* _Stream,
            char* _Buffer
        );

    
     int __cdecl _setmaxstdio(
          int _Maximum
        );

     
    
     int __cdecl setvbuf(
                               FILE*  _Stream,
            char*  _Buffer,
                                  int    _Mode,
                                  size_t _Size
        );

    


#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
     __declspec(allocator) char* __cdecl _tempnam(
          char const* _DirectoryName,
          char const* _FilePrefix
        );

    

#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

      
     FILE* __cdecl tmpfile(void);

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl tmpnam_s( char (&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }
#line 442 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

   char* __cdecl tmpnam(  char *_Buffer);
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
     int __cdecl ungetc(
             int   _Character,
          FILE* _Stream
        );



    
    
    
    
    
     void __cdecl _lock_file(
          FILE* _Stream
        );

     void __cdecl _unlock_file(
          FILE* _Stream
        );

     
    
     int __cdecl _fclose_nolock(
          FILE* _Stream
        );

     
    
     int __cdecl _fflush_nolock(
          FILE* _Stream
        );

     
    
     int __cdecl _fgetc_nolock(
          FILE* _Stream
        );

     
    
     int __cdecl _fputc_nolock(
             int   _Character,
          FILE* _Stream
        );

    
     size_t __cdecl _fread_nolock(
          void*  _Buffer,
                                                      size_t _ElementSize,
                                                      size_t _ElementCount,
                                                   FILE*  _Stream
        );

    
     
     size_t __cdecl _fread_nolock_s(
          void*  _Buffer,
                              size_t _BufferSize,
                                                                      size_t _ElementSize,
                                                                      size_t _ElementCount,
                                                                   FILE*  _Stream
        );

    
     int __cdecl _fseek_nolock(
          FILE* _Stream,
             long  _Offset,
             int   _Origin
        );

    
     int __cdecl _fseeki64_nolock(
          FILE*   _Stream,
             __int64 _Offset,
             int     _Origin
        );

     
     long __cdecl _ftell_nolock(
          FILE* _Stream
        );

     
     __int64 __cdecl _ftelli64_nolock(
          FILE* _Stream
        );

    
     size_t __cdecl _fwrite_nolock(
          void const* _Buffer,
                                                    size_t      _ElementSize,
                                                    size_t      _ElementCount,
                                                 FILE*       _Stream
        );

    
     int __cdecl _getc_nolock(
          FILE* _Stream
        );

    
     int __cdecl _putc_nolock(
             int   _Character,
          FILE* _Stream
        );

    
     int __cdecl _ungetc_nolock(
             int   _Character,
          FILE* _Stream
        );

    
    
    
    



    














#line 586 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"



     int* __cdecl __p__commode(void);

    


        
    #line 596 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"



    
    

#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    
    
    
    
     int __cdecl __stdio_common_vfprintf(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     int __cdecl __stdio_common_vfprintf_s(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     int __cdecl __stdio_common_vfprintf_p(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __inline int __cdecl _vfprintf_l(
           FILE*       const _Stream,
            char const* const _Format,
          _locale_t   const _Locale,
                 va_list           _ArgList
        )
    

#line 644 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 648 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vfprintf(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 658 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vfprintf_l(_Stream, _Format, 0, _ArgList);
    }
    #line 662 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vfprintf_s_l(
           FILE*       const _Stream,
            char const* const _Format,
          _locale_t   const _Locale,
                 va_list           _ArgList
        )
    

#line 673 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl vfprintf_s(
                                    FILE*       const _Stream,
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 689 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
        {
            return _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
        }
    #line 693 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    #line 695 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vfprintf_p_l(
           FILE*       const _Stream,
            char const* const _Format,
          _locale_t   const _Locale,
                 va_list           _ArgList
        )
    

#line 706 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 710 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vfprintf_p(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 720 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
    }
    #line 724 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vprintf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 738 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vprintf(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 747 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
    #line 751 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vprintf_s_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 761 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 765 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl vprintf_s(
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 776 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
        {
            return _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        }
    #line 780 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    #line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vprintf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 792 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 796 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vprintf_p(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 805 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
    #line 809 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _fprintf_l(
                                          FILE*       const _Stream,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 819 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 828 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl fprintf(
                                FILE*       const _Stream,
            char const* const _Format,
        ...)
    

#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 846 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     int __cdecl _set_printf_count_output(
          int _Value
        );

     int __cdecl _get_printf_count_output(void);

    
    __inline int __cdecl _fprintf_s_l(
                                          FILE*       const _Stream,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 871 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl fprintf_s(
                                    FILE*       const _Stream,
                char const* const _Format,
            ...)
    

#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    #line 893 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _fprintf_p_l(
                                          FILE*       const _Stream,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 912 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _fprintf_p(
                                FILE*       const _Stream,
            char const* const _Format,
        ...)
    

#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 930 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _printf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 948 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl printf(
            char const* const _Format,
        ...)
    

#line 956 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 965 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _printf_s_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 974 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 983 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl printf_s(
                char const* const _Format,
            ...)
    

#line 993 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1002 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    #line 1004 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _printf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 1013 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1022 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _printf_p(
            char const* const _Format,
        ...)
    

#line 1030 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1039 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"


    
    
    
    
    
     int __cdecl __stdio_common_vfscanf(
                                            unsigned __int64 _Options,
                                         FILE*            _Stream,
            char const*      _Format,
                                        _locale_t        _Locale,
                                               va_list          _Arglist
        );

    
    __inline int __cdecl _vfscanf_l(
                                FILE*       const _Stream,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 1064 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ()),
            _Stream, _Format, _Locale, _ArgList);
    }
    #line 1070 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vfscanf(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 1080 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vfscanf_l(_Stream, _Format, 0, _ArgList);
    }
    #line 1084 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vfscanf_s_l(
                                FILE*       const _Stream,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Stream, _Format, _Locale, _ArgList);
    }
    #line 1101 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"


    

        
        __inline int __cdecl vfscanf_s(
                                    FILE*       const _Stream,
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 1114 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
        {
            return _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
        }
    #line 1118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    #line 1120 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vscanf_l(
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 1130 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }
    #line 1134 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vscanf(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 1143 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }
    #line 1147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vscanf_s_l(
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 1157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }
    #line 1161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl vscanf_s(
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 1172 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
        {
            return _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        }
    #line 1176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    #line 1178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _fscanf_l(
                                         FILE*       const _Stream,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    

#line 1188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1197 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

      
    __inline int __cdecl fscanf(
                               FILE*       const _Stream,
            char const* const _Format,
        ...)
    

#line 1206 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1215 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _fscanf_s_l(
                                           FILE*       const _Stream,
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    

#line 1225 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl fscanf_s(
                                     FILE*       const _Stream,
                char const* const _Format,
            ...)
    

#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    #line 1256 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _scanf_l(
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    

#line 1265 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1274 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

      
    __inline int __cdecl scanf(
            char const* const _Format,
        ...)
    

#line 1282 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1291 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _scanf_s_l(
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    

#line 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl scanf_s(
                char const* const _Format,
            ...)
    

#line 1319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1328 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    #line 1330 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"



    
    
    
    
    
     
     int __cdecl __stdio_common_vsprintf(
                                             unsigned __int64 _Options,
                 char*            _Buffer,
                                             size_t           _BufferCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     int __cdecl __stdio_common_vsprintf_s(
                                             unsigned __int64 _Options,
                     char*            _Buffer,
                                             size_t           _BufferCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     int __cdecl __stdio_common_vsnprintf_s(
                                             unsigned __int64 _Options,
                 char*            _Buffer,
                                             size_t           _BufferCount,
                                             size_t           _MaxCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     int __cdecl __stdio_common_vsprintf_p(
                                             unsigned __int64 _Options,
                     char*            _Buffer,
                                             size_t           _BufferCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     
    __inline int __cdecl _vsnprintf_l(
            char*       const _Buffer,
                                                  size_t      const _BufferCount,
                 char const* const _Format,
                                              _locale_t   const _Locale,
                                                     va_list           _ArgList
        )
    

#line 1391 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1399 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsnprintf(
            char*       const _Buffer,
                                                 size_t      const _BufferCount,
                          char const* const _Format,
                                                    va_list           _ArgList
        )
    

#line 1411 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
    #line 1415 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    








#line 1426 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl vsnprintf(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
                                                          va_list           _ArgList
        )
    

#line 1438 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1446 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
     
    __inline int __cdecl _vsprintf_l(
           char*       const _Buffer,
                                    char const* const _Format,
                                  _locale_t   const _Locale,
                                         va_list           _ArgList
        )
    

#line 1458 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 1462 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
     
    __inline int __cdecl vsprintf(
           char*       const _Buffer,
               char const* const _Format,
                                         va_list           _ArgList
        )
    

#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vsnprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
    }
    #line 1477 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsprintf_s_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
                                                      va_list           _ArgList
        )
    

#line 1490 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1498 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    

         
        
        __inline int __cdecl vsprintf_s(
               char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
                                                          va_list           _ArgList
            )
    

#line 1512 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
        {
            return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        }
    #line 1516 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

        extern "C++" { template <size_t _Size> inline   int __cdecl vsprintf_s( char (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1524 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    #line 1526 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsprintf_p_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
                                                      va_list           _ArgList
        )
    

#line 1539 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1547 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsprintf_p(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                            char const* const _Format,
                                                      va_list           _ArgList
        )
    

#line 1559 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
    #line 1563 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsnprintf_s_l(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                      char const* const _Format,
                                                   _locale_t   const _Locale,
                                                          va_list          _ArgList
        )
    

#line 1577 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsnprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1585 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsnprintf_s(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                                char const* const _Format,
                                                          va_list           _ArgList
        )
    

#line 1598 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }
    #line 1602 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    extern "C++" { template <size_t _Size> inline   int __cdecl _vsnprintf_s( char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1611 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    

         
        
        __inline int __cdecl vsnprintf_s(
               char*       const _Buffer,
                                                           size_t      const _BufferCount,
                                                           size_t      const _MaxCount,
                                    char const* const _Format,
                                                              va_list           _ArgList
            )
    

#line 1626 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
        {
            return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        }
    #line 1630 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

        extern "C++" { template <size_t _Size> inline   int __cdecl vsnprintf_s( char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1639 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    #line 1641 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vscprintf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 1651 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1659 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _vscprintf(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 1668 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vscprintf_l(_Format, 0, _ArgList);
    }
    #line 1672 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vscprintf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 1682 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1690 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _vscprintf_p(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 1699 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vscprintf_p_l(_Format, 0, _ArgList);
    }
    #line 1703 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vsnprintf_c_l(
                   char*       const _Buffer,
                                             size_t      const _BufferCount,
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 1715 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1723 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsnprintf_c(
          char*       const _Buffer,
                                    size_t      const _BufferCount,
             char const* const _Format,
                                       va_list           _ArgList
        )
    

#line 1735 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
    #line 1739 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
     
    __inline int __cdecl _sprintf_l(
                  char*       const _Buffer,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 1750 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1761 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl sprintf(
           char*       const _Buffer,
               char const* const _Format,
        ...)
    

#line 1771 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1782 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

       int __cdecl sprintf(  char *_Buffer,  char const* _Format, ...);    int __cdecl vsprintf(  char *_Buffer,  char const* _Format, va_list _Args);
#line 1789 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _sprintf_s_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
        ...)
    

#line 1801 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1810 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    

         
        
        __inline int __cdecl sprintf_s(
               char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
            ...)
    

#line 1823 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1832 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    #line 1834 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    extern "C++" { template <size_t _Size> inline   int __cdecl sprintf_s( char (&_Buffer)[_Size],     char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1841 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _sprintf_p_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
        ...)
    

#line 1853 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1862 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _sprintf_p(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                            char const* const _Format,
        ...)
    

#line 1873 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1882 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
     
    __inline int __cdecl _snprintf_l(
            char*       const _Buffer,
                                                  size_t      const _BufferCount,
                 char const* const _Format,
                                              _locale_t   const _Locale,
        ...)
    

#line 1894 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1905 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    








#line 1916 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl snprintf(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
        ...)
    

#line 1927 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1936 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf(
            char*       const _Buffer,
                                                  size_t      const _BufferCount,
                           char const* const _Format,
        ...)
    

#line 1947 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1956 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

        int __cdecl _snprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, ...);     int __cdecl _vsnprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, va_list _Args);
#line 1965 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf_c_l(
                   char*       const _Buffer,
                                             size_t      const _BufferCount,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 1977 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1986 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf_c(
          char*       const _Buffer,
                                    size_t      const _BufferCount,
             char const* const _Format,
        ...)
    

#line 1997 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2006 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf_s_l(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                      char const* const _Format,
                                                   _locale_t   const _Locale,
        ...)
    

#line 2019 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2028 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf_s(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                                char const* const _Format,
        ...)
    

#line 2040 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2049 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    extern "C++" { template <size_t _Size> inline   int __cdecl _snprintf_s( char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 2057 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _scprintf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 2066 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2075 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _scprintf(
            char const* const _Format,
        ...)
    

#line 2083 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2092 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _scprintf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 2101 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2110 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _scprintf_p(
            char const* const _Format,
        ...)
    

#line 2118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscprintf_p(_Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    
    
    
    
     int __cdecl __stdio_common_vsscanf(
                                            unsigned __int64 _Options,
                  char const*      _Buffer,
                                            size_t           _BufferCount,
            char const*      _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

    
    __inline int __cdecl _vsscanf_l(
                                 char const* const _Buffer,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 2152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 2158 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vsscanf(
                                 char const* const _Buffer,
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 2168 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return _vsscanf_l(_Buffer, _Format, 0, _ArgList);
    }
    #line 2172 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vsscanf_s_l(
                                 char const* const _Buffer,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 2183 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 2189 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    

        #pragma warning(push)
        #pragma warning(disable: 6530) 

        
        __inline int __cdecl vsscanf_s(
                                     char const* const _Buffer,
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 2204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
        {
            return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList);
        }
    #line 2208 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

        extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(  char const (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 2215 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

        #pragma warning(pop)

    #line 2219 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _sscanf_l(
                                          char const* const _Buffer,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    

#line 2229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

      
    __inline int __cdecl sscanf(
                                char const* const _Buffer,
            char const* const _Format,
        ...)
    

#line 2247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2256 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _sscanf_s_l(
                                            char const* const _Buffer,
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    

#line 2266 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2275 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl sscanf_s(
                                      char const* const _Buffer,
                char const* const _Format,
            ...)
    

#line 2286 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

            _Result = vsscanf_s(_Buffer, _Format, _ArgList);

            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 2297 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    #line 2299 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    #pragma warning(push)
    #pragma warning(disable: 6530) 

     
    __inline int __cdecl _snscanf_l(
            char const* const _Buffer,
                                            size_t      const _BufferCount,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    

#line 2313 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2326 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _snscanf(
            char const* const _Buffer,
                                            size_t      const _BufferCount,
                      char const* const _Format,
        ...)
    

#line 2336 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2349 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"


    
    __inline int __cdecl _snscanf_s_l(
              char const* const _Buffer,
                                              size_t      const _BufferCount,
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    

#line 2361 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2374 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _snscanf_s(
            char const* const _Buffer,
                                            size_t      const _BufferCount,
                    char const* const _Format,
        ...)
    

#line 2384 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2397 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

    #pragma warning(pop)

    

#line 2403 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"



    
    
    
    
    
    

        

        


#line 2419 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

        
         char* __cdecl tempnam(
              char const* _Directory,
              char const* _FilePrefix
            );

        

#line 2429 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"

           int   __cdecl fcloseall(void);
                   FILE* __cdecl fdopen(  int _FileHandle,   char const* _Format);
            int   __cdecl fgetchar(void);
                   int   __cdecl fileno(  FILE* _Stream);
            int   __cdecl flushall(void);
            int   __cdecl fputchar(  int _Ch);
                     int   __cdecl getw(  FILE* _Stream);
                int   __cdecl putw(  int _Ch,   FILE* _Stream);
                    int   __cdecl rmtmp(void);

    #line 2441 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
#line 2442 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"



} __pragma(pack(pop))

#pragma warning(pop) 
#line 2449 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\stdio.h"
#line 137 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"

#line 139 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"



#line 143 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"
extern "C"
{
extern


#line 149 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"
            


#line 153 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"
__declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) int     __cdecl printf(const char*, ...);
#line 155 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"


extern  __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl malloc(size_t) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl free(void*) ;


extern  __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl _alloca(size_t);
#line 163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"




#line 168 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"
}


#line 172 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\assert.h"









#line 11 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\assert.h"



#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {











     void __cdecl _wassert(
          wchar_t const* _Message,
          wchar_t const* _File,
            unsigned       _Line
        );

    




#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\assert.h"



} __pragma(pack(pop))

#pragma warning(pop) 
#line 175 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"
#line 176 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"

extern "C"
{






#line 186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"



#line 190 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"


#line 193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"








#line 202 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"


#line 205 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"



#line 209 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__)  void __cdecl _wassert(
  const wchar_t *, const wchar_t *, unsigned);
#line 212 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"
}






























#line 244 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"

















#line 262 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"



#line 266 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"

extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl operator new( size_t) throw(...);
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl operator new[]( size_t) throw(...);
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete(void*) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete[](void*) throw();

extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete(void*,  size_t) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete[](void*,  size_t) throw();
#line 275 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"








#line 284 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"



#line 288 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"

#line 290 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"

#line 292 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"









#line 302 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"








#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"






































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"






















































































































#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
































































































































































































































#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 107 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"






















































































































































































#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"
#line 108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"







extern "C"
{









































































#line 191 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


#line 194 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

#line 196 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
#line 197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"





#line 203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


#line 206 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"







extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) int            __cdecl abs(int a) ;







extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) long int       __cdecl labs(long int a) ;







extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) long long int          llabs(long long int a) ;


#line 233 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
#line 234 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"




#line 239 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl fabs(double x) ;








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  fabsf(float x) ;


#line 324 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"






extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    min(const int a, const int b);






extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned int           umin(const unsigned int a, const unsigned int b);






extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long long int          llmin(const long long int a, const long long int b);






extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned long long int ullmin(const unsigned long long int a, const unsigned long long int b);



#line 356 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

















#line 374 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl fminf(float x, float y);
#line 376 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

















#line 394 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl fmin(double x, double y);
#line 396 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


#line 399 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"






extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    max(const int a, const int b);







extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned int           umax(const unsigned int a, const unsigned int b);






extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long long int          llmax(const long long int a, const long long int b);






extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned long long int ullmax(const unsigned long long int a, const unsigned long long int b);



#line 432 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

















#line 450 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl fmaxf(float x, float y);
#line 452 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

















#line 470 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl fmax(double, double);
#line 472 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sin(double x) ;
































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl cos(double x) ;


#line 549 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincos(double x, double *sptr, double *cptr) ;















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincosf(float x, float *sptr, float *cptr) ;



#line 585 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl tan(double x) ;




































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sqrt(double x) ;


#line 698 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"




































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 rsqrt(double x);





































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  rsqrtf(float x);



#line 841 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"




















































#line 894 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl log2(double x);
#line 896 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"






















#line 919 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl exp2(double x);
#line 921 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"






















#line 944 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl exp2f(float x);
#line 946 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


#line 949 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



















         
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 exp10(double x) ;






















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  exp10f(float x) ;



#line 997 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"










































#line 1040 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl expm1(double x);
#line 1042 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"










































#line 1085 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl expm1f(float x);
#line 1087 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"





















































#line 1141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl log2f(float x);
#line 1143 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl log10(double x) ;






































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl log(double x) ;







































































































#line 1369 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl log1p(double x);
#line 1371 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"







































































































#line 1475 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl log1pf(float x);
#line 1477 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"




























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl floor(double x) ;






































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl exp(double x) ;






























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl cosh(double x) ;

















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sinh(double x) ;





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl tanh(double x) ;



































#line 1724 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl acosh(double x);
#line 1726 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



































#line 1762 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl acoshf(float x);
#line 1764 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


















































#line 1815 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl asinh(double x);
#line 1817 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

















































#line 1867 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl asinhf(float x);
#line 1869 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



















































#line 1921 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl atanh(double x);
#line 1923 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



















































#line 1975 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl atanhf(float x);
#line 1977 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl ldexp(double x, int exp) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  ldexpf(float x, int exp) ;




















































#line 2142 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl logb(double x);
#line 2144 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"




















































#line 2197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl logbf(float x);
#line 2199 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"




























#line 2228 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  int    __cdecl ilogb(double x);
#line 2230 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"




























#line 2259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  int    __cdecl ilogbf(float x);
#line 2261 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"









































































#line 2335 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl scalbn(double x, int n);
#line 2337 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"









































































#line 2411 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl scalbnf(float x, int n);
#line 2413 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"









































































#line 2487 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl scalbln(double x, long int n);
#line 2489 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"









































































#line 2563 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl scalblnf(float x, long int n);
#line 2565 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl frexp(double x, int *nptr) ;










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  frexpf(float x, int *nptr) ;














#line 2730 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl round(double x);
#line 2732 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"














#line 2747 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl roundf(float x);
#line 2749 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"















#line 2765 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long int __cdecl lround(double x);
#line 2767 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"















#line 2783 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long int __cdecl lroundf(float x);
#line 2785 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"















#line 2801 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long long int __cdecl llround(double x);
#line 2803 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"















#line 2819 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long long int __cdecl llroundf(float x);
#line 2821 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

































#line 2855 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl rint(double x);
#line 2857 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
#line 2858 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"












#line 2871 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl rintf(float x);
#line 2873 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"














#line 2888 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long int __cdecl lrint(double x);
#line 2890 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"














#line 2905 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long int __cdecl lrintf(float x);
#line 2907 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"














#line 2922 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long long int __cdecl llrint(double x);
#line 2924 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"














#line 2939 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long long int __cdecl llrintf(float x);
#line 2941 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


















































#line 2992 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl nearbyint(double x);
#line 2994 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


















































#line 3045 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl nearbyintf(float x);
#line 3047 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl ceil(double x) ;












#line 3119 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl trunc(double x);
#line 3121 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"












#line 3134 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl truncf(float x);
#line 3136 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"























#line 3160 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl fdim(double x, double y);
#line 3162 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"























#line 3186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl fdimf(float x, float y);
#line 3188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl atan2(double y, double x) ;






























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl atan(double x) ;






















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl acos(double x) ;































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl asin(double x) ;









































#line 3349 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double __cdecl hypot(double x, double y);
#line 3351 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


#line 3354 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



#line 3358 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"














































extern __declspec(__device__) __declspec(__device_builtin__) double                rhypot(double x, double y) ;



#line 3409 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"







































static __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl hypotf(float x, float y);


#line 3452 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



#line 3456 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"














































extern __declspec(__device__) __declspec(__device_builtin__) float                 rhypotf(float x, float y) ;











































extern __declspec(__device__) __declspec(__device_builtin__)  double __cdecl norm3d(double a, double b, double c) ;


















































extern __declspec(__device__) __declspec(__device_builtin__) double                rnorm3d(double a, double b, double c) ;
















































extern __declspec(__device__) __declspec(__device_builtin__)  double __cdecl norm4d(double a, double b, double c, double d) ;























































extern __declspec(__device__) __declspec(__device_builtin__) double rnorm4d(double a, double b, double c, double d) ;












































extern "C++"  __declspec(__device__) __declspec(__device_builtin__)  double norm(int dim, double const * t) ;


















































extern __declspec(__device__) __declspec(__device_builtin__) double rnorm(int dim, double const * t) ;



















































extern __declspec(__device__) __declspec(__device_builtin__) float rnormf(int dim, float const * a) ;











































extern "C++"  __declspec(__device__) __declspec(__device_builtin__)  float normf(int dim, float const * a) ;












































extern __declspec(__device__) __declspec(__device_builtin__) float norm3df(float a, float b, float c) ;


















































extern __declspec(__device__) __declspec(__device_builtin__) float rnorm3df(float a, float b, float c) ;
















































extern __declspec(__device__) __declspec(__device_builtin__) float norm4df(float a, float b, float c, float d) ;























































extern __declspec(__device__) __declspec(__device_builtin__) float rnorm4df(float a, float b, float c, float d) ;



#line 4100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



















































































#line 4184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl cbrt(double x);
#line 4186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



















































































#line 4270 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl cbrtf(float x);
#line 4272 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


#line 4275 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 rcbrt(double x);

















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  rcbrtf(float x);



























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 sinpi(double x);



























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  sinpif(float x);



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 cospi(double x);



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  cospif(float x);





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincospi(double x, double *sptr, double *cptr);





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincospif(float x, float *sptr, float *cptr);



#line 4662 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"








































































































































































































































































































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl pow(double x, double y) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl modf(double x, double *iptr) ;


























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl fmod(double x, double y) ;






















































































#line 5193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl remainder(double x, double y);
#line 5195 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"























































































#line 5283 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl remainderf(float x, float y);
#line 5285 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



















































#line 5337 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl remquo(double x, double y, int *quo);
#line 5339 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



















































#line 5391 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl remquof(float x, float y, int *quo);
#line 5393 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"





































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl j0(double x) ;


#line 5434 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"






































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  j0f(float x) ;



#line 5477 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl j1(double x) ;


#line 5545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  j1f(float x) ;



#line 5615 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"






































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl jn(int n, double x) ;


#line 5657 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"







































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  jnf(int n, float x) ;



#line 5701 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl y0(double x) ;


#line 5752 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  y0f(float x) ;



#line 5805 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl y1(double x) ;


#line 5856 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  y1f(float x) ;



#line 5909 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl yn(int n, double x) ;


#line 5961 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  ynf(int n, float x) ;


























extern __declspec(__device__) __declspec(__device_builtin__)  double __cdecl cyl_bessel_i0(double x) ;

























extern __declspec(__device__) __declspec(__device_builtin__) float                  cyl_bessel_i0f(float x) ;


























extern __declspec(__device__) __declspec(__device_builtin__)  double __cdecl cyl_bessel_i1(double x) ;

























extern __declspec(__device__) __declspec(__device_builtin__) float                  cyl_bessel_i1f(float x) ;



#line 6121 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"















































































#line 6201 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl erf(double x);
#line 6203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"















































































#line 6283 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl erff(float x);
#line 6285 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


#line 6288 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfinv(double y);
























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfinvf(float y);



#line 6407 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



































#line 6443 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl erfc(double x);
#line 6445 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



































#line 6481 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl erfcf(float x);
#line 6483 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"




























































































































#line 6608 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl lgamma(double x);
#line 6610 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


#line 6613 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfcinv(double y);























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfcinvf(float y);

























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 normcdfinv(double y);

























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  normcdfinvf(float y);










































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 normcdf(double y);










































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  normcdff(float y);










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfcx(double x);










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfcxf(float x);



#line 7082 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

































































































































#line 7212 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl lgammaf(float x);
#line 7214 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"










































































































#line 7321 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl tgamma(double x);
#line 7323 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"










































































































#line 7430 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl tgammaf(float x);
#line 7432 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"










#line 7443 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl copysign(double x, double y);
#line 7445 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"










#line 7456 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl copysignf(float x, float y);
#line 7458 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
















#line 7475 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl nextafter(double x, double y);
#line 7477 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
















#line 7494 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl nextafterf(float x, float y);
#line 7496 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"













#line 7510 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl nan(const char *tagp);
#line 7512 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"













#line 7526 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl nanf(const char *tagp);
#line 7528 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


#line 7531 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinff(float) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnanf(float) ;








#line 7542 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finite(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finitef(float) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbit(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnan(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinf(double) ;
#line 7548 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbitf(float) ;



#line 7554 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



























































































































































#line 7710 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl fma(double x, double y, double z);
#line 7712 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



























































































































































#line 7868 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl fmaf(float x, float y, float z);
#line 7870 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


#line 7873 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"




extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbitl(long double) ;




#line 7883 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finitel(long double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinfl(long double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnanl(long double) ;
#line 7887 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"





















#line 7909 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



#line 7913 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"






















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  acosf(float x) ;







































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  asinf(float x) ;







































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  atanf(float x) ;
































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  atan2f(float y, float x) ;























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  cosf(float x) ;









































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  sinf(float x) ;









































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  tanf(float x) ;






























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  coshf(float x) ;

















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  sinhf(float x) ;





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  tanhf(float x) ;



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  logf(float x) ;

















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  expf(float x) ;



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  log10f(float x) ;






















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  modff(float x, float *iptr) ;









































































































































































































































































































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  powf(float x, float y) ;




































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  sqrtf(float x) ;         


























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  ceilf(float x) ;




























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  floorf(float x) ;

























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  fmodf(float x, float y) ;








#line 9063 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


#line 9066 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
#line 9067 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

}


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\math.h"















#line 9072 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



#line 1 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"





#pragma once










#line 18 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"

#line 20 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"



#line 24 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"



#line 28 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294  4984  )




[[nodiscard]]   inline float acos(  float _Xx) noexcept  {
    return :: acosf(_Xx);
}

[[nodiscard]]   inline float acosh(  float _Xx) noexcept  {
    return :: acoshf(_Xx);
}

[[nodiscard]]   inline float asin(  float _Xx) noexcept  {
    return :: asinf(_Xx);
}

[[nodiscard]]   inline float asinh(  float _Xx) noexcept  {
    return :: asinhf(_Xx);
}

[[nodiscard]]   inline float atan(  float _Xx) noexcept  {
    return :: atanf(_Xx);
}

[[nodiscard]]   inline float atanh(  float _Xx) noexcept  {
    return :: atanhf(_Xx);
}

[[nodiscard]]   inline float atan2(  float _Yx,   float _Xx) noexcept  {
    return :: atan2f(_Yx, _Xx);
}

[[nodiscard]]   inline float cbrt(  float _Xx) noexcept  {
    return :: cbrtf(_Xx);
}

[[nodiscard]]   inline float ceil(  float _Xx) noexcept  {


#line 72 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"

#line 74 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
    return :: ceilf(_Xx);
#line 76 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
}

[[nodiscard]]   inline float copysign(  float _Number,   float _Sign) noexcept  {


#line 82 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"

#line 84 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
    return :: copysignf(_Number, _Sign);
#line 86 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
}

[[nodiscard]]   inline float cos(  float _Xx) noexcept  {
    return :: cosf(_Xx);
}

[[nodiscard]]   inline float cosh(  float _Xx) noexcept  {
    return :: coshf(_Xx);
}

[[nodiscard]]   inline float erf(  float _Xx) noexcept  {
    return :: erff(_Xx);
}

[[nodiscard]]   inline float erfc(  float _Xx) noexcept  {
    return :: erfcf(_Xx);
}

[[nodiscard]]   inline float exp(  float _Xx) noexcept  {
    return :: expf(_Xx);
}

[[nodiscard]]   inline float exp2(  float _Xx) noexcept  {
    return :: exp2f(_Xx);
}

[[nodiscard]]   inline float expm1(  float _Xx) noexcept  {
    return :: expm1f(_Xx);
}

[[nodiscard]]   inline float fabs(  float _Xx) noexcept  {
    return :: fabsf(_Xx);
}

[[nodiscard]]   inline float fdim(  float _Xx,   float _Yx) noexcept  {
    return :: fdimf(_Xx, _Yx);
}

[[nodiscard]]   inline float floor(  float _Xx) noexcept  {


#line 128 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"

#line 130 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
    return :: floorf(_Xx);
#line 132 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
}

[[nodiscard]]   inline float fma(  float _Xx,   float _Yx,   float _Zx) noexcept  {
    return :: fmaf(_Xx, _Yx, _Zx);
}

[[nodiscard]]   inline float fmax(  float _Xx,   float _Yx) noexcept  {
    return :: fmaxf(_Xx, _Yx);
}

[[nodiscard]]   inline float fmin(  float _Xx,   float _Yx) noexcept  {
    return :: fminf(_Xx, _Yx);
}

[[nodiscard]]   inline float fmod(  float _Xx,   float _Yx) noexcept  {
    return :: fmodf(_Xx, _Yx);
}

inline float frexp(  float _Xx,   int* _Yx) noexcept  {
    return :: frexpf(_Xx, _Yx);
}

[[nodiscard]]   inline float hypot(  float _Xx,   float _Yx) noexcept  {
    return :: hypotf(_Xx, _Yx);
}

[[nodiscard]]   inline int ilogb(  float _Xx) noexcept  {
    return :: ilogbf(_Xx);
}

[[nodiscard]]   inline float ldexp(  float _Xx,   int _Yx) noexcept  {
    return :: ldexpf(_Xx, _Yx);
}

[[nodiscard]]   inline float lgamma(  float _Xx) noexcept  {
    return :: lgammaf(_Xx);
}

[[nodiscard]]   inline long long llrint(  float _Xx) noexcept  {
    return :: llrintf(_Xx);
}

[[nodiscard]]   inline long long llround(  float _Xx) noexcept  {
    return :: llroundf(_Xx);
}

[[nodiscard]]   inline float log(  float _Xx) noexcept  {
    return :: logf(_Xx);
}

[[nodiscard]]   inline float log10(  float _Xx) noexcept  {
    return :: log10f(_Xx);
}

[[nodiscard]]   inline float log1p(  float _Xx) noexcept  {
    return :: log1pf(_Xx);
}

[[nodiscard]]   inline float log2(  float _Xx) noexcept  {
    return :: log2f(_Xx);
}

[[nodiscard]]   inline float logb(  float _Xx) noexcept  {
    return :: logbf(_Xx);
}

[[nodiscard]]   inline long lrint(  float _Xx) noexcept  {
    return :: lrintf(_Xx);
}

[[nodiscard]]   inline long lround(  float _Xx) noexcept  {
    return :: lroundf(_Xx);
}

inline float modf(  float _Xx,   float* _Yx) noexcept  {
    return :: modff(_Xx, _Yx);
}

[[nodiscard]]   inline float nearbyint(  float _Xx) noexcept  {
    return :: nearbyintf(_Xx);
}

[[nodiscard]]   inline float nextafter(  float _Xx,   float _Yx) noexcept  {
    return :: nextafterf(_Xx, _Yx);
}

[[nodiscard]]   inline float nexttoward(  float _Xx,   long double _Yx) noexcept  {
    return :: nexttowardf(_Xx, _Yx);
}

[[nodiscard]]   inline float pow(  float _Xx,   float _Yx) noexcept  {
    return :: powf(_Xx, _Yx);
}

[[nodiscard]]   inline float remainder(  float _Xx,   float _Yx) noexcept  {
    return :: remainderf(_Xx, _Yx);
}

inline float remquo(  float _Xx,   float _Yx,   int* _Zx) noexcept  {
    return :: remquof(_Xx, _Yx, _Zx);
}

[[nodiscard]]   inline float rint(  float _Xx) noexcept  {
    return :: rintf(_Xx);
}

[[nodiscard]]   inline float round(  float _Xx) noexcept  {


#line 242 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"

#line 244 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
    return :: roundf(_Xx);
#line 246 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
}

[[nodiscard]]   inline float scalbln(  float _Xx,   long _Yx) noexcept  {
    return :: scalblnf(_Xx, _Yx);
}

[[nodiscard]]   inline float scalbn(  float _Xx,   int _Yx) noexcept  {
    return :: scalbnf(_Xx, _Yx);
}

[[nodiscard]]   inline float sin(  float _Xx) noexcept  {
    return :: sinf(_Xx);
}

[[nodiscard]]   inline float sinh(  float _Xx) noexcept  {
    return :: sinhf(_Xx);
}

[[nodiscard]]   inline float sqrt(  float _Xx) noexcept  {
    return :: sqrtf(_Xx);
}

[[nodiscard]]   inline float tan(  float _Xx) noexcept  {
    return :: tanf(_Xx);
}

[[nodiscard]]   inline float tanh(  float _Xx) noexcept  {
    return :: tanhf(_Xx);
}

[[nodiscard]]   inline float tgamma(  float _Xx) noexcept  {
    return :: tgammaf(_Xx);
}

[[nodiscard]]   inline float trunc(  float _Xx) noexcept  {


#line 284 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"

#line 286 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
    return :: truncf(_Xx);
#line 288 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
}

[[nodiscard]]   inline long double acos(  long double _Xx) noexcept  {
    return :: acosl(_Xx);
}

[[nodiscard]]   inline long double acosh(  long double _Xx) noexcept  {
    return :: acoshl(_Xx);
}

[[nodiscard]]   inline long double asin(  long double _Xx) noexcept  {
    return :: asinl(_Xx);
}

[[nodiscard]]   inline long double asinh(  long double _Xx) noexcept  {
    return :: asinhl(_Xx);
}

[[nodiscard]]   inline long double atan(  long double _Xx) noexcept  {
    return :: atanl(_Xx);
}

[[nodiscard]]   inline long double atanh(  long double _Xx) noexcept  {
    return :: atanhl(_Xx);
}

[[nodiscard]]   inline long double atan2(  long double _Yx,   long double _Xx) noexcept
 {
    return :: atan2l(_Yx, _Xx);
}

[[nodiscard]]   inline long double cbrt(  long double _Xx) noexcept  {
    return :: cbrtl(_Xx);
}

[[nodiscard]]   inline long double ceil(  long double _Xx) noexcept  {


#line 327 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"

#line 329 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
    return :: ceill(_Xx);
#line 331 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
}

[[nodiscard]]   inline long double copysign(  long double _Number,   long double _Sign) noexcept
 {


#line 338 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"

#line 340 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
    return :: copysignl(_Number, _Sign);
#line 342 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
}

[[nodiscard]]   inline long double cos(  long double _Xx) noexcept  {
    return :: cosl(_Xx);
}

[[nodiscard]]   inline long double cosh(  long double _Xx) noexcept  {
    return :: coshl(_Xx);
}

[[nodiscard]]   inline long double erf(  long double _Xx) noexcept  {
    return :: erfl(_Xx);
}

[[nodiscard]]   inline long double erfc(  long double _Xx) noexcept  {
    return :: erfcl(_Xx);
}

[[nodiscard]]   inline long double exp(  long double _Xx) noexcept  {
    return :: expl(_Xx);
}

[[nodiscard]]   inline long double exp2(  long double _Xx) noexcept  {
    return :: exp2l(_Xx);
}

[[nodiscard]]   inline long double expm1(  long double _Xx) noexcept  {
    return :: expm1l(_Xx);
}

[[nodiscard]]   inline long double fabs(  long double _Xx) noexcept  {
    return :: fabsl(_Xx);
}

[[nodiscard]]   inline long double fdim(  long double _Xx,   long double _Yx) noexcept
 {
    return :: fdiml(_Xx, _Yx);
}

[[nodiscard]]   inline long double floor(  long double _Xx) noexcept  {


#line 385 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"

#line 387 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
    return :: floorl(_Xx);
#line 389 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
}

[[nodiscard]]   inline long double fma(
      long double _Xx,   long double _Yx,   long double _Zx) noexcept  {
    return :: fmal(_Xx, _Yx, _Zx);
}

[[nodiscard]]   inline long double fmax(  long double _Xx,   long double _Yx) noexcept
 {
    return :: fmaxl(_Xx, _Yx);
}

[[nodiscard]]   inline long double fmin(  long double _Xx,   long double _Yx) noexcept
 {
    return :: fminl(_Xx, _Yx);
}

[[nodiscard]]   inline long double fmod(  long double _Xx,   long double _Yx) noexcept
 {
    return :: fmodl(_Xx, _Yx);
}

inline long double frexp(  long double _Xx,   int* _Yx) noexcept  {
    return :: frexpl(_Xx, _Yx);
}

[[nodiscard]]   inline long double hypot(  long double _Xx,   long double _Yx) noexcept
 {
    return :: hypotl(_Xx, _Yx);
}

[[nodiscard]]   inline int ilogb(  long double _Xx) noexcept  {
    return :: ilogbl(_Xx);
}

[[nodiscard]]   inline long double ldexp(  long double _Xx,   int _Yx) noexcept  {
    return :: ldexpl(_Xx, _Yx);
}

[[nodiscard]]   inline long double lgamma(  long double _Xx) noexcept  {
    return :: lgammal(_Xx);
}

[[nodiscard]]   inline long long llrint(  long double _Xx) noexcept  {
    return :: llrintl(_Xx);
}

[[nodiscard]]   inline long long llround(  long double _Xx) noexcept  {
    return :: llroundl(_Xx);
}

[[nodiscard]]   inline long double log(  long double _Xx) noexcept  {
    return :: logl(_Xx);
}

[[nodiscard]]   inline long double log10(  long double _Xx) noexcept  {
    return :: log10l(_Xx);
}

[[nodiscard]]   inline long double log1p(  long double _Xx) noexcept  {
    return :: log1pl(_Xx);
}

[[nodiscard]]   inline long double log2(  long double _Xx) noexcept  {
    return :: log2l(_Xx);
}

[[nodiscard]]   inline long double logb(  long double _Xx) noexcept  {
    return :: logbl(_Xx);
}

[[nodiscard]]   inline long lrint(  long double _Xx) noexcept  {
    return :: lrintl(_Xx);
}

[[nodiscard]]   inline long lround(  long double _Xx) noexcept  {
    return :: lroundl(_Xx);
}

inline long double modf(  long double _Xx,   long double* _Yx) noexcept  {
    return :: modfl(_Xx, _Yx);
}

[[nodiscard]]   inline long double nearbyint(  long double _Xx) noexcept  {
    return :: nearbyintl(_Xx);
}

[[nodiscard]]   inline long double nextafter(  long double _Xx,   long double _Yx) noexcept
 {
    return :: nextafterl(_Xx, _Yx);
}

[[nodiscard]]   inline long double nexttoward(  long double _Xx,   long double _Yx) noexcept
 {
    return :: nexttowardl(_Xx, _Yx);
}

[[nodiscard]]   inline long double pow(  long double _Xx,   long double _Yx) noexcept
 {
    return :: powl(_Xx, _Yx);
}

[[nodiscard]]   inline long double remainder(  long double _Xx,   long double _Yx) noexcept
 {
    return :: remainderl(_Xx, _Yx);
}

inline long double remquo(  long double _Xx,   long double _Yx,   int* _Zx) noexcept  {
    return :: remquol(_Xx, _Yx, _Zx);
}

[[nodiscard]]   inline long double rint(  long double _Xx) noexcept  {
    return :: rintl(_Xx);
}

[[nodiscard]]   inline long double round(  long double _Xx) noexcept  {


#line 508 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"

#line 510 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
    return :: roundl(_Xx);
#line 512 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
}

[[nodiscard]]   inline long double scalbln(  long double _Xx,   long _Yx) noexcept  {
    return :: scalblnl(_Xx, _Yx);
}

[[nodiscard]]   inline long double scalbn(  long double _Xx,   int _Yx) noexcept  {
    return :: scalbnl(_Xx, _Yx);
}

[[nodiscard]]   inline long double sin(  long double _Xx) noexcept  {
    return :: sinl(_Xx);
}

[[nodiscard]]   inline long double sinh(  long double _Xx) noexcept  {
    return :: sinhl(_Xx);
}

[[nodiscard]]   inline long double sqrt(  long double _Xx) noexcept  {
    return :: sqrtl(_Xx);
}

[[nodiscard]]   inline long double tan(  long double _Xx) noexcept  {
    return :: tanl(_Xx);
}

[[nodiscard]]   inline long double tanh(  long double _Xx) noexcept  {
    return :: tanhl(_Xx);
}

[[nodiscard]]   inline long double tgamma(  long double _Xx) noexcept  {
    return :: tgammal(_Xx);
}

[[nodiscard]]   inline long double trunc(  long double _Xx) noexcept  {


#line 550 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"

#line 552 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
    return :: truncl(_Xx);
#line 554 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
}


namespace std {
template <class _Ty1, class _Ty2>
using _Common_float_type_t = conditional_t<is_same_v<_Ty1, long double> || is_same_v<_Ty2, long double>, long double,
    conditional_t<is_same_v<_Ty1, float> && is_same_v<_Ty2, float>, float,
        double>>; 
}


template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0>
double frexp(_Ty _Value,   int* const _Exp) noexcept  {
    return :: frexp(static_cast<double>(_Value), _Exp);
}


template <class _Ty1, class _Ty2, class _Ty3,
    ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2> && ::std:: is_arithmetic_v<_Ty3>, int> = 0>
[[nodiscard]] ::std:: _Common_float_type_t<_Ty1, ::std:: _Common_float_type_t<_Ty2, _Ty3>> fma(
    _Ty1 _Left, _Ty2 _Middle, _Ty3 _Right) noexcept  {
    using _Common = ::std:: _Common_float_type_t<_Ty1, ::std:: _Common_float_type_t<_Ty2, _Ty3>>;
    if constexpr (::std:: is_same_v<_Common, float>) {
        return :: fmaf(static_cast<_Common>(_Left), static_cast<_Common>(_Middle), static_cast<_Common>(_Right));
    } else if constexpr (::std:: is_same_v<_Common, double>) {
        return :: fma(static_cast<_Common>(_Left), static_cast<_Common>(_Middle), static_cast<_Common>(_Right));
    } else {
        return :: fmal(static_cast<_Common>(_Left), static_cast<_Common>(_Middle), static_cast<_Common>(_Right));
    }
}


template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0>
::std:: _Common_float_type_t<_Ty1, _Ty2> remquo(_Ty1 _Left, _Ty2 _Right, int* _Pquo) noexcept  {
    using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>;
    if constexpr (::std:: is_same_v<_Common, float>) {
        return :: remquof(static_cast<_Common>(_Left), static_cast<_Common>(_Right), _Pquo);
    } else if constexpr (::std:: is_same_v<_Common, double>) {
        return :: remquo(static_cast<_Common>(_Left), static_cast<_Common>(_Right), _Pquo);
    } else {
        return :: remquol(static_cast<_Common>(_Left), static_cast<_Common>(_Right), _Pquo);
    }
}












#line 610 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"

#line 612 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"

#line 614 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"



















#line 634 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"

#line 636 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"

#line 638 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"


template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double acos(_Ty _Left) noexcept { return :: acos(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double asin(_Ty _Left) noexcept { return :: asin(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double atan(_Ty _Left) noexcept { return :: atan(static_cast<double>(_Left)); }
template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> atan2(_Ty1 _Left, _Ty2 _Right) noexcept { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return :: atan2(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double cos(_Ty _Left) noexcept { return :: cos(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double sin(_Ty _Left) noexcept { return :: sin(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double tan(_Ty _Left) noexcept { return :: tan(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double acosh(_Ty _Left) noexcept { return :: acosh(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double asinh(_Ty _Left) noexcept { return :: asinh(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double atanh(_Ty _Left) noexcept { return :: atanh(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double cosh(_Ty _Left) noexcept { return :: cosh(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double sinh(_Ty _Left) noexcept { return :: sinh(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double tanh(_Ty _Left) noexcept { return :: tanh(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double exp(_Ty _Left) noexcept { return :: exp(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double exp2(_Ty _Left) noexcept { return :: exp2(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double expm1(_Ty _Left) noexcept { return :: expm1(static_cast<double>(_Left)); }

template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] int ilogb(_Ty _Left) noexcept { return :: ilogb(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double ldexp(_Ty _Left, int _Arg2) noexcept { return :: ldexp(static_cast<double>(_Left), _Arg2); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double log(_Ty _Left) noexcept { return :: log(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double log10(_Ty _Left) noexcept { return :: log10(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double log1p(_Ty _Left) noexcept { return :: log1p(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double log2(_Ty _Left) noexcept { return :: log2(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double logb(_Ty _Left) noexcept { return :: logb(static_cast<double>(_Left)); }

template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double scalbn(_Ty _Left, int _Arg2) noexcept { return :: scalbn(static_cast<double>(_Left), _Arg2); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double scalbln(_Ty _Left, long _Arg2) noexcept { return :: scalbln(static_cast<double>(_Left), _Arg2); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double cbrt(_Ty _Left) noexcept { return :: cbrt(static_cast<double>(_Left)); }

template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double fabs(_Ty _Left) noexcept { return :: fabs(static_cast<double>(_Left)); }
template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> hypot(_Ty1 _Left, _Ty2 _Right) noexcept { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return :: hypot(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }

template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> pow(_Ty1 _Left, _Ty2 _Right) noexcept { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return :: pow(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double sqrt(_Ty _Left) noexcept { return :: sqrt(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double erf(_Ty _Left) noexcept { return :: erf(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double erfc(_Ty _Left) noexcept { return :: erfc(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double lgamma(_Ty _Left) noexcept { return :: lgamma(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double tgamma(_Ty _Left) noexcept { return :: tgamma(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double ceil(_Ty _Left) noexcept { return :: ceil(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double floor(_Ty _Left) noexcept { return :: floor(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double nearbyint(_Ty _Left) noexcept { return :: nearbyint(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double rint(_Ty _Left) noexcept { return :: rint(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] long lrint(_Ty _Left) noexcept { return :: lrint(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] long long llrint(_Ty _Left) noexcept { return :: llrint(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double round(_Ty _Left) noexcept { return :: round(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] long lround(_Ty _Left) noexcept { return :: lround(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] long long llround(_Ty _Left) noexcept { return :: llround(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double trunc(_Ty _Left) noexcept { return :: trunc(static_cast<double>(_Left)); }
template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> fmod(_Ty1 _Left, _Ty2 _Right) noexcept { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return :: fmod(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }
template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> remainder(_Ty1 _Left, _Ty2 _Right) noexcept { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return :: remainder(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }

template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> copysign(_Ty1 _Left, _Ty2 _Right) noexcept { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return :: copysign(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }

template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> nextafter(_Ty1 _Left, _Ty2 _Right) noexcept { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return :: nextafter(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double nexttoward(_Ty _Left, long double _Arg2) noexcept { return :: nexttoward(static_cast<double>(_Left), _Arg2); }
template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> fdim(_Ty1 _Left, _Ty2 _Right) noexcept { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return :: fdim(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }
template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> fmax(_Ty1 _Left, _Ty2 _Right) noexcept { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return :: fmax(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }
template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> fmin(_Ty1 _Left, _Ty2 _Right) noexcept { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return :: fmin(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }
















namespace std {
using :: abs;
using :: acos;
using :: asin;
using :: atan;
using :: atan2;
using :: ceil;
using :: cos;
using :: cosh;
using :: exp;
using :: fabs;
using :: floor;
using :: fmod;
using :: frexp;
using :: ldexp;
using :: log;
using :: log10;
using :: modf;
using :: pow;
using :: sin;
using :: sinh;
using :: sqrt;
using :: tan;
using :: tanh;

using :: acosf;
using :: asinf;
using :: atanf;
using :: atan2f;
using :: ceilf;
using :: cosf;
using :: coshf;
using :: expf;
using :: fabsf;
using :: floorf;
using :: fmodf;
using :: frexpf;
using :: ldexpf;
using :: logf;
using :: log10f;
using :: modff;
using :: powf;
using :: sinf;
using :: sinhf;
using :: sqrtf;
using :: tanf;
using :: tanhf;

using :: acosl;
using :: asinl;
using :: atanl;
using :: atan2l;
using :: ceill;
using :: cosl;
using :: coshl;
using :: expl;
using :: fabsl;
using :: floorl;
using :: fmodl;
using :: frexpl;
using :: ldexpl;
using :: logl;
using :: log10l;
using :: modfl;
using :: powl;
using :: sinl;
using :: sinhl;
using :: sqrtl;
using :: tanl;
using :: tanhl;

using :: float_t;
using :: double_t;

using :: acosh;
using :: asinh;
using :: atanh;
using :: cbrt;
using :: erf;
using :: erfc;
using :: expm1;
using :: exp2;
using :: hypot;
using :: ilogb;
using :: lgamma;
using :: log1p;
using :: log2;
using :: logb;
using :: llrint;
using :: lrint;
using :: nearbyint;
using :: rint;
using :: llround;
using :: lround;
using :: fdim;
using :: fma;
using :: fmax;
using :: fmin;
using :: round;
using :: trunc;
using :: remainder;
using :: remquo;
using :: copysign;
using :: nan;
using :: nextafter;
using :: scalbn;
using :: scalbln;
using :: nexttoward;
using :: tgamma;

using :: acoshf;
using :: asinhf;
using :: atanhf;
using :: cbrtf;
using :: erff;
using :: erfcf;
using :: expm1f;
using :: exp2f;
using :: hypotf;
using :: ilogbf;
using :: lgammaf;
using :: log1pf;
using :: log2f;
using :: logbf;
using :: llrintf;
using :: lrintf;
using :: nearbyintf;
using :: rintf;
using :: llroundf;
using :: lroundf;
using :: fdimf;
using :: fmaf;
using :: fmaxf;
using :: fminf;
using :: roundf;
using :: truncf;
using :: remainderf;
using :: remquof;
using :: copysignf;
using :: nanf;
using :: nextafterf;
using :: scalbnf;
using :: scalblnf;
using :: nexttowardf;
using :: tgammaf;

using :: acoshl;
using :: asinhl;
using :: atanhl;
using :: cbrtl;
using :: erfl;
using :: erfcl;
using :: expm1l;
using :: exp2l;
using :: hypotl;
using :: ilogbl;
using :: lgammal;
using :: log1pl;
using :: log2l;
using :: logbl;
using :: llrintl;
using :: lrintl;
using :: nearbyintl;
using :: rintl;
using :: llroundl;
using :: lroundl;
using :: fdiml;
using :: fmal;
using :: fmaxl;
using :: fminl;
using :: roundl;
using :: truncl;
using :: remainderl;
using :: remquol;
using :: copysignl;
using :: nanl;
using :: nextafterl;
using :: scalbnl;
using :: scalblnl;
using :: nexttowardl;
using :: tgammal;

using :: fpclassify;
using :: signbit;
using :: isfinite;
using :: isinf;
using :: isnan;
using :: isnormal;
using :: isgreater;
using :: isgreaterequal;
using :: isless;
using :: islessequal;
using :: islessgreater;
using :: isunordered;
}







































































































































































































































































































































































































































































































#line 1397 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"



#pragma warning(pop)
#pragma pack(pop)

#line 1404 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
#line 1405 "C:\\Users\\VS2019\\VC\\Tools\\MSVC\\14.29.30133\\include\\cmath"
#line 9076 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

#line 9078 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
#line 9079 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

























#line 9105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

























































































































































































































































#line 9355 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__)  double __cdecl _hypot(double x, double y);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__)  float  __cdecl _hypotf(float x, float y);



#line 9362 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"




#line 9367 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool signbit(long double) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__)  int _ldsign(long double);

#line 9371 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



















#line 9391 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"





#line 9397 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"














extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool signbit(double) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__)  int _dsign(double);


#line 9416 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



















#line 9436 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"





#line 9442 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"














extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool signbit(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__)  int _fdsign(float);


#line 9461 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



#line 9465 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
static __inline __declspec(__host__) __declspec(__device__) bool isinf(long double a);
#line 9467 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


















#line 9486 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"














static __inline __declspec(__host__) __declspec(__device__) bool isinf(double a);

#line 9503 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



















#line 9523 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"















static __inline __declspec(__host__) __declspec(__device__) bool isinf(float a);

#line 9541 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



#line 9545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
static __inline __declspec(__host__) __declspec(__device__) bool isnan(long double a);
#line 9547 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

















#line 9565 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"













static __inline __declspec(__host__) __declspec(__device__) bool isnan(double a);

#line 9581 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


















#line 9600 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"














static __inline __declspec(__host__) __declspec(__device__) bool isnan(float a);

#line 9617 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



#line 9621 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
static __inline __declspec(__host__) __declspec(__device__) bool isfinite(long double a);
#line 9623 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



















#line 9643 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"















static __inline __declspec(__host__) __declspec(__device__) bool isfinite(double a);

#line 9661 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


















#line 9680 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"














static __inline __declspec(__host__) __declspec(__device__) bool isfinite(float a);

#line 9697 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"




#line 9702 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
template<class T> extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) T _Pow_int(T, int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int abs(long long int) throw();
#line 9705 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

#line 9707 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



#line 9711 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

#line 9713 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"









#line 9723 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


#line 9726 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"











#line 9738 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"











































#line 9784 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int __cdecl abs(long int) throw();


#line 9788 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl abs(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double   __cdecl abs(double) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl fabs(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl ceil(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl floor(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sqrt(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl pow(float, float) throw();

























#line 9821 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


template <class _Ty1, class _Ty2, ::std:: enable_if_t< ::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> > [[nodiscard]] __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) ::std:: _Common_float_type_t<_Ty1, _Ty2> __cdecl pow(_Ty1 _Left, _Ty2 _Right) noexcept;



#line 9828 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
#line 9829 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
#line 9830 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl log(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl log10(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl fmod(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl modf(float, float*) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl exp(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl frexp(float, int*) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl ldexp(float, int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl asin(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sin(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sinh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl acos(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl cos(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl cosh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl atan(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl atan2(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl tan(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl tanh(float) throw();
#line 9848 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"










#line 9859 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


#line 9862 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"







#line 9870 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


#line 9873 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



































































































































































































#line 10069 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl logb(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) int   __cdecl ilogb(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl scalbn(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl scalbln(float, long int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl exp2(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl expm1(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl log2(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl log1p(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl acosh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl asinh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl atanh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl hypot(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl cbrt(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl erf(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl erfc(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl lgamma(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl tgamma(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl copysign(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl nextafter(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl remainder(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl remquo(float, float, int *) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl round(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int      __cdecl lround(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int __cdecl llround(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl trunc(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl rint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int      __cdecl lrint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int __cdecl llrint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl nearbyint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fdim(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fma(float, float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fmax(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fmin(float, float) throw();
#line 10103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float exp10(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float rsqrt(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float rcbrt(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float sinpi(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float cospi(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void sincospi(const float a, float *const sptr, float *const cptr);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void sincos(const float a, float *const sptr, float *const cptr);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float j0(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float j1(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float jn(const int n, const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float y0(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float y1(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float yn(const int n, const float a);

static inline __declspec(__device__) __declspec(__cudart_builtin__) float cyl_bessel_i0(const float a);

static inline __declspec(__device__) __declspec(__cudart_builtin__) float cyl_bessel_i1(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float erfinv(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float erfcinv(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float normcdfinv(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float normcdf(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float erfcx(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double copysign(const double a, const float b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double copysign(const float a, const double b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int min(const unsigned int a, const unsigned int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int min(const int a, const unsigned int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int min(const unsigned int a, const int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int min(const long int a, const long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int min(const unsigned long int a, const unsigned long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int min(const long int a, const unsigned long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int min(const unsigned long int a, const long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int min(const long long int a, const long long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int min(const unsigned long long int a, const unsigned long long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int min(const long long int a, const unsigned long long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int min(const unsigned long long int a, const long long int b);










static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float min(const float a, const float b);










static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double min(const double a, const double b);









static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double min(const float a, const double b);









static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double min(const double a, const float b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int max(const unsigned int a, const unsigned int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int max(const int a, const unsigned int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int max(const unsigned int a, const int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int max(const long int a, const long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int max(const unsigned long int a, const unsigned long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int max(const long int a, const unsigned long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int max(const unsigned long int a, const long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int max(const long long int a, const long long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int max(const unsigned long long int a, const unsigned long long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int max(const long long int a, const unsigned long long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int max(const unsigned long long int a, const long long int b);










static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float max(const float a, const float b);










static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double max(const double a, const double b);









static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double max(const float a, const double b);









static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double max(const double a, const float b);










extern "C"{
inline __declspec(__device__) void *__nv_aligned_device_malloc(size_t size, size_t align)
{
  __declspec(__device__) void *__nv_aligned_device_malloc_impl(size_t, size_t);
  return __nv_aligned_device_malloc_impl(size, align);
}
}
#line 10425 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"


















































































































































































































































































#line 10700 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"



#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"


















#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"






















































































































#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
































































































































































































































#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 78 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"






















































































































































































#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"
#line 79 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"

























































#line 137 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"















































































































































































































































































#line 409 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
















#line 426 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"






#line 433 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool isinf(const long double a)
{

  return (__isinfl(a) != 0);


#line 440 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
}
#line 442 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"






#line 449 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool isinf(const double a)
{

  return (__isinf(a) != 0);


#line 456 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
}
#line 458 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"






#line 465 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isinf(const float a)
{

  return (__isinff(a) != 0);


#line 472 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
}
#line 474 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"






#line 481 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool isnan(const long double a)
{

  return (__isnanl(a) != 0);


#line 488 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
}
#line 490 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"






#line 497 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool isnan(const double a)
{

  return (__isnan(a) != 0);


#line 504 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
}
#line 506 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"






#line 513 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool isnan(const float a)
{

  return (__isnanf(a) != 0);


#line 520 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
}
#line 522 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"






#line 529 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool isfinite(const long double a)
{

  return (__finitel(a) != 0);


#line 536 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
}
#line 538 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"






#line 545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool isfinite(const double a)
{

  return (__finite(a) != 0);


#line 552 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
}
#line 554 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"






#line 561 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool isfinite(const float a)
{

  return (__finitef(a) != 0);


#line 568 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
}
#line 570 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"

#line 572 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"




#line 577 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"


#line 580 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
















































































































































































#line 757 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"

static inline __declspec(__host__) __declspec(__device__) float exp10(const float a)
{
  return exp10f(a);
}

static inline __declspec(__host__) __declspec(__device__) float rsqrt(const float a)
{
  return rsqrtf(a);
}

static inline __declspec(__host__) __declspec(__device__) float rcbrt(const float a)
{
  return rcbrtf(a);
}

static inline __declspec(__host__) __declspec(__device__) float sinpi(const float a)
{
  return sinpif(a);
}

static inline __declspec(__host__) __declspec(__device__) float cospi(const float a)
{
  return cospif(a);
}

static inline __declspec(__host__) __declspec(__device__) void sincospi(const float a, float *const sptr, float *const cptr)
{
  sincospif(a, sptr, cptr);
}

static inline __declspec(__host__) __declspec(__device__) void sincos(const float a, float *const sptr, float *const cptr)
{
  sincosf(a, sptr, cptr);
}

static inline __declspec(__host__) __declspec(__device__) float j0(const float a)
{
  return j0f(a);
}

static inline __declspec(__host__) __declspec(__device__) float j1(const float a)
{
  return j1f(a);
}

static inline __declspec(__host__) __declspec(__device__) float jn(const int n, const float a)
{
  return jnf(n, a);
}

static inline __declspec(__host__) __declspec(__device__) float y0(const float a)
{
  return y0f(a);
}

static inline __declspec(__host__) __declspec(__device__) float y1(const float a)
{
  return y1f(a);
}

static inline __declspec(__host__) __declspec(__device__) float yn(const int n, const float a)
{ 
  return ynf(n, a);
}

static inline __declspec(__device__) float cyl_bessel_i0(const float a)
{
  return cyl_bessel_i0f(a);
}

static inline __declspec(__device__) float cyl_bessel_i1(const float a)
{
  return cyl_bessel_i1f(a);
}

static inline __declspec(__host__) __declspec(__device__) float erfinv(const float a)
{
  return erfinvf(a);
}

static inline __declspec(__host__) __declspec(__device__) float erfcinv(const float a)
{
  return erfcinvf(a);
}

static inline __declspec(__host__) __declspec(__device__) float normcdfinv(const float a)
{
  return normcdfinvf(a);
}

static inline __declspec(__host__) __declspec(__device__) float normcdf(const float a)
{
  return normcdff(a);
}

static inline __declspec(__host__) __declspec(__device__) float erfcx(const float a)
{
  return erfcxf(a);
}

static inline __declspec(__host__) __declspec(__device__) double copysign(const double a, const float b)
{
  return copysign(a, static_cast<double>(b));
}

static inline __declspec(__host__) __declspec(__device__) double copysign(const float a, const double b)
{
  return copysign(static_cast<double>(a), b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int min(const unsigned int a, const unsigned int b)
{
  return umin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int min(const int a, const unsigned int b)
{
  return umin(static_cast<unsigned int>(a), b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int min(const unsigned int a, const int b)
{
  return umin(a, static_cast<unsigned int>(b));
}

static inline __declspec(__host__) __declspec(__device__) long int min(const long int a, const long int b)
{
  long int retval;
  


#line 890 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
  
  if (sizeof(long int) == sizeof(int)) {


#line 895 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
    retval = static_cast<long int>(min(static_cast<int>(a), static_cast<int>(b)));
  } else {
    retval = static_cast<long int>(llmin(static_cast<long long int>(a), static_cast<long long int>(b)));
  }
  return retval;
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(const unsigned long int a, const unsigned long int b)
{
  unsigned long int retval;


#line 908 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {


#line 912 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
    retval = static_cast<unsigned long int>(umin(static_cast<unsigned int>(a), static_cast<unsigned int>(b)));
  } else {
    retval = static_cast<unsigned long int>(ullmin(static_cast<unsigned long long int>(a), static_cast<unsigned long long int>(b)));
  }
  return retval;
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(const long int a, const unsigned long int b)
{
  unsigned long int retval;


#line 925 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {


#line 929 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
    retval = static_cast<unsigned long int>(umin(static_cast<unsigned int>(a), static_cast<unsigned int>(b)));
  } else {
    retval = static_cast<unsigned long int>(ullmin(static_cast<unsigned long long int>(a), static_cast<unsigned long long int>(b)));
  }
  return retval;
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(const unsigned long int a, const long int b)
{
  unsigned long int retval;


#line 942 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {


#line 946 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
    retval = static_cast<unsigned long int>(umin(static_cast<unsigned int>(a), static_cast<unsigned int>(b)));
  } else {
    retval = static_cast<unsigned long int>(ullmin(static_cast<unsigned long long int>(a), static_cast<unsigned long long int>(b)));
  }
  return retval;
}

static inline __declspec(__host__) __declspec(__device__) long long int min(const long long int a, const long long int b)
{
  return llmin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(const unsigned long long int a, const unsigned long long int b)
{
  return ullmin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(const long long int a, const unsigned long long int b)
{
  return ullmin(static_cast<unsigned long long int>(a), b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(const unsigned long long int a, const long long int b)
{
  return ullmin(a, static_cast<unsigned long long int>(b));
}

static inline __declspec(__host__) __declspec(__device__) float min(const float a, const float b)
{
  return fminf(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double min(const double a, const double b)
{
  return fmin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double min(const float a, const double b)
{
  return fmin(static_cast<double>(a), b);
}

static inline __declspec(__host__) __declspec(__device__) double min(const double a, const float b)
{
  return fmin(a, static_cast<double>(b));
}

static inline __declspec(__host__) __declspec(__device__) unsigned int max(const unsigned int a, const unsigned int b)
{
  return umax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int max(const int a, const unsigned int b)
{
  return umax(static_cast<unsigned int>(a), b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int max(const unsigned int a, const int b)
{
  return umax(a, static_cast<unsigned int>(b));
}

static inline __declspec(__host__) __declspec(__device__) long int max(const long int a, const long int b)
{
  long int retval;
  


#line 1015 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
  if (sizeof(long int) == sizeof(int)) {


#line 1019 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
    retval = static_cast<long int>(max(static_cast<int>(a), static_cast<int>(b)));
  } else {
    retval = static_cast<long int>(llmax(static_cast<long long int>(a), static_cast<long long int>(b)));
  }
  return retval;
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(const unsigned long int a, const unsigned long int b)
{
  unsigned long int retval;


#line 1032 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {


#line 1036 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
    retval = static_cast<unsigned long int>(umax(static_cast<unsigned int>(a), static_cast<unsigned int>(b)));
  } else {
    retval = static_cast<unsigned long int>(ullmax(static_cast<unsigned long long int>(a), static_cast<unsigned long long int>(b)));
  }
  return retval;
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(const long int a, const unsigned long int b)
{
  unsigned long int retval;


#line 1049 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {


#line 1053 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
    retval = static_cast<unsigned long int>(umax(static_cast<unsigned int>(a), static_cast<unsigned int>(b)));
  } else {
    retval = static_cast<unsigned long int>(ullmax(static_cast<unsigned long long int>(a), static_cast<unsigned long long int>(b)));
  }
  return retval;
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(const unsigned long int a, const long int b)
{
  unsigned long int retval;


#line 1066 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {


#line 1070 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
    retval = static_cast<unsigned long int>(umax(static_cast<unsigned int>(a), static_cast<unsigned int>(b)));
  } else {
    retval = static_cast<unsigned long int>(ullmax(static_cast<unsigned long long int>(a), static_cast<unsigned long long int>(b)));
  }
  return retval;
}

static inline __declspec(__host__) __declspec(__device__) long long int max(const long long int a, const long long int b)
{
  return llmax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(const unsigned long long int a, const unsigned long long int b)
{
  return ullmax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(const long long int a, const unsigned long long int b)
{
  return ullmax(static_cast<unsigned long long int>(a), b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(const unsigned long long int a, const long long int b)
{
  return ullmax(a, static_cast<unsigned long long int>(b));
}

static inline __declspec(__host__) __declspec(__device__) float max(const float a, const float b)
{
  return fmaxf(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double max(const double a, const double b)
{
  return fmax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double max(const float a, const double b)
{
  return fmax(static_cast<double>(a), b);
}

static inline __declspec(__host__) __declspec(__device__) double max(const double a, const float b)
{
  return fmax(a, static_cast<double>(b));
}


























































#line 1175 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"










#line 1186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3385 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"

#line 3387 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"




#line 3392 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.hpp"
#line 10704 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

#line 10706 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"

#line 10708 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"




#line 10713 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\math_functions.h"
#line 304 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"

#line 306 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"




#line 311 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/common_functions.h"
#line 116 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_surface_types.h"






























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\channel_descriptor.h"


















































































































































































































































































































































































































































































































































































































#line 596 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\channel_descriptor.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_surface_types.h"

#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_surface_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 67 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_surface_types.h"







template<class T, int dim = 1>
struct __declspec(__device_builtin_surface_type__) surface : public surfaceReference
{

  __declspec(__host__) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<T>();
  }

  __declspec(__host__) surface(struct cudaChannelFormatDesc desc)
  {
    channelDesc = desc;
  }
#line 88 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_surface_types.h"
};

template<int dim>
struct  __declspec(__device_builtin_surface_type__)  surface<void, dim> : public surfaceReference
{

  __declspec(__host__) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<void>();
  }
#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_surface_types.h"
};

#line 102 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_surface_types.h"

#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_surface_types.h"
#line 117 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_texture_types.h"






























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\channel_descriptor.h"


















































































































































































































































































































































































































































































































































































































#line 596 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\channel_descriptor.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_texture_types.h"

#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_texture_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 67 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_texture_types.h"







template<class T, int texType = 0x01, enum cudaTextureReadMode mode = cudaReadModeElementType>
struct __declspec(__device_builtin_texture_type__) texture : public textureReference
{

  __declspec(__host__) texture(int                         norm  = 0,
                   enum cudaTextureFilterMode  fMode = cudaFilterModePoint,
                   enum cudaTextureAddressMode aMode = cudaAddressModeClamp)
  {
    normalized     = norm;
    filterMode     = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc    = cudaCreateChannelDesc<T>();
    sRGB           = 0;
  }

  __declspec(__host__) texture(int                          norm,
                   enum cudaTextureFilterMode   fMode,
                   enum cudaTextureAddressMode  aMode,
                   struct cudaChannelFormatDesc desc)
  {
    normalized     = norm;
    filterMode     = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc    = desc;
    sRGB           = 0;
  }
#line 105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_texture_types.h"
};

#line 108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_texture_types.h"

#line 110 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_texture_types.h"
#line 118 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"















#line 75 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"


#line 78 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"






















































































































#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
































































































































































































































#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 81 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"






















































































































































































#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"
#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"







extern "C"
{









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __mulhi(int x, int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __umulhi(unsigned int x, unsigned int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __mul64hi(long long int x, long long int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __umul64hi(unsigned long long int x, unsigned long long int y);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int_as_float(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float_as_int(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint_as_float(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float_as_uint(float x);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __syncthreads(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __prof_trigger(int);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __threadfence(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __threadfence_block(void);
__declspec(__device__) __declspec(__cudart_builtin__) 


#line 175 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
__declspec(noreturn)
#line 177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
__declspec(__device_builtin__) void                   __trap(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __brkpt();






















__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __saturatef(float x);




































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __sad(int x, int y, unsigned int z);



































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __usad(unsigned int x, unsigned int y, unsigned int z);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __mul24(int x, int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __umul24(unsigned int x, unsigned int y);












__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  fdividef(float x, float y);








































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdividef(float x, float y);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) double                 fdivide(double x, double y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __sinf(float x) ;










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __cosf(float x) ;












__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __tanf(float x) ;














__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void                   __sincosf(float x, float *sptr, float *cptr) ;
















































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __expf(float x) ;






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __exp10f(float x) ;
























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __log2f(float x) ;


























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __log10f(float x) ;










































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __logf(float x) ;









































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __powf(float x, float y) ;








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_ru(float);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_ru(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_rn(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_rz(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_ru(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_rd(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_rn(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_rz(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_ru(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_rd(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_ru(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_ru(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_rn(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_rz(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_ru(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_rd(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_rn(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_rz(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_ru(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_rd(unsigned long long int x);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_rn(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_rz(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_ru(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_rd(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_rn(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_rz(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_ru(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_rd(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_rn(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_rz(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_ru(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_rd(float x, float y);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_rn(float x, float y, float z);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_rz(float x, float y, float z);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_ru(float x, float y, float z);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_rd(float x, float y, float z);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_rn(float x);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_rz(float x);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_ru(float x);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_rd(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_rn(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_rz(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_ru(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_rd(float x);






































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frsqrt_rn(float x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_rn(float x, float y);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_rz(float x, float y);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_ru(float x, float y);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_rd(float x, float y);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __clz(int x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __ffs(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __popc(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __brev(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __clzll(long long int x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __ffsll(long long int x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __popcll(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __brevll(unsigned long long int x);























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __byte_perm(unsigned int x, unsigned int y, unsigned int s);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __hadd(int x, int y);












__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __rhadd(int x, int y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __uhadd(unsigned int x, unsigned int y);












__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __urhadd(unsigned int x, unsigned int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __double2int_rz(double x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __double2uint_rz(double x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __double2ll_rz(double x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __double2ull_rz(double x);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm0(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm1(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm2(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm3(void);







 

















__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabs2(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsss2(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vadd2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddss2 (unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddus2 (unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgs2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vhaddu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpeq2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpges2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgeu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgtu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmples2(unsigned int a, unsigned int b);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpleu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmplts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpltu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpne2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxs2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmins2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vminu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vseteq2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetges2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgeu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgtu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetles2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetleu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetlts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetltu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetne2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsadu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsub2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubss2 (unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubus2 (unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vneg2(unsigned int a);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vnegss2(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffs2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsads2(unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabs4(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsss4(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vadd4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddss4 (unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddus4 (unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgs4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vhaddu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpeq4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpges4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgeu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgtu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmples4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpleu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmplts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpltu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpne4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxs4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmins4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vminu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vseteq4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetles4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetleu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetlts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetltu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetges4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgeu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgtu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetne4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsadu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsub4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubss4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubus4(unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vneg4(unsigned int a);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vnegss4(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffs4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsads4(unsigned int a, unsigned int b);






}













#line 3222 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"







static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("mulhi" "() is deprecated in favor of __" "mulhi" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) int mulhi(const int a, const int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("mulhi" "() is deprecated in favor of __" "mulhi" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int mulhi(const unsigned int a, const unsigned int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("mulhi" "() is deprecated in favor of __" "mulhi" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int mulhi(const int a, const unsigned int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("mulhi" "() is deprecated in favor of __" "mulhi" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int mulhi(const unsigned int a, const int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("mul64hi" "() is deprecated in favor of __" "mul64hi" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) long long int mul64hi(const long long int a, const long long int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("mul64hi" "() is deprecated in favor of __" "mul64hi" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long long int mul64hi(const unsigned long long int a, const unsigned long long int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("mul64hi" "() is deprecated in favor of __" "mul64hi" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long long int mul64hi(const long long int a, const unsigned long long int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("mul64hi" "() is deprecated in favor of __" "mul64hi" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long long int mul64hi(const unsigned long long int a, const long long int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("float_as_int" "() is deprecated in favor of __" "float_as_int" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) int float_as_int(const float a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("int_as_float" "() is deprecated in favor of __" "int_as_float" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) float int_as_float(const int a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("float_as_uint" "() is deprecated in favor of __" "float_as_uint" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int float_as_uint(const float a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("uint_as_float" "() is deprecated in favor of __" "uint_as_float" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) float uint_as_float(const unsigned int a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("saturate" "() is deprecated in favor of __" "saturate" "f" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) float saturate(const float a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("mul24" "() is deprecated in favor of __" "mul24" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) int mul24(const int a, const int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("umul24" "() is deprecated in favor of __" "umul24" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int umul24(const unsigned int a, const unsigned int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("float2int" "() is deprecated in favor of __" "float2int" "_ru|_rd|_rn|_rz" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) int float2int(const float a, const enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("float2uint" "() is deprecated in favor of __" "float2uint" "_ru|_rd|_rn|_rz" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int float2uint(const float a, const enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("int2float" "() is deprecated in favor of __" "int2float" "_ru|_rd|_rn|_rz" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) float int2float(const int a, const enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("uint2float" "() is deprecated in favor of __" "uint2float" "_ru|_rd|_rn|_rz" "() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) float uint2float(const unsigned int a, const enum cudaRoundMode mode = cudaRoundNearest);










#line 3277 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"








#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_functions.hpp"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_functions.hpp"















#line 75 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_functions.hpp"


#line 78 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_functions.hpp"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"






















































































































#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
































































































































































































































#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_functions.hpp"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 81 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_functions.hpp"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"






















































































































































































#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"
#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_functions.hpp"








static __inline __declspec(__device__) int mulhi(const int a, const int b)
{
  return __mulhi(a, b);
}

static __inline __declspec(__device__) unsigned int mulhi(const unsigned int a, const unsigned int b)
{
  return __umulhi(a, b);
}

static __inline __declspec(__device__) unsigned int mulhi(const int a, const unsigned int b)
{
  return __umulhi(static_cast<unsigned int>(a), b);
}

static __inline __declspec(__device__) unsigned int mulhi(const unsigned int a, const int b)
{
  return __umulhi(a, static_cast<unsigned int>(b));
}

static __inline __declspec(__device__) long long int mul64hi(const long long int a, const long long int b)
{
  return __mul64hi(a, b);
}

static __inline __declspec(__device__) unsigned long long int mul64hi(const unsigned long long int a, const unsigned long long int b)
{
  return __umul64hi(a, b);
}

static __inline __declspec(__device__) unsigned long long int mul64hi(const long long int a, const unsigned long long int b)
{
  return __umul64hi(static_cast<unsigned long long int>(a), b);
}

static __inline __declspec(__device__) unsigned long long int mul64hi(const unsigned long long int a, const long long int b)
{
  return __umul64hi(a, static_cast<unsigned long long int>(b));
}

static __inline __declspec(__device__) int float_as_int(const float a)
{
  return __float_as_int(a);
}

static __inline __declspec(__device__) float int_as_float(const int a)
{
  return __int_as_float(a);
}

static __inline __declspec(__device__) unsigned int float_as_uint(const float a)
{
  return __float_as_uint(a);
}

static __inline __declspec(__device__) float uint_as_float(const unsigned int a)
{
  return __uint_as_float(a);
}
static __inline __declspec(__device__) float saturate(const float a)
{
  return __saturatef(a);
}

static __inline __declspec(__device__) int mul24(const int a, const int b)
{
  return __mul24(a, b);
}

static __inline __declspec(__device__) unsigned int umul24(const unsigned int a, const unsigned int b)
{
  return __umul24(a, b);
}

static __inline __declspec(__device__) int float2int(const float a, const enum cudaRoundMode mode)
{
  return (mode == cudaRoundNearest) ? __float2int_rn(a) :
         (mode == cudaRoundPosInf ) ? __float2int_ru(a) :
         (mode == cudaRoundMinInf ) ? __float2int_rd(a) :
                                      __float2int_rz(a);
}

static __inline __declspec(__device__) unsigned int float2uint(const float a, const enum cudaRoundMode mode)
{
  return (mode == cudaRoundNearest) ? __float2uint_rn(a) :
         (mode == cudaRoundPosInf ) ? __float2uint_ru(a) :
         (mode == cudaRoundMinInf ) ? __float2uint_rd(a) :
                                      __float2uint_rz(a);
}

static __inline __declspec(__device__) float int2float(const int a, const enum cudaRoundMode mode)
{
  return (mode == cudaRoundZero  ) ? __int2float_rz(a) :
         (mode == cudaRoundPosInf) ? __int2float_ru(a) :
         (mode == cudaRoundMinInf) ? __int2float_rd(a) :
                                     __int2float_rn(a);
}

static __inline __declspec(__device__) float uint2float(const unsigned int a, const enum cudaRoundMode mode)
{
  return (mode == cudaRoundZero  ) ? __uint2float_rz(a) :
         (mode == cudaRoundPosInf) ? __uint2float_ru(a) :
         (mode == cudaRoundMinInf) ? __uint2float_rd(a) :
                                     __uint2float_rn(a);
}




#line 200 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_functions.hpp"







#line 208 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_functions.hpp"




#line 213 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_functions.hpp"
#line 3286 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 3287 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.h"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.h"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.h"









#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.h"





#line 74 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.h"


extern "C"
{
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicAdd(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicAdd(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicExch(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicExch(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) float        __fAtomicExch(float *address, float val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicMin(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicMin(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicMax(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicMax(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicInc(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicDec(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicAnd(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicAnd(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicOr(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicOr(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicXor(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicXor(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicCAS(int *address, int compare, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicCAS(unsigned int *address, unsigned int compare, unsigned int val);
}
#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.h"







static __inline __declspec(__device__) int atomicAdd(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicAdd(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicSub(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicSub(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicExch(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicExch(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) float atomicExch(float *address, float val) ;

static __inline __declspec(__device__) int atomicMin(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicMin(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicMax(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicMax(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) unsigned int atomicInc(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) unsigned int atomicDec(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicAnd(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicAnd(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicOr(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicOr(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicXor(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicXor(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicCAS(int *address, int compare, int val) ;

static __inline __declspec(__device__) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val) ;







#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 155 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.h"







#line 163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.h"






#line 170 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.h"

extern "C"
{

extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __ullAtomicAdd(unsigned long long int *address, unsigned long long int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __ullAtomicExch(unsigned long long int *address, unsigned long long int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __ullAtomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val);
#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.h"
extern __declspec(__device__) __declspec(__device_builtin__) __declspec(deprecated("__any""() is not valid on compute_70 and above, and should be replaced with ""__any""_sync()." "To continue using ""__any""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70.")) int __any(int cond);
extern __declspec(__device__) __declspec(__device_builtin__) __declspec(deprecated("__all""() is not valid on compute_70 and above, and should be replaced with ""__all""_sync()." "To continue using ""__all""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70.")) int __all(int cond);
}








static __inline __declspec(__device__) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val) ;

static __inline __declspec(__device__) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val) ;

static __inline __declspec(__device__) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val) ;

static __inline __declspec(__device__) __declspec(deprecated("__any""() is not valid on compute_70 and above, and should be replaced with ""__any""_sync()." "To continue using ""__any""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70.")) bool any(bool cond) ;

static __inline __declspec(__device__) __declspec(deprecated("__all""() is not valid on compute_70 and above, and should be replaced with ""__all""_sync()." "To continue using ""__all""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70.")) bool all(bool cond) ;




#line 203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.h"





#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.hpp"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.hpp"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.hpp"









#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.hpp"







static __inline __declspec(__device__) int atomicAdd(int *address, int val)
{
  return __iAtomicAdd(address, val);
}

static __inline __declspec(__device__) unsigned int atomicAdd(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, val);
}

static __inline __declspec(__device__) int atomicSub(int *address, int val)
{
  return __iAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline __declspec(__device__) unsigned int atomicSub(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline __declspec(__device__) int atomicExch(int *address, int val)
{
  return __iAtomicExch(address, val);
}

static __inline __declspec(__device__) unsigned int atomicExch(unsigned int *address, unsigned int val)
{
  return __uAtomicExch(address, val);
}

static __inline __declspec(__device__) float atomicExch(float *address, float val)
{
  return __fAtomicExch(address, val);
}

static __inline __declspec(__device__) int atomicMin(int *address, int val)
{
  return __iAtomicMin(address, val);
}

static __inline __declspec(__device__) unsigned int atomicMin(unsigned int *address, unsigned int val)
{
  return __uAtomicMin(address, val);
}

static __inline __declspec(__device__) int atomicMax(int *address, int val)
{
  return __iAtomicMax(address, val);
}

static __inline __declspec(__device__) unsigned int atomicMax(unsigned int *address, unsigned int val)
{
  return __uAtomicMax(address, val);
}

static __inline __declspec(__device__) unsigned int atomicInc(unsigned int *address, unsigned int val)
{
  return __uAtomicInc(address, val);
}

static __inline __declspec(__device__) unsigned int atomicDec(unsigned int *address, unsigned int val)
{
  return __uAtomicDec(address, val);
}

static __inline __declspec(__device__) int atomicAnd(int *address, int val)
{
  return __iAtomicAnd(address, val);
}

static __inline __declspec(__device__) unsigned int atomicAnd(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd(address, val);
}

static __inline __declspec(__device__) int atomicOr(int *address, int val)
{
  return __iAtomicOr(address, val);
}

static __inline __declspec(__device__) unsigned int atomicOr(unsigned int *address, unsigned int val)
{
  return __uAtomicOr(address, val);
}

static __inline __declspec(__device__) int atomicXor(int *address, int val)
{
  return __iAtomicXor(address, val);
}

static __inline __declspec(__device__) unsigned int atomicXor(unsigned int *address, unsigned int val)
{
  return __uAtomicXor(address, val);
}

static __inline __declspec(__device__) int atomicCAS(int *address, int compare, int val)
{
  return __iAtomicCAS(address, compare, val);
}

static __inline __declspec(__device__) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val)
{
  return __uAtomicCAS(address, compare, val);
}







#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 187 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.hpp"







static __inline __declspec(__device__) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicAdd(address, val);
}

static __inline __declspec(__device__) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicExch(address, val);
}

static __inline __declspec(__device__) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val)
{
  return __ullAtomicCAS(address, compare, val);
}

static __inline __declspec(__device__) bool any(bool cond)
{
  return (bool)__any((int)cond);
}

static __inline __declspec(__device__) bool all(bool cond)
{
  return (bool)__all((int)cond);
}

#line 220 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.hpp"



#line 224 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.hpp"

#line 209 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.h"
#line 210 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.h"

#line 212 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_atomic_functions.h"
#line 3289 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.h"




















#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.h"

#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.h"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"






















































































































#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
































































































































































































































#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 84 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 85 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"






















































































































































































#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"
#line 86 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.h"

extern "C"
{








extern __declspec(__device__) __declspec(__device_builtin__) long long int         __double_as_longlong(double x);








extern __declspec(__device__) __declspec(__device_builtin__) double                __longlong_as_double(long long int x);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rn(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rz(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_ru(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rd(double x, double y, double z);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rz(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rd(double x, double y);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rz(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rd(double x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __int2double_rn(int x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __uint2double_rn(unsigned int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rn(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rz(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_ru(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rd(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rn(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rz(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_ru(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rd(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2hiint(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2loint(double x);









extern __declspec(__device__) __declspec(__device_builtin__) double                 __hiloint2double(int hi, int lo);
}







static __inline __declspec(__device__) double fma(double a, double b, double c, enum cudaRoundMode mode);

static __inline __declspec(__device__) double dmul(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double dadd(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double dsub(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) int double2int(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) unsigned int double2uint(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) long long int double2ll(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) unsigned long long int double2ull(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) double ll2double(long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double ull2double(unsigned long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double int2double(int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double uint2double(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double float2double(float a, enum cudaRoundMode mode = cudaRoundNearest);



#line 1176 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.hpp"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.hpp"




















#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.hpp"

#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.hpp"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"






















































































































#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
































































































































































































































#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 84 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.hpp"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 85 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.hpp"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"






















































































































































































#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"
#line 86 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.hpp"







static __inline __declspec(__device__) double fma(double a, double b, double c, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __fma_rz(a, b, c) :
         mode == cudaRoundPosInf ? __fma_ru(a, b, c) :
         mode == cudaRoundMinInf ? __fma_rd(a, b, c) :
                                   __fma_rn(a, b, c);
}

static __inline __declspec(__device__) double dmul(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __dmul_rz(a, b) :
         mode == cudaRoundPosInf ? __dmul_ru(a, b) :
         mode == cudaRoundMinInf ? __dmul_rd(a, b) :
                                   __dmul_rn(a, b);
}

static __inline __declspec(__device__) double dadd(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __dadd_rz(a, b) :
         mode == cudaRoundPosInf ? __dadd_ru(a, b) :
         mode == cudaRoundMinInf ? __dadd_rd(a, b) :
                                   __dadd_rn(a, b);
}

static __inline __declspec(__device__) double dsub(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __dsub_rz(a, b) :
         mode == cudaRoundPosInf ? __dsub_ru(a, b) :
         mode == cudaRoundMinInf ? __dsub_rd(a, b) :
                                   __dsub_rn(a, b);
}

static __inline __declspec(__device__) int double2int(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2int_rn(a) :
         mode == cudaRoundPosInf  ? __double2int_ru(a) :
         mode == cudaRoundMinInf  ? __double2int_rd(a) :
                                    __double2int_rz(a);
}

static __inline __declspec(__device__) unsigned int double2uint(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2uint_rn(a) :
         mode == cudaRoundPosInf  ? __double2uint_ru(a) :
         mode == cudaRoundMinInf  ? __double2uint_rd(a) :
                                    __double2uint_rz(a);
}

static __inline __declspec(__device__) long long int double2ll(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ll_rn(a) :
         mode == cudaRoundPosInf  ? __double2ll_ru(a) :
         mode == cudaRoundMinInf  ? __double2ll_rd(a) :
                                    __double2ll_rz(a);
}

static __inline __declspec(__device__) unsigned long long int double2ull(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ull_rn(a) :
         mode == cudaRoundPosInf  ? __double2ull_ru(a) :
         mode == cudaRoundMinInf  ? __double2ull_rd(a) :
                                    __double2ull_rz(a);
}

static __inline __declspec(__device__) double ll2double(long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __ll2double_rz(a) :
         mode == cudaRoundPosInf ? __ll2double_ru(a) :
         mode == cudaRoundMinInf ? __ll2double_rd(a) :
                                   __ll2double_rn(a);
}

static __inline __declspec(__device__) double ull2double(unsigned long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __ull2double_rz(a) :
         mode == cudaRoundPosInf ? __ull2double_ru(a) :
         mode == cudaRoundMinInf ? __ull2double_rd(a) :
                                   __ull2double_rn(a);
}

static __inline __declspec(__device__) double int2double(int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline __declspec(__device__) double uint2double(unsigned int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline __declspec(__device__) double float2double(float a, enum cudaRoundMode mode)
{
  return (double)a;
}



#line 191 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.hpp"

#line 193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.hpp"




#line 198 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.hpp"
#line 1179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.h"
#line 1180 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.h"

#line 1182 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.h"




#line 1187 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\device_double_functions.h"
#line 3290 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_atomic_functions.h"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_atomic_functions.h"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_atomic_functions.h"









#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_atomic_functions.h"





#line 74 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_atomic_functions.h"



extern "C"
{
extern __declspec(__device__) __declspec(__device_builtin__) float __fAtomicAdd(float *address, float val);
}
#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_atomic_functions.h"







static __inline __declspec(__device__) float atomicAdd(float *address, float val) ;

#line 92 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_atomic_functions.h"





#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_atomic_functions.hpp"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_atomic_functions.hpp"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_atomic_functions.hpp"









#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_atomic_functions.hpp"







static __inline __declspec(__device__) float atomicAdd(float *address, float val)
{
  return __fAtomicAdd(address, val);
}

#line 81 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_atomic_functions.hpp"



#line 85 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_atomic_functions.hpp"

#line 98 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_atomic_functions.h"
#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_atomic_functions.h"

#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_atomic_functions.h"
#line 3291 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.h"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.h"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.h"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.h"





#line 76 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.h"



extern "C"
{
extern __declspec(__device__) __declspec(__device_builtin__) long long __illAtomicMin(long long *address, long long val);
extern __declspec(__device__) __declspec(__device_builtin__) long long __illAtomicMax(long long *address, long long val);
extern __declspec(__device__) __declspec(__device_builtin__) long long __llAtomicAnd(long long *address, long long val);
extern __declspec(__device__) __declspec(__device_builtin__) long long __llAtomicOr(long long *address, long long val);
extern __declspec(__device__) __declspec(__device_builtin__) long long __llAtomicXor(long long *address, long long val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long __ullAtomicMin(unsigned long long *address, unsigned long long val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long __ullAtomicMax(unsigned long long *address, unsigned long long val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long __ullAtomicAnd(unsigned long long *address, unsigned long long val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long __ullAtomicOr (unsigned long long *address, unsigned long long val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long __ullAtomicXor(unsigned long long *address, unsigned long long val);
}
#line 93 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.h"







static __inline __declspec(__device__) long long atomicMin(long long *address, long long val) ;

static __inline __declspec(__device__) long long atomicMax(long long *address, long long val) ;

static __inline __declspec(__device__) long long atomicAnd(long long *address, long long val) ;

static __inline __declspec(__device__) long long atomicOr(long long *address, long long val) ;

static __inline __declspec(__device__) long long atomicXor(long long *address, long long val) ;

static __inline __declspec(__device__) unsigned long long atomicMin(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__) unsigned long long atomicMax(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__) unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__) unsigned long long atomicOr(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__) unsigned long long atomicXor(unsigned long long *address, unsigned long long val) ;

#line 121 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.h"

#line 123 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.h"





#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.hpp"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.hpp"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.hpp"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.hpp"







static __inline __declspec(__device__) long long atomicMin(long long *address, long long val)
{
    return __illAtomicMin(address, val);
}

static __inline __declspec(__device__) long long atomicMax(long long *address, long long val)
{
    return __illAtomicMax(address, val);
}

static __inline __declspec(__device__) long long atomicAnd(long long *address, long long val)
{
    return __llAtomicAnd(address, val);
}

static __inline __declspec(__device__) long long atomicOr(long long *address, long long val)
{
    return __llAtomicOr(address, val);
}

static __inline __declspec(__device__) long long atomicXor(long long *address, long long val)
{
    return __llAtomicXor(address, val);
}

static __inline __declspec(__device__) unsigned long long atomicMin(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicMin(address, val);
}

static __inline __declspec(__device__) unsigned long long atomicMax(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicMax(address, val);
}

static __inline __declspec(__device__) unsigned long long atomicAnd(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicAnd(address, val);
}

static __inline __declspec(__device__) unsigned long long atomicOr(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicOr(address, val);
}

static __inline __declspec(__device__) unsigned long long atomicXor(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicXor(address, val);
}

#line 128 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.hpp"

#line 130 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.hpp"



#line 134 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.hpp"

#line 129 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.h"
#line 130 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.h"

#line 132 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.h"
#line 3292 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_35_atomic_functions.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.h"


































































































































#line 132 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_atomic_functions.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_35_atomic_functions.h"

#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_35_atomic_functions.h"
#line 3293 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.h"























































#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.h"

#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.h"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 71 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.h"





#line 77 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.h"




extern "C"
{
extern __declspec(__device__) __declspec(__device_builtin__) double __dAtomicAdd(double *address, double val);

extern __declspec(__device__) __declspec(__device_builtin__)
int __iAtomicAdd_block(int *address, int val);

extern __declspec(__device__) __declspec(__device_builtin__)
int __iAtomicAdd_system(int *address, int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicAdd_block(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicAdd_system(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned long long __ullAtomicAdd_block(unsigned long long *address, unsigned long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned long long __ullAtomicAdd_system(unsigned long long *address, unsigned long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
float __fAtomicAdd_block(float *address, float val);

extern __declspec(__device__) __declspec(__device_builtin__)
float __fAtomicAdd_system(float *address, float val);

extern __declspec(__device__) __declspec(__device_builtin__)
double __dAtomicAdd_block(double *address, double val);

extern __declspec(__device__) __declspec(__device_builtin__)
double __dAtomicAdd_system(double *address, double val);

extern __declspec(__device__) __declspec(__device_builtin__)
int __iAtomicExch_block(int *address, int val);

extern __declspec(__device__) __declspec(__device_builtin__)
int __iAtomicExch_system(int *address, int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicExch_block(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicExch_system(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned long long __ullAtomicExch_block(unsigned long long *address, unsigned long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned long long __ullAtomicExch_system(unsigned long long *address, unsigned long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
float __fAtomicExch_block(float *address, float val);

extern __declspec(__device__) __declspec(__device_builtin__)
float __fAtomicExch_system(float *address, float val);

extern __declspec(__device__) __declspec(__device_builtin__)
int __iAtomicMin_block(int *address, int val);

extern __declspec(__device__) __declspec(__device_builtin__)
int __iAtomicMin_system(int *address, int val);

extern __declspec(__device__) __declspec(__device_builtin__)
long long __illAtomicMin_block(long long *address, long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
long long __illAtomicMin_system(long long *address, long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicMin_block(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicMin_system(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned long long __ullAtomicMin_block(unsigned long long *address, unsigned long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned long long __ullAtomicMin_system(unsigned long long *address, unsigned long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
int __iAtomicMax_block(int *address, int val);

extern __declspec(__device__) __declspec(__device_builtin__)
int __iAtomicMax_system(int *address, int val);

extern __declspec(__device__) __declspec(__device_builtin__)
long long __illAtomicMax_block(long long *address, long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
long long __illAtomicMax_system(long long *address, long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicMax_block(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicMax_system(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned long long __ullAtomicMax_block(unsigned long long *address, unsigned long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned long long __ullAtomicMax_system(unsigned long long *address, unsigned long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicInc_block(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicInc_system(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicDec_block(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicDec_system(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
int __iAtomicCAS_block(int *address, int compare, int val);

extern __declspec(__device__) __declspec(__device_builtin__)
int __iAtomicCAS_system(int *address, int compare, int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicCAS_block(unsigned int *address, unsigned int compare,
                                unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicCAS_system(unsigned int *address, unsigned int compare,
                                 unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned long long __ullAtomicCAS_block(unsigned long long int *address,
                                        unsigned long long int compare,
                                        unsigned long long int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned long long __ullAtomicCAS_system(unsigned long long int *address,
                                         unsigned long long int compare,
                                         unsigned long long int val);

extern __declspec(__device__) __declspec(__device_builtin__)
int __iAtomicAnd_block(int *address, int val);

extern __declspec(__device__) __declspec(__device_builtin__)
int __iAtomicAnd_system(int *address, int val);

extern __declspec(__device__) __declspec(__device_builtin__)
long long __llAtomicAnd_block(long long *address, long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
long long __llAtomicAnd_system(long long *address, long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicAnd_block(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicAnd_system(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned long long __ullAtomicAnd_block(unsigned long long *address, unsigned long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned long long __ullAtomicAnd_system(unsigned long long *address, unsigned long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
int __iAtomicOr_block(int *address, int val);

extern __declspec(__device__) __declspec(__device_builtin__)
int __iAtomicOr_system(int *address, int val);

extern __declspec(__device__) __declspec(__device_builtin__)
long long __llAtomicOr_block(long long *address, long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
long long __llAtomicOr_system(long long *address, long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicOr_block(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicOr_system(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned long long __ullAtomicOr_block(unsigned long long *address, unsigned long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned long long __ullAtomicOr_system(unsigned long long *address, unsigned long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
int __iAtomicXor_block(int *address, int val);

extern __declspec(__device__) __declspec(__device_builtin__)
int __iAtomicXor_system(int *address, int val);

extern __declspec(__device__) __declspec(__device_builtin__)
long long __llAtomicXor_block(long long *address, long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
long long __llAtomicXor_system(long long *address, long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicXor_block(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned int __uAtomicXor_system(unsigned int *address, unsigned int val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned long long __ullAtomicXor_block(unsigned long long *address, unsigned long long val);

extern __declspec(__device__) __declspec(__device_builtin__)
unsigned long long __ullAtomicXor_system(unsigned long long *address, unsigned long long val);
}
#line 296 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.h"







static __inline __declspec(__device__) double atomicAdd(double *address, double val) ;

static __inline __declspec(__device__)
int atomicAdd_block(int *address, int val) ;

static __inline __declspec(__device__)
int atomicAdd_system(int *address, int val) ;

static __inline __declspec(__device__)
unsigned int atomicAdd_block(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned int atomicAdd_system(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__)
unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__)
float atomicAdd_block(float *address, float val) ;

static __inline __declspec(__device__)
float atomicAdd_system(float *address, float val) ;

static __inline __declspec(__device__)
double atomicAdd_block(double *address, double val) ;

static __inline __declspec(__device__)
double atomicAdd_system(double *address, double val) ;

static __inline __declspec(__device__)
int atomicSub_block(int *address, int val) ;

static __inline __declspec(__device__)
int atomicSub_system(int *address, int val) ;

static __inline __declspec(__device__)
unsigned int atomicSub_block(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned int atomicSub_system(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
int atomicExch_block(int *address, int val) ;

static __inline __declspec(__device__)
int atomicExch_system(int *address, int val) ;

static __inline __declspec(__device__)
unsigned int atomicExch_block(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned int atomicExch_system(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__)
unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__)
float atomicExch_block(float *address, float val) ;

static __inline __declspec(__device__)
float atomicExch_system(float *address, float val) ;

static __inline __declspec(__device__)
int atomicMin_block(int *address, int val) ;

static __inline __declspec(__device__)
int atomicMin_system(int *address, int val) ;

static __inline __declspec(__device__)
long long atomicMin_block(long long *address, long long val) ;

static __inline __declspec(__device__)
long long atomicMin_system(long long *address, long long val) ;

static __inline __declspec(__device__)
unsigned int atomicMin_block(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned int atomicMin_system(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__)
unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__)
int atomicMax_block(int *address, int val) ;

static __inline __declspec(__device__)
int atomicMax_system(int *address, int val) ;

static __inline __declspec(__device__)
long long atomicMax_block(long long *address, long long val) ;

static __inline __declspec(__device__)
long long atomicMax_system(long long *address, long long val) ;

static __inline __declspec(__device__)
unsigned int atomicMax_block(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned int atomicMax_system(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__)
unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__)
unsigned int atomicInc_block(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned int atomicInc_system(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned int atomicDec_block(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned int atomicDec_system(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
int atomicCAS_block(int *address, int compare, int val) ;

static __inline __declspec(__device__)
int atomicCAS_system(int *address, int compare, int val) ;

static __inline __declspec(__device__)
unsigned int atomicCAS_block(unsigned int *address, unsigned int compare,
                             unsigned int val) ;

static __inline __declspec(__device__)
unsigned int atomicCAS_system(unsigned int *address, unsigned int compare,
                              unsigned int val) ;

static __inline __declspec(__device__)
unsigned long long int atomicCAS_block(unsigned long long int *address,
                                       unsigned long long int compare,
                                       unsigned long long int val) ;

static __inline __declspec(__device__)
unsigned long long int atomicCAS_system(unsigned long long int *address,
                                        unsigned long long int compare,
                                        unsigned long long int val) ;

static __inline __declspec(__device__)
int atomicAnd_block(int *address, int val) ;

static __inline __declspec(__device__)
int atomicAnd_system(int *address, int val) ;

static __inline __declspec(__device__)
long long atomicAnd_block(long long *address, long long val) ;

static __inline __declspec(__device__)
long long atomicAnd_system(long long *address, long long val) ;

static __inline __declspec(__device__)
unsigned int atomicAnd_block(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned int atomicAnd_system(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__)
unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__)
int atomicOr_block(int *address, int val) ;

static __inline __declspec(__device__)
int atomicOr_system(int *address, int val) ;

static __inline __declspec(__device__)
long long atomicOr_block(long long *address, long long val) ;

static __inline __declspec(__device__)
long long atomicOr_system(long long *address, long long val) ;

static __inline __declspec(__device__)
unsigned int atomicOr_block(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned int atomicOr_system(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__)
unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__)
int atomicXor_block(int *address, int val) ;

static __inline __declspec(__device__)
int atomicXor_system(int *address, int val) ;

static __inline __declspec(__device__)
long long atomicXor_block(long long *address, long long val) ;

static __inline __declspec(__device__)
long long atomicXor_system(long long *address, long long val) ;

static __inline __declspec(__device__)
unsigned int atomicXor_block(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned int atomicXor_system(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__)
unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__)
unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val) ;

#line 528 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.h"

#line 530 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.h"





#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.hpp"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.hpp"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.hpp"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.hpp"







static __inline __declspec(__device__) double atomicAdd(double *address, double val)
{
  return __dAtomicAdd(address, val);
}

static __inline __declspec(__device__)
int atomicAdd_block(int *address, int val)
{
  return __iAtomicAdd_block(address, val);
}

static __inline __declspec(__device__)
int atomicAdd_system(int *address, int val)
{
  return __iAtomicAdd_system(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicAdd_block(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd_block(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicAdd_system(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd_system(address, val);
}

static __inline __declspec(__device__)
unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicAdd_block(address, val);
}

static __inline __declspec(__device__)
unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicAdd_system(address, val);
}

static __inline __declspec(__device__)
float atomicAdd_block(float *address, float val)
{
  return __fAtomicAdd_block(address, val);
}

static __inline __declspec(__device__)
float atomicAdd_system(float *address, float val)
{
  return __fAtomicAdd_system(address, val);
}

static __inline __declspec(__device__)
double atomicAdd_block(double *address, double val)
{
  return __dAtomicAdd_block(address, val);
}

static __inline __declspec(__device__)
double atomicAdd_system(double *address, double val)
{
  return __dAtomicAdd_system(address, val);
}

static __inline __declspec(__device__)
int atomicSub_block(int *address, int val)
{
  return __iAtomicAdd_block(address, (unsigned int)-(int)val);
}

static __inline __declspec(__device__)
int atomicSub_system(int *address, int val)
{
  return __iAtomicAdd_system(address, (unsigned int)-(int)val);
}

static __inline __declspec(__device__)
unsigned int atomicSub_block(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd_block(address, (unsigned int)-(int)val);
}

static __inline __declspec(__device__)
unsigned int atomicSub_system(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd_system(address, (unsigned int)-(int)val);
}

static __inline __declspec(__device__)
int atomicExch_block(int *address, int val)
{
  return __iAtomicExch_block(address, val);
}

static __inline __declspec(__device__)
int atomicExch_system(int *address, int val)
{
  return __iAtomicExch_system(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicExch_block(unsigned int *address, unsigned int val)
{
  return __uAtomicExch_block(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicExch_system(unsigned int *address, unsigned int val)
{
  return __uAtomicExch_system(address, val);
}

static __inline __declspec(__device__)
unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicExch_block(address, val);
}

static __inline __declspec(__device__)
unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicExch_system(address, val);
}

static __inline __declspec(__device__)
float atomicExch_block(float *address, float val)
{
  return __fAtomicExch_block(address, val);
}

static __inline __declspec(__device__)
float atomicExch_system(float *address, float val)
{
  return __fAtomicExch_system(address, val);
}

static __inline __declspec(__device__)
int atomicMin_block(int *address, int val)
{
  return __iAtomicMin_block(address, val);
}

static __inline __declspec(__device__)
int atomicMin_system(int *address, int val)
{
  return __iAtomicMin_system(address, val);
}

static __inline __declspec(__device__)
long long atomicMin_block(long long *address, long long val)
{
  return __illAtomicMin_block(address, val);
}

static __inline __declspec(__device__)
long long atomicMin_system(long long *address, long long val)
{
  return __illAtomicMin_system(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicMin_block(unsigned int *address, unsigned int val)
{
  return __uAtomicMin_block(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicMin_system(unsigned int *address, unsigned int val)
{
  return __uAtomicMin_system(address, val);
}

static __inline __declspec(__device__)
unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicMin_block(address, val);
}

static __inline __declspec(__device__)
unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicMin_system(address, val);
}

static __inline __declspec(__device__)
int atomicMax_block(int *address, int val)
{
  return __iAtomicMax_block(address, val);
}

static __inline __declspec(__device__)
int atomicMax_system(int *address, int val)
{
  return __iAtomicMax_system(address, val);
}

static __inline __declspec(__device__)
long long atomicMax_block(long long *address, long long val)
{
  return __illAtomicMax_block(address, val);
}

static __inline __declspec(__device__)
long long atomicMax_system(long long *address, long long val)
{
  return __illAtomicMax_system(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicMax_block(unsigned int *address, unsigned int val)
{
  return __uAtomicMax_block(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicMax_system(unsigned int *address, unsigned int val)
{
  return __uAtomicMax_system(address, val);
}

static __inline __declspec(__device__)
unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicMax_block(address, val);
}

static __inline __declspec(__device__)
unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicMax_system(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicInc_block(unsigned int *address, unsigned int val)
{
  return __uAtomicInc_block(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicInc_system(unsigned int *address, unsigned int val)
{
  return __uAtomicInc_system(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicDec_block(unsigned int *address, unsigned int val)
{
  return __uAtomicDec_block(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicDec_system(unsigned int *address, unsigned int val)
{
  return __uAtomicDec_system(address, val);
}

static __inline __declspec(__device__)
int atomicCAS_block(int *address, int compare, int val)
{
  return __iAtomicCAS_block(address, compare, val);
}

static __inline __declspec(__device__)
int atomicCAS_system(int *address, int compare, int val)
{
  return __iAtomicCAS_system(address, compare, val);
}

static __inline __declspec(__device__)
unsigned int atomicCAS_block(unsigned int *address, unsigned int compare,
                             unsigned int val)
{
  return __uAtomicCAS_block(address, compare, val);
}

static __inline __declspec(__device__)
unsigned int atomicCAS_system(unsigned int *address, unsigned int compare,
                              unsigned int val)
{
  return __uAtomicCAS_system(address, compare, val);
}

static __inline __declspec(__device__)
unsigned long long int atomicCAS_block(unsigned long long int *address,
                                       unsigned long long int compare,
                                       unsigned long long int val)
{
  return __ullAtomicCAS_block(address, compare, val);
}

static __inline __declspec(__device__)
unsigned long long int atomicCAS_system(unsigned long long int *address,
                                        unsigned long long int compare,
                                        unsigned long long int val)
{
  return __ullAtomicCAS_system(address, compare, val);
}

static __inline __declspec(__device__)
int atomicAnd_block(int *address, int val)
{
  return __iAtomicAnd_block(address, val);
}

static __inline __declspec(__device__)
int atomicAnd_system(int *address, int val)
{
  return __iAtomicAnd_system(address, val);
}

static __inline __declspec(__device__)
long long atomicAnd_block(long long *address, long long val)
{
  return __llAtomicAnd_block(address, val);
}

static __inline __declspec(__device__)
long long atomicAnd_system(long long *address, long long val)
{
  return __llAtomicAnd_system(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicAnd_block(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd_block(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicAnd_system(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd_system(address, val);
}

static __inline __declspec(__device__)
unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicAnd_block(address, val);
}

static __inline __declspec(__device__)
unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicAnd_system(address, val);
}

static __inline __declspec(__device__)
int atomicOr_block(int *address, int val)
{
  return __iAtomicOr_block(address, val);
}

static __inline __declspec(__device__)
int atomicOr_system(int *address, int val)
{
  return __iAtomicOr_system(address, val);
}

static __inline __declspec(__device__)
long long atomicOr_block(long long *address, long long val)
{
  return __llAtomicOr_block(address, val);
}

static __inline __declspec(__device__)
long long atomicOr_system(long long *address, long long val)
{
  return __llAtomicOr_system(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicOr_block(unsigned int *address, unsigned int val)
{
  return __uAtomicOr_block(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicOr_system(unsigned int *address, unsigned int val)
{
  return __uAtomicOr_system(address, val);
}

static __inline __declspec(__device__)
unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicOr_block(address, val);
}

static __inline __declspec(__device__)
unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicOr_system(address, val);
}

static __inline __declspec(__device__)
int atomicXor_block(int *address, int val)
{
  return __iAtomicXor_block(address, val);
}

static __inline __declspec(__device__)
int atomicXor_system(int *address, int val)
{
  return __iAtomicXor_system(address, val);
}

static __inline __declspec(__device__)
long long atomicXor_block(long long *address, long long val)
{
  return __llAtomicXor_block(address, val);
}

static __inline __declspec(__device__)
long long atomicXor_system(long long *address, long long val)
{
  return __llAtomicXor_system(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicXor_block(unsigned int *address, unsigned int val)
{
  return __uAtomicXor_block(address, val);
}

static __inline __declspec(__device__)
unsigned int atomicXor_system(unsigned int *address, unsigned int val)
{
  return __uAtomicXor_system(address, val);
}

static __inline __declspec(__device__)
unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicXor_block(address, val);
}

static __inline __declspec(__device__)
unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicXor_system(address, val);
}

#line 521 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.hpp"

#line 523 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.hpp"



#line 527 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.hpp"

#line 536 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.h"
#line 537 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.h"

#line 539 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_60_atomic_functions.h"

#line 3294 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_intrinsics.h"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_intrinsics.h"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_intrinsics.h"









#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_intrinsics.h"





#line 74 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_intrinsics.h"







#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_intrinsics.h"






#line 89 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_intrinsics.h"

extern "C"
{
extern __declspec(__device__) __declspec(__device_builtin__) void                   __threadfence_system(void);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rz(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rd(double x, double y);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rn(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rz(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_ru(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rd(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rn(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rz(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_ru(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rd(double x);
extern __declspec(__device__) __declspec(__device_builtin__) __declspec(deprecated("__ballot""() is not valid on compute_70 and above, and should be replaced with ""__ballot""_sync()." "To continue using ""__ballot""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70.")) unsigned int __ballot(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_count(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_and(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_or(int);
extern __declspec(__device__) __declspec(__device_builtin__) long long int         clock64(void);









extern __declspec(__device__) __declspec(__device_builtin__) float                  __fmaf_ieee_rn(float x, float y, float z);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __fmaf_ieee_rd(float x, float y, float z);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __fmaf_ieee_ru(float x, float y, float z);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __fmaf_ieee_rz(float x, float y, float z);












extern __declspec(__device__) __declspec(__device_builtin__) long long int         __double_as_longlong(double x);








extern __declspec(__device__) __declspec(__device_builtin__) double                __longlong_as_double(long long int x);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rn(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rz(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_ru(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rd(double x, double y, double z);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rz(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rd(double x, double y);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rz(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rd(double x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __int2double_rn(int x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __uint2double_rn(unsigned int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rn(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rz(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_ru(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rd(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rn(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rz(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_ru(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rd(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2hiint(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2loint(double x);









extern __declspec(__device__) __declspec(__device_builtin__) double                 __hiloint2double(int hi, int lo);


}






static __inline __declspec(__device__) __declspec(deprecated("__ballot""() is not valid on compute_70 and above, and should be replaced with ""__ballot""_sync()." "To continue using ""__ballot""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70.")) unsigned int ballot(bool pred) ;

static __inline __declspec(__device__) int syncthreads_count(bool pred) ;

static __inline __declspec(__device__) bool syncthreads_and(bool pred) ;

static __inline __declspec(__device__) bool syncthreads_or(bool pred) ;




static __inline __declspec(__device__) unsigned int __isGlobal(const void *ptr) ;
static __inline __declspec(__device__) unsigned int __isShared(const void *ptr) ;
static __inline __declspec(__device__) unsigned int __isConstant(const void *ptr) ;
static __inline __declspec(__device__) unsigned int __isLocal(const void *ptr) ;

static __inline __declspec(__device__) size_t __cvta_generic_to_global(const void *ptr) ;
static __inline __declspec(__device__) size_t __cvta_generic_to_shared(const void *ptr) ;
static __inline __declspec(__device__) size_t __cvta_generic_to_constant(const void *ptr) ;
static __inline __declspec(__device__) size_t __cvta_generic_to_local(const void *ptr) ;

static __inline __declspec(__device__) void * __cvta_global_to_generic(size_t rawbits) ;
static __inline __declspec(__device__) void * __cvta_shared_to_generic(size_t rawbits) ;
static __inline __declspec(__device__) void * __cvta_constant_to_generic(size_t rawbits) ;
static __inline __declspec(__device__) void * __cvta_local_to_generic(size_t rawbits) ;

#line 1537 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_intrinsics.h"





#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_intrinsics.hpp"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_intrinsics.hpp"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_intrinsics.hpp"









#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_intrinsics.hpp"







static __inline __declspec(__device__) unsigned int ballot(bool pred)
{
  return __ballot((int)pred);
}

static __inline __declspec(__device__) int syncthreads_count(bool pred)
{
  return __syncthreads_count((int)pred);
}

static __inline __declspec(__device__) bool syncthreads_and(bool pred)
{
  return (bool)__syncthreads_and((int)pred);
}

static __inline __declspec(__device__) bool syncthreads_or(bool pred)
{
  return (bool)__syncthreads_or((int)pred);
}


extern "C" {
  __declspec(__device__) unsigned __nv_isGlobal_impl(const void *);
  __declspec(__device__) unsigned __nv_isShared_impl(const void *);
  __declspec(__device__) unsigned __nv_isConstant_impl(const void *);
  __declspec(__device__) unsigned __nv_isLocal_impl(const void *);
}

static __inline __declspec(__device__) unsigned int __isGlobal(const void *ptr)
{
  return __nv_isGlobal_impl(ptr); 
}

static __inline __declspec(__device__) unsigned int __isShared(const void *ptr)
{
  return __nv_isShared_impl(ptr); 
}

static __inline __declspec(__device__) unsigned int __isConstant(const void *ptr)
{
  return __nv_isConstant_impl(ptr); 
}

static __inline __declspec(__device__) unsigned int __isLocal(const void *ptr)
{
  return __nv_isLocal_impl(ptr); 
}

extern "C" {
  __declspec(__device__) size_t __nv_cvta_generic_to_global_impl(const void *);
  __declspec(__device__) size_t __nv_cvta_generic_to_shared_impl(const void *);
  __declspec(__device__) size_t __nv_cvta_generic_to_constant_impl(const void *);
  __declspec(__device__) size_t __nv_cvta_generic_to_local_impl(const void *);
  __declspec(__device__) void * __nv_cvta_global_to_generic_impl(size_t);
  __declspec(__device__) void * __nv_cvta_shared_to_generic_impl(size_t);
  __declspec(__device__) void * __nv_cvta_constant_to_generic_impl(size_t);
  __declspec(__device__) void * __nv_cvta_local_to_generic_impl(size_t);
}

static __inline __declspec(__device__) size_t __cvta_generic_to_global(const void *p)
{
  return __nv_cvta_generic_to_global_impl(p);
}

static __inline __declspec(__device__) size_t __cvta_generic_to_shared(const void *p)
{
  return __nv_cvta_generic_to_shared_impl(p);
}

static __inline __declspec(__device__) size_t __cvta_generic_to_constant(const void *p)
{
  return __nv_cvta_generic_to_constant_impl(p);
}

static __inline __declspec(__device__) size_t __cvta_generic_to_local(const void *p)
{
  return __nv_cvta_generic_to_local_impl(p);
}

static __inline __declspec(__device__) void * __cvta_global_to_generic(size_t rawbits)
{
  return __nv_cvta_global_to_generic_impl(rawbits);
}

static __inline __declspec(__device__) void * __cvta_shared_to_generic(size_t rawbits)
{
  return __nv_cvta_shared_to_generic_impl(rawbits);
}

static __inline __declspec(__device__) void * __cvta_constant_to_generic(size_t rawbits)
{
  return __nv_cvta_constant_to_generic_impl(rawbits);
}

static __inline __declspec(__device__) void * __cvta_local_to_generic(size_t rawbits)
{
  return __nv_cvta_local_to_generic_impl(rawbits);
}

#line 175 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_intrinsics.hpp"



#line 179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_intrinsics.hpp"

#line 1543 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_intrinsics.h"
#line 1544 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_intrinsics.h"
#line 1545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_20_intrinsics.h"
#line 3295 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.h"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.h"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.h"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.h"





#line 76 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.h"












#line 89 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.h"







#line 97 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.h"



#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.h"

static __declspec(__device__) __inline unsigned  __fns(unsigned mask, unsigned base, int offset) ;
static __declspec(__device__) __inline void  __barrier_sync(unsigned id) ;
static __declspec(__device__) __inline void  __barrier_sync_count(unsigned id, unsigned cnt) ;
static __declspec(__device__) __inline void  __syncwarp(unsigned mask=0xFFFFFFFF) ;
static __declspec(__device__) __inline int __all_sync(unsigned mask, int pred) ;
static __declspec(__device__) __inline int __any_sync(unsigned mask, int pred) ;
static __declspec(__device__) __inline int __uni_sync(unsigned mask, int pred) ;
static __declspec(__device__) __inline unsigned __ballot_sync(unsigned mask, int pred) ;
static __declspec(__device__) __inline unsigned __activemask() ;




















#line 132 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.h"

static __declspec(__device__) __inline int __shfl_sync(unsigned mask, int var, int srcLane, int width=32) ;
static __declspec(__device__) __inline unsigned int __shfl_sync(unsigned mask, unsigned int var, int srcLane, int width=32) ;
static __declspec(__device__) __inline int __shfl_up_sync(unsigned mask, int var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline unsigned int __shfl_up_sync(unsigned mask, unsigned int var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline int __shfl_down_sync(unsigned mask, int var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline unsigned int __shfl_down_sync(unsigned mask, unsigned int var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width=32) ;
static __declspec(__device__) __inline unsigned int __shfl_xor_sync(unsigned mask, unsigned int var, int laneMask, int width=32) ;
static __declspec(__device__) __inline float __shfl_sync(unsigned mask, float var, int srcLane, int width=32) ;
static __declspec(__device__) __inline float __shfl_up_sync(unsigned mask, float var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline float __shfl_down_sync(unsigned mask, float var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width=32) ;















#line 161 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.h"

static __declspec(__device__) __inline long long __shfl_sync(unsigned mask, long long var, int srcLane, int width=32) ;
static __declspec(__device__) __inline unsigned long long __shfl_sync(unsigned mask, unsigned long long var, int srcLane, int width=32) ;
static __declspec(__device__) __inline long long __shfl_up_sync(unsigned mask, long long var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline unsigned long long __shfl_up_sync(unsigned mask, unsigned long long var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline long long __shfl_down_sync(unsigned mask, long long var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline unsigned long long __shfl_down_sync(unsigned mask, unsigned long long var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline long long __shfl_xor_sync(unsigned mask, long long var, int laneMask, int width=32) ;
static __declspec(__device__) __inline unsigned long long __shfl_xor_sync(unsigned mask, unsigned long long var, int laneMask, int width=32) ;
static __declspec(__device__) __inline double __shfl_sync(unsigned mask, double var, int srcLane, int width=32) ;
static __declspec(__device__) __inline double __shfl_up_sync(unsigned mask, double var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline double __shfl_down_sync(unsigned mask, double var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width=32) ;











#line 186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.h"

static __declspec(__device__) __inline long __shfl_sync(unsigned mask, long var, int srcLane, int width=32) ;
static __declspec(__device__) __inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width=32) ;
static __declspec(__device__) __inline long __shfl_up_sync(unsigned mask, long var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline long __shfl_down_sync(unsigned mask, long var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width=32) ;
static __declspec(__device__) __inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width=32) ;







#line 203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.h"

#line 205 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.h"

#line 207 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.h"





#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.hpp"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.hpp"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.hpp"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.hpp"



extern "C"
{
}











#line 88 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.hpp"

static __declspec(__device__) __inline
unsigned __fns(unsigned mask, unsigned base, int offset) {
  extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __nvvm_fns(unsigned int mask, unsigned int base, int offset);
  return __nvvm_fns(mask, base, offset);
}

static __declspec(__device__) __inline 
void  __barrier_sync(unsigned id) {
  extern __declspec(__device__) __declspec(__device_builtin__) void __nvvm_barrier_sync(unsigned id);
  return __nvvm_barrier_sync(id);
}

static __declspec(__device__) __inline 
void  __barrier_sync_count(unsigned id, unsigned cnt) {
  extern __declspec(__device__) __declspec(__device_builtin__) void __nvvm_barrier_sync_cnt(unsigned id, unsigned cnt);
  return __nvvm_barrier_sync_cnt(id, cnt);
}

static __declspec(__device__) __inline 
void  __syncwarp(unsigned mask) {
  extern __declspec(__device__) __declspec(__device_builtin__) void __nvvm_bar_warp_sync(unsigned mask);
  return __nvvm_bar_warp_sync(mask);
}

static __declspec(__device__) __inline 
int __all_sync(unsigned mask, int pred) {
  extern __declspec(__device__) __declspec(__device_builtin__) int __nvvm_vote_all_sync(unsigned int mask, int pred); 
  return __nvvm_vote_all_sync(mask, pred);
}

static __declspec(__device__) __inline 
int __any_sync(unsigned mask, int pred) {
  extern __declspec(__device__) __declspec(__device_builtin__) int __nvvm_vote_any_sync(unsigned int mask, int pred); 
  return __nvvm_vote_any_sync(mask, pred);
}

static __declspec(__device__) __inline 
int __uni_sync(unsigned mask, int pred) {
  extern __declspec(__device__) __declspec(__device_builtin__) int __nvvm_vote_uni_sync(unsigned int mask, int pred); 
  return __nvvm_vote_uni_sync(mask, pred);
}

static __declspec(__device__) __inline 
unsigned __ballot_sync(unsigned mask, int pred) {
  extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __nvvm_vote_ballot_sync(unsigned int mask, int pred); 
  return __nvvm_vote_ballot_sync(mask, pred);
}

static __declspec(__device__) __inline
unsigned __activemask() {
    unsigned ret;
    asm volatile ("activemask.b32 %0;" : "=r"(ret));
    return ret;
}


























































































































































































































#line 362 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.hpp"







static __declspec(__device__) __inline int __shfl_sync(unsigned mask, int var, int srcLane, int width) {
        extern __declspec(__device__) __declspec(__device_builtin__) unsigned __nvvm_shfl_idx_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
	int ret;
	int c = ((32-width) << 8) | 0x1f;
        ret = __nvvm_shfl_idx_sync(mask, var, srcLane, c);
	return ret;
}

static __declspec(__device__) __inline unsigned int __shfl_sync(unsigned mask, unsigned int var, int srcLane, int width) {
        return (unsigned int) __shfl_sync(mask, (int)var, srcLane, width);
}

static __declspec(__device__) __inline int __shfl_up_sync(unsigned mask, int var, unsigned int delta, int width) {
        extern __declspec(__device__) __declspec(__device_builtin__) unsigned __nvvm_shfl_up_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
	int ret;
	int c = (32-width) << 8;
        ret = __nvvm_shfl_up_sync(mask, var, delta, c);
	return ret;
}

static __declspec(__device__) __inline unsigned int __shfl_up_sync(unsigned mask, unsigned int var, unsigned int delta, int width) {
        return (unsigned int) __shfl_up_sync(mask, (int)var, delta, width);
}

static __declspec(__device__) __inline int __shfl_down_sync(unsigned mask, int var, unsigned int delta, int width) {
        extern __declspec(__device__) __declspec(__device_builtin__) unsigned __nvvm_shfl_down_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
	int ret;
	int c = ((32-width) << 8) | 0x1f;
        ret = __nvvm_shfl_down_sync(mask, var, delta, c);
	return ret;
}

static __declspec(__device__) __inline unsigned int __shfl_down_sync(unsigned mask, unsigned int var, unsigned int delta, int width) {
        return (unsigned int) __shfl_down_sync(mask, (int)var, delta, width);
}

static __declspec(__device__) __inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width) {
        extern __declspec(__device__) __declspec(__device_builtin__) unsigned __nvvm_shfl_bfly_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
	int ret;
	int c = ((32-width) << 8) | 0x1f;
        ret = __nvvm_shfl_bfly_sync(mask, var, laneMask, c);
	return ret;
}

static __declspec(__device__) __inline unsigned int __shfl_xor_sync(unsigned mask, unsigned int var, int laneMask, int width) {
	return (unsigned int) __shfl_xor_sync(mask, (int)var, laneMask, width);
}

static __declspec(__device__) __inline float __shfl_sync(unsigned mask, float var, int srcLane, int width) {
        extern __declspec(__device__) __declspec(__device_builtin__) unsigned __nvvm_shfl_idx_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
        int ret;
        int c;
	c = ((32-width) << 8) | 0x1f;
        ret = __nvvm_shfl_idx_sync(mask, __float_as_int(var), srcLane, c);
	return __int_as_float(ret);
}

static __declspec(__device__) __inline float __shfl_up_sync(unsigned mask, float var, unsigned int delta, int width) {
        extern __declspec(__device__) __declspec(__device_builtin__) unsigned __nvvm_shfl_up_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
	int ret;
        int c;
	c = (32-width) << 8;
        ret = __nvvm_shfl_up_sync(mask, __float_as_int(var), delta, c);
	return __int_as_float(ret);
}

static __declspec(__device__) __inline float __shfl_down_sync(unsigned mask, float var, unsigned int delta, int width) {
        extern __declspec(__device__) __declspec(__device_builtin__) unsigned __nvvm_shfl_down_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
	int ret;
        int c;
	c = ((32-width) << 8) | 0x1f;
        ret = __nvvm_shfl_down_sync(mask, __float_as_int(var), delta, c);
	return __int_as_float(ret);
}

static __declspec(__device__) __inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width) {
        extern __declspec(__device__) __declspec(__device_builtin__) unsigned __nvvm_shfl_bfly_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
	int ret;
        int c;
	c = ((32-width) << 8) | 0x1f;
        ret = __nvvm_shfl_bfly_sync(mask, __float_as_int(var), laneMask, c);
	return __int_as_float(ret);
}


static __declspec(__device__) __inline long long __shfl_sync(unsigned mask, long long var, int srcLane, int width) {
	int lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
	hi = __shfl_sync(mask, hi, srcLane, width);
	lo = __shfl_sync(mask, lo, srcLane, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline unsigned long long __shfl_sync(unsigned mask, unsigned long long var, int srcLane, int width) {
        return (unsigned long long) __shfl_sync(mask, (long long) var, srcLane, width);
}

static __declspec(__device__) __inline long long __shfl_up_sync(unsigned mask, long long var, unsigned int delta, int width) {
	int lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
	hi = __shfl_up_sync(mask, hi, delta, width);
	lo = __shfl_up_sync(mask, lo, delta, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline unsigned long long __shfl_up_sync(unsigned mask, unsigned long long var, unsigned int delta, int width) {
        return (unsigned long long) __shfl_up_sync(mask, (long long) var, delta, width);
}

static __declspec(__device__) __inline long long __shfl_down_sync(unsigned mask, long long var, unsigned int delta, int width) {
	int lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
	hi = __shfl_down_sync(mask, hi, delta, width);
	lo = __shfl_down_sync(mask, lo, delta, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline unsigned long long __shfl_down_sync(unsigned mask, unsigned long long var, unsigned int delta, int width) {
        return (unsigned long long) __shfl_down_sync(mask, (long long) var, delta, width);
}

static __declspec(__device__) __inline long long __shfl_xor_sync(unsigned mask, long long var, int laneMask, int width) {
	int lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
	hi = __shfl_xor_sync(mask, hi, laneMask, width);
	lo = __shfl_xor_sync(mask, lo, laneMask, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline unsigned long long __shfl_xor_sync(unsigned mask, unsigned long long var, int laneMask, int width) {
        return (unsigned long long) __shfl_xor_sync(mask, (long long) var, laneMask, width);
}

static __declspec(__device__) __inline double __shfl_sync(unsigned mask, double var, int srcLane, int width) {
	unsigned lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
	hi = __shfl_sync(mask, hi, srcLane, width);
	lo = __shfl_sync(mask, lo, srcLane, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline double __shfl_up_sync(unsigned mask, double var, unsigned int delta, int width) {
	unsigned lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
	hi = __shfl_up_sync(mask, hi, delta, width);
	lo = __shfl_up_sync(mask, lo, delta, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline double __shfl_down_sync(unsigned mask, double var, unsigned int delta, int width) {
	unsigned lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
	hi = __shfl_down_sync(mask, hi, delta, width);
	lo = __shfl_down_sync(mask, lo, delta, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width) {
	unsigned lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
	hi = __shfl_xor_sync(mask, hi, laneMask, width);
	lo = __shfl_xor_sync(mask, lo, laneMask, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
	return var;
}



static __declspec(__device__) __inline long __shfl_sync(unsigned mask, long var, int srcLane, int width) {
	return (sizeof(long) == sizeof(long long)) ?
                __shfl_sync(mask, (long long) var, srcLane, width) :
		__shfl_sync(mask, (int) var, srcLane, width);
}

static __declspec(__device__) __inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width) {
	return (sizeof(long) == sizeof(long long)) ?
                __shfl_sync(mask, (unsigned long long) var, srcLane, width) :
		__shfl_sync(mask, (unsigned int) var, srcLane, width);
}

static __declspec(__device__) __inline long __shfl_up_sync(unsigned mask, long var, unsigned int delta, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_up_sync(mask, (long long) var, delta, width) :
		__shfl_up_sync(mask, (int) var, delta, width);
}

static __declspec(__device__) __inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned int delta, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_up_sync(mask, (unsigned long long) var, delta, width) :
		__shfl_up_sync(mask, (unsigned int) var, delta, width);
}

static __declspec(__device__) __inline long __shfl_down_sync(unsigned mask, long var, unsigned int delta, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_down_sync(mask, (long long) var, delta, width) :
		__shfl_down_sync(mask, (int) var, delta, width);
}

static __declspec(__device__) __inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned int delta, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_down_sync(mask, (unsigned long long) var, delta, width) :
		__shfl_down_sync(mask, (unsigned int) var, delta, width);
}

static __declspec(__device__) __inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_xor_sync(mask, (long long) var, laneMask, width) :
		__shfl_xor_sync(mask, (int) var, laneMask, width);
}

static __declspec(__device__) __inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_xor_sync(mask, (unsigned long long) var, laneMask, width) :
		__shfl_xor_sync(mask, (unsigned int) var, laneMask, width);
}




#line 596 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.hpp"

#line 598 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.hpp"

#line 600 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.hpp"



#line 604 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.hpp"

#line 213 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.h"
#line 214 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.h"

#line 216 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_30_intrinsics.h"
#line 3296 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.h"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.h"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.h"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.h"





#line 76 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.h"











static __declspec(__device__) __inline long __ldg(const long *ptr) ;
static __declspec(__device__) __inline unsigned long __ldg(const unsigned long *ptr) ;

static __declspec(__device__) __inline char __ldg(const char *ptr) ;
static __declspec(__device__) __inline signed char __ldg(const signed char *ptr) ;
static __declspec(__device__) __inline short __ldg(const short *ptr) ;
static __declspec(__device__) __inline int __ldg(const int *ptr) ;
static __declspec(__device__) __inline long long __ldg(const long long *ptr) ;
static __declspec(__device__) __inline char2 __ldg(const char2 *ptr) ;
static __declspec(__device__) __inline char4 __ldg(const char4 *ptr) ;
static __declspec(__device__) __inline short2 __ldg(const short2 *ptr) ;
static __declspec(__device__) __inline short4 __ldg(const short4 *ptr) ;
static __declspec(__device__) __inline int2 __ldg(const int2 *ptr) ;
static __declspec(__device__) __inline int4 __ldg(const int4 *ptr) ;
static __declspec(__device__) __inline longlong2 __ldg(const longlong2 *ptr) ;

static __declspec(__device__) __inline unsigned char __ldg(const unsigned char *ptr) ;
static __declspec(__device__) __inline unsigned short __ldg(const unsigned short *ptr) ;
static __declspec(__device__) __inline unsigned int __ldg(const unsigned int *ptr) ;
static __declspec(__device__) __inline unsigned long long __ldg(const unsigned long long *ptr) ;
static __declspec(__device__) __inline uchar2 __ldg(const uchar2 *ptr) ;
static __declspec(__device__) __inline uchar4 __ldg(const uchar4 *ptr) ;
static __declspec(__device__) __inline ushort2 __ldg(const ushort2 *ptr) ;
static __declspec(__device__) __inline ushort4 __ldg(const ushort4 *ptr) ;
static __declspec(__device__) __inline uint2 __ldg(const uint2 *ptr) ;
static __declspec(__device__) __inline uint4 __ldg(const uint4 *ptr) ;
static __declspec(__device__) __inline ulonglong2 __ldg(const ulonglong2 *ptr) ;

static __declspec(__device__) __inline float __ldg(const float *ptr) ;
static __declspec(__device__) __inline double __ldg(const double *ptr) ;
static __declspec(__device__) __inline float2 __ldg(const float2 *ptr) ;
static __declspec(__device__) __inline float4 __ldg(const float4 *ptr) ;
static __declspec(__device__) __inline double2 __ldg(const double2 *ptr) ;



static __declspec(__device__) __inline long __ldcg(const long *ptr) ;
static __declspec(__device__) __inline unsigned long __ldcg(const unsigned long *ptr) ;

static __declspec(__device__) __inline char __ldcg(const char *ptr) ;
static __declspec(__device__) __inline signed char __ldcg(const signed char *ptr) ;
static __declspec(__device__) __inline short __ldcg(const short *ptr) ;
static __declspec(__device__) __inline int __ldcg(const int *ptr) ;
static __declspec(__device__) __inline long long __ldcg(const long long *ptr) ;
static __declspec(__device__) __inline char2 __ldcg(const char2 *ptr) ;
static __declspec(__device__) __inline char4 __ldcg(const char4 *ptr) ;
static __declspec(__device__) __inline short2 __ldcg(const short2 *ptr) ;
static __declspec(__device__) __inline short4 __ldcg(const short4 *ptr) ;
static __declspec(__device__) __inline int2 __ldcg(const int2 *ptr) ;
static __declspec(__device__) __inline int4 __ldcg(const int4 *ptr) ;
static __declspec(__device__) __inline longlong2 __ldcg(const longlong2 *ptr) ;

static __declspec(__device__) __inline unsigned char __ldcg(const unsigned char *ptr) ;
static __declspec(__device__) __inline unsigned short __ldcg(const unsigned short *ptr) ;
static __declspec(__device__) __inline unsigned int __ldcg(const unsigned int *ptr) ;
static __declspec(__device__) __inline unsigned long long __ldcg(const unsigned long long *ptr) ;
static __declspec(__device__) __inline uchar2 __ldcg(const uchar2 *ptr) ;
static __declspec(__device__) __inline uchar4 __ldcg(const uchar4 *ptr) ;
static __declspec(__device__) __inline ushort2 __ldcg(const ushort2 *ptr) ;
static __declspec(__device__) __inline ushort4 __ldcg(const ushort4 *ptr) ;
static __declspec(__device__) __inline uint2 __ldcg(const uint2 *ptr) ;
static __declspec(__device__) __inline uint4 __ldcg(const uint4 *ptr) ;
static __declspec(__device__) __inline ulonglong2 __ldcg(const ulonglong2 *ptr) ;

static __declspec(__device__) __inline float __ldcg(const float *ptr) ;
static __declspec(__device__) __inline double __ldcg(const double *ptr) ;
static __declspec(__device__) __inline float2 __ldcg(const float2 *ptr) ;
static __declspec(__device__) __inline float4 __ldcg(const float4 *ptr) ;
static __declspec(__device__) __inline double2 __ldcg(const double2 *ptr) ;



static __declspec(__device__) __inline long __ldca(const long *ptr) ;
static __declspec(__device__) __inline unsigned long __ldca(const unsigned long *ptr) ;

static __declspec(__device__) __inline char __ldca(const char *ptr) ;
static __declspec(__device__) __inline signed char __ldca(const signed char *ptr) ;
static __declspec(__device__) __inline short __ldca(const short *ptr) ;
static __declspec(__device__) __inline int __ldca(const int *ptr) ;
static __declspec(__device__) __inline long long __ldca(const long long *ptr) ;
static __declspec(__device__) __inline char2 __ldca(const char2 *ptr) ;
static __declspec(__device__) __inline char4 __ldca(const char4 *ptr) ;
static __declspec(__device__) __inline short2 __ldca(const short2 *ptr) ;
static __declspec(__device__) __inline short4 __ldca(const short4 *ptr) ;
static __declspec(__device__) __inline int2 __ldca(const int2 *ptr) ;
static __declspec(__device__) __inline int4 __ldca(const int4 *ptr) ;
static __declspec(__device__) __inline longlong2 __ldca(const longlong2 *ptr) ;

static __declspec(__device__) __inline unsigned char __ldca(const unsigned char *ptr) ;
static __declspec(__device__) __inline unsigned short __ldca(const unsigned short *ptr) ;
static __declspec(__device__) __inline unsigned int __ldca(const unsigned int *ptr) ;
static __declspec(__device__) __inline unsigned long long __ldca(const unsigned long long *ptr) ;
static __declspec(__device__) __inline uchar2 __ldca(const uchar2 *ptr) ;
static __declspec(__device__) __inline uchar4 __ldca(const uchar4 *ptr) ;
static __declspec(__device__) __inline ushort2 __ldca(const ushort2 *ptr) ;
static __declspec(__device__) __inline ushort4 __ldca(const ushort4 *ptr) ;
static __declspec(__device__) __inline uint2 __ldca(const uint2 *ptr) ;
static __declspec(__device__) __inline uint4 __ldca(const uint4 *ptr) ;
static __declspec(__device__) __inline ulonglong2 __ldca(const ulonglong2 *ptr) ;

static __declspec(__device__) __inline float __ldca(const float *ptr) ;
static __declspec(__device__) __inline double __ldca(const double *ptr) ;
static __declspec(__device__) __inline float2 __ldca(const float2 *ptr) ;
static __declspec(__device__) __inline float4 __ldca(const float4 *ptr) ;
static __declspec(__device__) __inline double2 __ldca(const double2 *ptr) ;



static __declspec(__device__) __inline long __ldcs(const long *ptr) ;
static __declspec(__device__) __inline unsigned long __ldcs(const unsigned long *ptr) ;

static __declspec(__device__) __inline char __ldcs(const char *ptr) ;
static __declspec(__device__) __inline signed char __ldcs(const signed char *ptr) ;
static __declspec(__device__) __inline short __ldcs(const short *ptr) ;
static __declspec(__device__) __inline int __ldcs(const int *ptr) ;
static __declspec(__device__) __inline long long __ldcs(const long long *ptr) ;
static __declspec(__device__) __inline char2 __ldcs(const char2 *ptr) ;
static __declspec(__device__) __inline char4 __ldcs(const char4 *ptr) ;
static __declspec(__device__) __inline short2 __ldcs(const short2 *ptr) ;
static __declspec(__device__) __inline short4 __ldcs(const short4 *ptr) ;
static __declspec(__device__) __inline int2 __ldcs(const int2 *ptr) ;
static __declspec(__device__) __inline int4 __ldcs(const int4 *ptr) ;
static __declspec(__device__) __inline longlong2 __ldcs(const longlong2 *ptr) ;

static __declspec(__device__) __inline unsigned char __ldcs(const unsigned char *ptr) ;
static __declspec(__device__) __inline unsigned short __ldcs(const unsigned short *ptr) ;
static __declspec(__device__) __inline unsigned int __ldcs(const unsigned int *ptr) ;
static __declspec(__device__) __inline unsigned long long __ldcs(const unsigned long long *ptr) ;
static __declspec(__device__) __inline uchar2 __ldcs(const uchar2 *ptr) ;
static __declspec(__device__) __inline uchar4 __ldcs(const uchar4 *ptr) ;
static __declspec(__device__) __inline ushort2 __ldcs(const ushort2 *ptr) ;
static __declspec(__device__) __inline ushort4 __ldcs(const ushort4 *ptr) ;
static __declspec(__device__) __inline uint2 __ldcs(const uint2 *ptr) ;
static __declspec(__device__) __inline uint4 __ldcs(const uint4 *ptr) ;
static __declspec(__device__) __inline ulonglong2 __ldcs(const ulonglong2 *ptr) ;

static __declspec(__device__) __inline float __ldcs(const float *ptr) ;
static __declspec(__device__) __inline double __ldcs(const double *ptr) ;
static __declspec(__device__) __inline float2 __ldcs(const float2 *ptr) ;
static __declspec(__device__) __inline float4 __ldcs(const float4 *ptr) ;
static __declspec(__device__) __inline double2 __ldcs(const double2 *ptr) ;



static __declspec(__device__) __inline long __ldlu(const long *ptr) ;
static __declspec(__device__) __inline unsigned long __ldlu(const unsigned long *ptr) ;

static __declspec(__device__) __inline char __ldlu(const char *ptr) ;
static __declspec(__device__) __inline signed char __ldlu(const signed char *ptr) ;
static __declspec(__device__) __inline short __ldlu(const short *ptr) ;
static __declspec(__device__) __inline int __ldlu(const int *ptr) ;
static __declspec(__device__) __inline long long __ldlu(const long long *ptr) ;
static __declspec(__device__) __inline char2 __ldlu(const char2 *ptr) ;
static __declspec(__device__) __inline char4 __ldlu(const char4 *ptr) ;
static __declspec(__device__) __inline short2 __ldlu(const short2 *ptr) ;
static __declspec(__device__) __inline short4 __ldlu(const short4 *ptr) ;
static __declspec(__device__) __inline int2 __ldlu(const int2 *ptr) ;
static __declspec(__device__) __inline int4 __ldlu(const int4 *ptr) ;
static __declspec(__device__) __inline longlong2 __ldlu(const longlong2 *ptr) ;

static __declspec(__device__) __inline unsigned char __ldlu(const unsigned char *ptr) ;
static __declspec(__device__) __inline unsigned short __ldlu(const unsigned short *ptr) ;
static __declspec(__device__) __inline unsigned int __ldlu(const unsigned int *ptr) ;
static __declspec(__device__) __inline unsigned long long __ldlu(const unsigned long long *ptr) ;
static __declspec(__device__) __inline uchar2 __ldlu(const uchar2 *ptr) ;
static __declspec(__device__) __inline uchar4 __ldlu(const uchar4 *ptr) ;
static __declspec(__device__) __inline ushort2 __ldlu(const ushort2 *ptr) ;
static __declspec(__device__) __inline ushort4 __ldlu(const ushort4 *ptr) ;
static __declspec(__device__) __inline uint2 __ldlu(const uint2 *ptr) ;
static __declspec(__device__) __inline uint4 __ldlu(const uint4 *ptr) ;
static __declspec(__device__) __inline ulonglong2 __ldlu(const ulonglong2 *ptr) ;

static __declspec(__device__) __inline float __ldlu(const float *ptr) ;
static __declspec(__device__) __inline double __ldlu(const double *ptr) ;
static __declspec(__device__) __inline float2 __ldlu(const float2 *ptr) ;
static __declspec(__device__) __inline float4 __ldlu(const float4 *ptr) ;
static __declspec(__device__) __inline double2 __ldlu(const double2 *ptr) ;



static __declspec(__device__) __inline long __ldcv(const long *ptr) ;
static __declspec(__device__) __inline unsigned long __ldcv(const unsigned long *ptr) ;

static __declspec(__device__) __inline char __ldcv(const char *ptr) ;
static __declspec(__device__) __inline signed char __ldcv(const signed char *ptr) ;
static __declspec(__device__) __inline short __ldcv(const short *ptr) ;
static __declspec(__device__) __inline int __ldcv(const int *ptr) ;
static __declspec(__device__) __inline long long __ldcv(const long long *ptr) ;
static __declspec(__device__) __inline char2 __ldcv(const char2 *ptr) ;
static __declspec(__device__) __inline char4 __ldcv(const char4 *ptr) ;
static __declspec(__device__) __inline short2 __ldcv(const short2 *ptr) ;
static __declspec(__device__) __inline short4 __ldcv(const short4 *ptr) ;
static __declspec(__device__) __inline int2 __ldcv(const int2 *ptr) ;
static __declspec(__device__) __inline int4 __ldcv(const int4 *ptr) ;
static __declspec(__device__) __inline longlong2 __ldcv(const longlong2 *ptr) ;

static __declspec(__device__) __inline unsigned char __ldcv(const unsigned char *ptr) ;
static __declspec(__device__) __inline unsigned short __ldcv(const unsigned short *ptr) ;
static __declspec(__device__) __inline unsigned int __ldcv(const unsigned int *ptr) ;
static __declspec(__device__) __inline unsigned long long __ldcv(const unsigned long long *ptr) ;
static __declspec(__device__) __inline uchar2 __ldcv(const uchar2 *ptr) ;
static __declspec(__device__) __inline uchar4 __ldcv(const uchar4 *ptr) ;
static __declspec(__device__) __inline ushort2 __ldcv(const ushort2 *ptr) ;
static __declspec(__device__) __inline ushort4 __ldcv(const ushort4 *ptr) ;
static __declspec(__device__) __inline uint2 __ldcv(const uint2 *ptr) ;
static __declspec(__device__) __inline uint4 __ldcv(const uint4 *ptr) ;
static __declspec(__device__) __inline ulonglong2 __ldcv(const ulonglong2 *ptr) ;

static __declspec(__device__) __inline float __ldcv(const float *ptr) ;
static __declspec(__device__) __inline double __ldcv(const double *ptr) ;
static __declspec(__device__) __inline float2 __ldcv(const float2 *ptr) ;
static __declspec(__device__) __inline float4 __ldcv(const float4 *ptr) ;
static __declspec(__device__) __inline double2 __ldcv(const double2 *ptr) ;



static __declspec(__device__) __inline void __stwb(long *ptr, long value) ;
static __declspec(__device__) __inline void __stwb(unsigned long *ptr, unsigned long value) ;

static __declspec(__device__) __inline void __stwb(char *ptr, char value) ;
static __declspec(__device__) __inline void __stwb(signed char *ptr, signed char value) ;
static __declspec(__device__) __inline void __stwb(short *ptr, short value) ;
static __declspec(__device__) __inline void __stwb(int *ptr, int value) ;
static __declspec(__device__) __inline void __stwb(long long *ptr, long long value) ;
static __declspec(__device__) __inline void __stwb(char2 *ptr, char2 value) ;
static __declspec(__device__) __inline void __stwb(char4 *ptr, char4 value) ;
static __declspec(__device__) __inline void __stwb(short2 *ptr, short2 value) ;
static __declspec(__device__) __inline void __stwb(short4 *ptr, short4 value) ;
static __declspec(__device__) __inline void __stwb(int2 *ptr, int2 value) ;
static __declspec(__device__) __inline void __stwb(int4 *ptr, int4 value) ;
static __declspec(__device__) __inline void __stwb(longlong2 *ptr, longlong2 value) ;

static __declspec(__device__) __inline void __stwb(unsigned char *ptr, unsigned char value) ;
static __declspec(__device__) __inline void __stwb(unsigned short *ptr, unsigned short value) ;
static __declspec(__device__) __inline void __stwb(unsigned int *ptr, unsigned int value) ;
static __declspec(__device__) __inline void __stwb(unsigned long long *ptr, unsigned long long value) ;
static __declspec(__device__) __inline void __stwb(uchar2 *ptr, uchar2 value) ;
static __declspec(__device__) __inline void __stwb(uchar4 *ptr, uchar4 value) ;
static __declspec(__device__) __inline void __stwb(ushort2 *ptr, ushort2 value) ;
static __declspec(__device__) __inline void __stwb(ushort4 *ptr, ushort4 value) ;
static __declspec(__device__) __inline void __stwb(uint2 *ptr, uint2 value) ;
static __declspec(__device__) __inline void __stwb(uint4 *ptr, uint4 value) ;
static __declspec(__device__) __inline void __stwb(ulonglong2 *ptr, ulonglong2 value) ;

static __declspec(__device__) __inline void __stwb(float *ptr, float value) ;
static __declspec(__device__) __inline void __stwb(double *ptr, double value) ;
static __declspec(__device__) __inline void __stwb(float2 *ptr, float2 value) ;
static __declspec(__device__) __inline void __stwb(float4 *ptr, float4 value) ;
static __declspec(__device__) __inline void __stwb(double2 *ptr, double2 value) ;



static __declspec(__device__) __inline void __stcg(long *ptr, long value) ;
static __declspec(__device__) __inline void __stcg(unsigned long *ptr, unsigned long value) ;

static __declspec(__device__) __inline void __stcg(char *ptr, char value) ;
static __declspec(__device__) __inline void __stcg(signed char *ptr, signed char value) ;
static __declspec(__device__) __inline void __stcg(short *ptr, short value) ;
static __declspec(__device__) __inline void __stcg(int *ptr, int value) ;
static __declspec(__device__) __inline void __stcg(long long *ptr, long long value) ;
static __declspec(__device__) __inline void __stcg(char2 *ptr, char2 value) ;
static __declspec(__device__) __inline void __stcg(char4 *ptr, char4 value) ;
static __declspec(__device__) __inline void __stcg(short2 *ptr, short2 value) ;
static __declspec(__device__) __inline void __stcg(short4 *ptr, short4 value) ;
static __declspec(__device__) __inline void __stcg(int2 *ptr, int2 value) ;
static __declspec(__device__) __inline void __stcg(int4 *ptr, int4 value) ;
static __declspec(__device__) __inline void __stcg(longlong2 *ptr, longlong2 value) ;

static __declspec(__device__) __inline void __stcg(unsigned char *ptr, unsigned char value) ;
static __declspec(__device__) __inline void __stcg(unsigned short *ptr, unsigned short value) ;
static __declspec(__device__) __inline void __stcg(unsigned int *ptr, unsigned int value) ;
static __declspec(__device__) __inline void __stcg(unsigned long long *ptr, unsigned long long value) ;
static __declspec(__device__) __inline void __stcg(uchar2 *ptr, uchar2 value) ;
static __declspec(__device__) __inline void __stcg(uchar4 *ptr, uchar4 value) ;
static __declspec(__device__) __inline void __stcg(ushort2 *ptr, ushort2 value) ;
static __declspec(__device__) __inline void __stcg(ushort4 *ptr, ushort4 value) ;
static __declspec(__device__) __inline void __stcg(uint2 *ptr, uint2 value) ;
static __declspec(__device__) __inline void __stcg(uint4 *ptr, uint4 value) ;
static __declspec(__device__) __inline void __stcg(ulonglong2 *ptr, ulonglong2 value) ;

static __declspec(__device__) __inline void __stcg(float *ptr, float value) ;
static __declspec(__device__) __inline void __stcg(double *ptr, double value) ;
static __declspec(__device__) __inline void __stcg(float2 *ptr, float2 value) ;
static __declspec(__device__) __inline void __stcg(float4 *ptr, float4 value) ;
static __declspec(__device__) __inline void __stcg(double2 *ptr, double2 value) ;



static __declspec(__device__) __inline void __stcs(long *ptr, long value) ;
static __declspec(__device__) __inline void __stcs(unsigned long *ptr, unsigned long value) ;

static __declspec(__device__) __inline void __stcs(char *ptr, char value) ;
static __declspec(__device__) __inline void __stcs(signed char *ptr, signed char value) ;
static __declspec(__device__) __inline void __stcs(short *ptr, short value) ;
static __declspec(__device__) __inline void __stcs(int *ptr, int value) ;
static __declspec(__device__) __inline void __stcs(long long *ptr, long long value) ;
static __declspec(__device__) __inline void __stcs(char2 *ptr, char2 value) ;
static __declspec(__device__) __inline void __stcs(char4 *ptr, char4 value) ;
static __declspec(__device__) __inline void __stcs(short2 *ptr, short2 value) ;
static __declspec(__device__) __inline void __stcs(short4 *ptr, short4 value) ;
static __declspec(__device__) __inline void __stcs(int2 *ptr, int2 value) ;
static __declspec(__device__) __inline void __stcs(int4 *ptr, int4 value) ;
static __declspec(__device__) __inline void __stcs(longlong2 *ptr, longlong2 value) ;

static __declspec(__device__) __inline void __stcs(unsigned char *ptr, unsigned char value) ;
static __declspec(__device__) __inline void __stcs(unsigned short *ptr, unsigned short value) ;
static __declspec(__device__) __inline void __stcs(unsigned int *ptr, unsigned int value) ;
static __declspec(__device__) __inline void __stcs(unsigned long long *ptr, unsigned long long value) ;
static __declspec(__device__) __inline void __stcs(uchar2 *ptr, uchar2 value) ;
static __declspec(__device__) __inline void __stcs(uchar4 *ptr, uchar4 value) ;
static __declspec(__device__) __inline void __stcs(ushort2 *ptr, ushort2 value) ;
static __declspec(__device__) __inline void __stcs(ushort4 *ptr, ushort4 value) ;
static __declspec(__device__) __inline void __stcs(uint2 *ptr, uint2 value) ;
static __declspec(__device__) __inline void __stcs(uint4 *ptr, uint4 value) ;
static __declspec(__device__) __inline void __stcs(ulonglong2 *ptr, ulonglong2 value) ;

static __declspec(__device__) __inline void __stcs(float *ptr, float value) ;
static __declspec(__device__) __inline void __stcs(double *ptr, double value) ;
static __declspec(__device__) __inline void __stcs(float2 *ptr, float2 value) ;
static __declspec(__device__) __inline void __stcs(float4 *ptr, float4 value) ;
static __declspec(__device__) __inline void __stcs(double2 *ptr, double2 value) ;



static __declspec(__device__) __inline void __stwt(long *ptr, long value) ;
static __declspec(__device__) __inline void __stwt(unsigned long *ptr, unsigned long value) ;

static __declspec(__device__) __inline void __stwt(char *ptr, char value) ;
static __declspec(__device__) __inline void __stwt(signed char *ptr, signed char value) ;
static __declspec(__device__) __inline void __stwt(short *ptr, short value) ;
static __declspec(__device__) __inline void __stwt(int *ptr, int value) ;
static __declspec(__device__) __inline void __stwt(long long *ptr, long long value) ;
static __declspec(__device__) __inline void __stwt(char2 *ptr, char2 value) ;
static __declspec(__device__) __inline void __stwt(char4 *ptr, char4 value) ;
static __declspec(__device__) __inline void __stwt(short2 *ptr, short2 value) ;
static __declspec(__device__) __inline void __stwt(short4 *ptr, short4 value) ;
static __declspec(__device__) __inline void __stwt(int2 *ptr, int2 value) ;
static __declspec(__device__) __inline void __stwt(int4 *ptr, int4 value) ;
static __declspec(__device__) __inline void __stwt(longlong2 *ptr, longlong2 value) ;

static __declspec(__device__) __inline void __stwt(unsigned char *ptr, unsigned char value) ;
static __declspec(__device__) __inline void __stwt(unsigned short *ptr, unsigned short value) ;
static __declspec(__device__) __inline void __stwt(unsigned int *ptr, unsigned int value) ;
static __declspec(__device__) __inline void __stwt(unsigned long long *ptr, unsigned long long value) ;
static __declspec(__device__) __inline void __stwt(uchar2 *ptr, uchar2 value) ;
static __declspec(__device__) __inline void __stwt(uchar4 *ptr, uchar4 value) ;
static __declspec(__device__) __inline void __stwt(ushort2 *ptr, ushort2 value) ;
static __declspec(__device__) __inline void __stwt(ushort4 *ptr, ushort4 value) ;
static __declspec(__device__) __inline void __stwt(uint2 *ptr, uint2 value) ;
static __declspec(__device__) __inline void __stwt(uint4 *ptr, uint4 value) ;
static __declspec(__device__) __inline void __stwt(ulonglong2 *ptr, ulonglong2 value) ;

static __declspec(__device__) __inline void __stwt(float *ptr, float value) ;
static __declspec(__device__) __inline void __stwt(double *ptr, double value) ;
static __declspec(__device__) __inline void __stwt(float2 *ptr, float2 value) ;
static __declspec(__device__) __inline void __stwt(float4 *ptr, float4 value) ;
static __declspec(__device__) __inline void __stwt(double2 *ptr, double2 value) ;
















static __declspec(__device__) __inline unsigned int __funnelshift_l(unsigned int lo, unsigned int hi, unsigned int shift) ;











static __declspec(__device__) __inline unsigned int __funnelshift_lc(unsigned int lo, unsigned int hi, unsigned int shift) ;












static __declspec(__device__) __inline unsigned int __funnelshift_r(unsigned int lo, unsigned int hi, unsigned int shift) ;











static __declspec(__device__) __inline unsigned int __funnelshift_rc(unsigned int lo, unsigned int hi, unsigned int shift) ;


#line 501 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.h"

#line 503 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.h"




#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"



extern "C"
{
    
    
}













#line 92 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"

#line 94 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"









#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"
static __declspec(__device__) __inline long __ldg(const long *ptr) { unsigned long ret; asm volatile ("ld.global.nc.s32 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return (long)ret; }
static __declspec(__device__) __inline unsigned long __ldg(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.nc.u32 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return ret; }
#line 107 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"


static __declspec(__device__) __inline char __ldg(const char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s8 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return (char)ret; }
static __declspec(__device__) __inline signed char __ldg(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s8 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return (signed char)ret; }
static __declspec(__device__) __inline short __ldg(const short *ptr) { unsigned short ret; asm volatile ("ld.global.nc.s16 %0, [%1];"  : "=h"(ret) : "r" (ptr)); return (short)ret; }
static __declspec(__device__) __inline int __ldg(const int *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s32 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return (int)ret; }
static __declspec(__device__) __inline long long __ldg(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.nc.s64 %0, [%1];"  : "=l"(ret) : "r" (ptr)); return (long long)ret; }
static __declspec(__device__) __inline char2 __ldg(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.nc.v2.s8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "r" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __declspec(__device__) __inline char4 __ldg(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.nc.v4.s8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "r" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __declspec(__device__) __inline short2 __ldg(const short2 *ptr) { short2 ret; asm volatile ("ld.global.nc.v2.s16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline short4 __ldg(const short4 *ptr) { short4 ret; asm volatile ("ld.global.nc.v4.s16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline int2 __ldg(const int2 *ptr) { int2 ret; asm volatile ("ld.global.nc.v2.s32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline int4 __ldg(const int4 *ptr) { int4 ret; asm volatile ("ld.global.nc.v4.s32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline longlong2 __ldg(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.nc.v2.s64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "r" (ptr)); return ret; }

static __declspec(__device__) __inline unsigned char __ldg(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.u8 %0, [%1];"  : "=r"(ret) : "r" (ptr));  return (unsigned char)ret; }
static __declspec(__device__) __inline unsigned short __ldg(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.nc.u16 %0, [%1];"  : "=h"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned int __ldg(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.nc.u32 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned long long __ldg(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.nc.u64 %0, [%1];"  : "=l"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline uchar2 __ldg(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.nc.v2.u8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "r" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __declspec(__device__) __inline uchar4 __ldg(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.nc.v4.u8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "r" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __declspec(__device__) __inline ushort2 __ldg(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.nc.v2.u16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline ushort4 __ldg(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.nc.v4.u16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline uint2 __ldg(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.nc.v2.u32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline uint4 __ldg(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.nc.v4.u32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline ulonglong2 __ldg(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.nc.v2.u64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "r" (ptr)); return ret; }

static __declspec(__device__) __inline float __ldg(const float *ptr) { float ret; asm volatile ("ld.global.nc.f32 %0, [%1];"  : "=f"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline double __ldg(const double *ptr) { double ret; asm volatile ("ld.global.nc.f64 %0, [%1];"  : "=d"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline float2 __ldg(const float2 *ptr) { float2 ret; asm volatile ("ld.global.nc.v2.f32 {%0,%1}, [%2];"  : "=f"(ret.x), "=f"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline float4 __ldg(const float4 *ptr) { float4 ret; asm volatile ("ld.global.nc.v4.f32 {%0,%1,%2,%3}, [%4];"  : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline double2 __ldg(const double2 *ptr) { double2 ret; asm volatile ("ld.global.nc.v2.f64 {%0,%1}, [%2];"  : "=d"(ret.x), "=d"(ret.y) : "r" (ptr)); return ret; }










#line 150 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"
static __declspec(__device__) __inline long __ldcg(const long *ptr) { unsigned long ret; asm volatile ("ld.global.cg.s32 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return (long)ret; }
static __declspec(__device__) __inline unsigned long __ldcg(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.cg.u32 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return ret; }
#line 153 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"


static __declspec(__device__) __inline char __ldcg(const char *ptr) { unsigned int ret; asm volatile ("ld.global.cg.s8 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return (char)ret; }
static __declspec(__device__) __inline signed char __ldcg(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.cg.s8 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return (signed char)ret; }
static __declspec(__device__) __inline short __ldcg(const short *ptr) { unsigned short ret; asm volatile ("ld.global.cg.s16 %0, [%1];"  : "=h"(ret) : "r" (ptr)); return (short)ret; }
static __declspec(__device__) __inline int __ldcg(const int *ptr) { unsigned int ret; asm volatile ("ld.global.cg.s32 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return (int)ret; }
static __declspec(__device__) __inline long long __ldcg(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cg.s64 %0, [%1];"  : "=l"(ret) : "r" (ptr)); return (long long)ret; }
static __declspec(__device__) __inline char2 __ldcg(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.cg.v2.s8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "r" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __declspec(__device__) __inline char4 __ldcg(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.cg.v4.s8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "r" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __declspec(__device__) __inline short2 __ldcg(const short2 *ptr) { short2 ret; asm volatile ("ld.global.cg.v2.s16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline short4 __ldcg(const short4 *ptr) { short4 ret; asm volatile ("ld.global.cg.v4.s16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline int2 __ldcg(const int2 *ptr) { int2 ret; asm volatile ("ld.global.cg.v2.s32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline int4 __ldcg(const int4 *ptr) { int4 ret; asm volatile ("ld.global.cg.v4.s32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline longlong2 __ldcg(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.cg.v2.s64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "r" (ptr)); return ret; }

static __declspec(__device__) __inline unsigned char __ldcg(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.cg.u8 %0, [%1];"  : "=r"(ret) : "r" (ptr));  return (unsigned char)ret; }
static __declspec(__device__) __inline unsigned short __ldcg(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.cg.u16 %0, [%1];"  : "=h"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned int __ldcg(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.cg.u32 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned long long __ldcg(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cg.u64 %0, [%1];"  : "=l"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline uchar2 __ldcg(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.cg.v2.u8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "r" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __declspec(__device__) __inline uchar4 __ldcg(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.cg.v4.u8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "r" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __declspec(__device__) __inline ushort2 __ldcg(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.cg.v2.u16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline ushort4 __ldcg(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.cg.v4.u16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline uint2 __ldcg(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.cg.v2.u32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline uint4 __ldcg(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.cg.v4.u32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline ulonglong2 __ldcg(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.cg.v2.u64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "r" (ptr)); return ret; }

static __declspec(__device__) __inline float __ldcg(const float *ptr) { float ret; asm volatile ("ld.global.cg.f32 %0, [%1];"  : "=f"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline double __ldcg(const double *ptr) { double ret; asm volatile ("ld.global.cg.f64 %0, [%1];"  : "=d"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline float2 __ldcg(const float2 *ptr) { float2 ret; asm volatile ("ld.global.cg.v2.f32 {%0,%1}, [%2];"  : "=f"(ret.x), "=f"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline float4 __ldcg(const float4 *ptr) { float4 ret; asm volatile ("ld.global.cg.v4.f32 {%0,%1,%2,%3}, [%4];"  : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline double2 __ldcg(const double2 *ptr) { double2 ret; asm volatile ("ld.global.cg.v2.f64 {%0,%1}, [%2];"  : "=d"(ret.x), "=d"(ret.y) : "r" (ptr)); return ret; }









#line 195 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"
static __declspec(__device__) __inline long __ldca(const long *ptr) { unsigned long ret; asm volatile ("ld.global.ca.s32 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return (long)ret; }
static __declspec(__device__) __inline unsigned long __ldca(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.ca.u32 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return ret; }
#line 198 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"


static __declspec(__device__) __inline char __ldca(const char *ptr) { unsigned int ret; asm volatile ("ld.global.ca.s8 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return (char)ret; }
static __declspec(__device__) __inline signed char __ldca(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.ca.s8 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return (signed char)ret; }
static __declspec(__device__) __inline short __ldca(const short *ptr) { unsigned short ret; asm volatile ("ld.global.ca.s16 %0, [%1];"  : "=h"(ret) : "r" (ptr)); return (short)ret; }
static __declspec(__device__) __inline int __ldca(const int *ptr) { unsigned int ret; asm volatile ("ld.global.ca.s32 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return (int)ret; }
static __declspec(__device__) __inline long long __ldca(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.ca.s64 %0, [%1];"  : "=l"(ret) : "r" (ptr)); return (long long)ret; }
static __declspec(__device__) __inline char2 __ldca(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.ca.v2.s8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "r" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __declspec(__device__) __inline char4 __ldca(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.ca.v4.s8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "r" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __declspec(__device__) __inline short2 __ldca(const short2 *ptr) { short2 ret; asm volatile ("ld.global.ca.v2.s16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline short4 __ldca(const short4 *ptr) { short4 ret; asm volatile ("ld.global.ca.v4.s16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline int2 __ldca(const int2 *ptr) { int2 ret; asm volatile ("ld.global.ca.v2.s32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline int4 __ldca(const int4 *ptr) { int4 ret; asm volatile ("ld.global.ca.v4.s32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline longlong2 __ldca(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.ca.v2.s64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "r" (ptr)); return ret; }

static __declspec(__device__) __inline unsigned char __ldca(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.ca.u8 %0, [%1];"  : "=r"(ret) : "r" (ptr));  return (unsigned char)ret; }
static __declspec(__device__) __inline unsigned short __ldca(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.ca.u16 %0, [%1];"  : "=h"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned int __ldca(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.ca.u32 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned long long __ldca(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.ca.u64 %0, [%1];"  : "=l"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline uchar2 __ldca(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.ca.v2.u8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "r" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __declspec(__device__) __inline uchar4 __ldca(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.ca.v4.u8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "r" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __declspec(__device__) __inline ushort2 __ldca(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.ca.v2.u16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline ushort4 __ldca(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.ca.v4.u16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline uint2 __ldca(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.ca.v2.u32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline uint4 __ldca(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.ca.v4.u32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline ulonglong2 __ldca(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.ca.v2.u64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "r" (ptr)); return ret; }

static __declspec(__device__) __inline float __ldca(const float *ptr) { float ret; asm volatile ("ld.global.ca.f32 %0, [%1];"  : "=f"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline double __ldca(const double *ptr) { double ret; asm volatile ("ld.global.ca.f64 %0, [%1];"  : "=d"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline float2 __ldca(const float2 *ptr) { float2 ret; asm volatile ("ld.global.ca.v2.f32 {%0,%1}, [%2];"  : "=f"(ret.x), "=f"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline float4 __ldca(const float4 *ptr) { float4 ret; asm volatile ("ld.global.ca.v4.f32 {%0,%1,%2,%3}, [%4];"  : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline double2 __ldca(const double2 *ptr) { double2 ret; asm volatile ("ld.global.ca.v2.f64 {%0,%1}, [%2];"  : "=d"(ret.x), "=d"(ret.y) : "r" (ptr)); return ret; }









#line 240 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"
static __declspec(__device__) __inline long __ldcs(const long *ptr) { unsigned long ret; asm volatile ("ld.global.cs.s32 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return (long)ret; }
static __declspec(__device__) __inline unsigned long __ldcs(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.cs.u32 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return ret; }
#line 243 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"


static __declspec(__device__) __inline char __ldcs(const char *ptr) { unsigned int ret; asm volatile ("ld.global.cs.s8 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return (char)ret; }
static __declspec(__device__) __inline signed char __ldcs(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.cs.s8 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return (signed char)ret; }
static __declspec(__device__) __inline short __ldcs(const short *ptr) { unsigned short ret; asm volatile ("ld.global.cs.s16 %0, [%1];"  : "=h"(ret) : "r" (ptr)); return (short)ret; }
static __declspec(__device__) __inline int __ldcs(const int *ptr) { unsigned int ret; asm volatile ("ld.global.cs.s32 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return (int)ret; }
static __declspec(__device__) __inline long long __ldcs(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cs.s64 %0, [%1];"  : "=l"(ret) : "r" (ptr)); return (long long)ret; }
static __declspec(__device__) __inline char2 __ldcs(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.cs.v2.s8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "r" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __declspec(__device__) __inline char4 __ldcs(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.cs.v4.s8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "r" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __declspec(__device__) __inline short2 __ldcs(const short2 *ptr) { short2 ret; asm volatile ("ld.global.cs.v2.s16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline short4 __ldcs(const short4 *ptr) { short4 ret; asm volatile ("ld.global.cs.v4.s16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline int2 __ldcs(const int2 *ptr) { int2 ret; asm volatile ("ld.global.cs.v2.s32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline int4 __ldcs(const int4 *ptr) { int4 ret; asm volatile ("ld.global.cs.v4.s32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline longlong2 __ldcs(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.cs.v2.s64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "r" (ptr)); return ret; }

static __declspec(__device__) __inline unsigned char __ldcs(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.cs.u8 %0, [%1];"  : "=r"(ret) : "r" (ptr));  return (unsigned char)ret; }
static __declspec(__device__) __inline unsigned short __ldcs(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.cs.u16 %0, [%1];"  : "=h"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned int __ldcs(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.cs.u32 %0, [%1];"  : "=r"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned long long __ldcs(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cs.u64 %0, [%1];"  : "=l"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline uchar2 __ldcs(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.cs.v2.u8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "r" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __declspec(__device__) __inline uchar4 __ldcs(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.cs.v4.u8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "r" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __declspec(__device__) __inline ushort2 __ldcs(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.cs.v2.u16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline ushort4 __ldcs(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.cs.v4.u16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline uint2 __ldcs(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.cs.v2.u32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline uint4 __ldcs(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.cs.v4.u32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline ulonglong2 __ldcs(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.cs.v2.u64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "r" (ptr)); return ret; }

static __declspec(__device__) __inline float __ldcs(const float *ptr) { float ret; asm volatile ("ld.global.cs.f32 %0, [%1];"  : "=f"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline double __ldcs(const double *ptr) { double ret; asm volatile ("ld.global.cs.f64 %0, [%1];"  : "=d"(ret) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline float2 __ldcs(const float2 *ptr) { float2 ret; asm volatile ("ld.global.cs.v2.f32 {%0,%1}, [%2];"  : "=f"(ret.x), "=f"(ret.y) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline float4 __ldcs(const float4 *ptr) { float4 ret; asm volatile ("ld.global.cs.v4.f32 {%0,%1,%2,%3}, [%4];"  : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "r" (ptr)); return ret; }
static __declspec(__device__) __inline double2 __ldcs(const double2 *ptr) { double2 ret; asm volatile ("ld.global.cs.v2.f64 {%0,%1}, [%2];"  : "=d"(ret.x), "=d"(ret.y) : "r" (ptr)); return ret; }









#line 285 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"
static __declspec(__device__) __inline long __ldlu(const long *ptr) { unsigned long ret; asm ("ld.global.lu.s32 %0, [%1];"  : "=r"(ret) : "r" (ptr) : "memory"); return (long)ret; }
static __declspec(__device__) __inline unsigned long __ldlu(const unsigned long *ptr) { unsigned long ret; asm ("ld.global.lu.u32 %0, [%1];"  : "=r"(ret) : "r" (ptr) : "memory"); return ret; }
#line 288 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"


static __declspec(__device__) __inline char __ldlu(const char *ptr) { unsigned int ret; asm ("ld.global.lu.s8 %0, [%1];"  : "=r"(ret) : "r" (ptr) : "memory"); return (char)ret; }
static __declspec(__device__) __inline signed char __ldlu(const signed char *ptr) { unsigned int ret; asm ("ld.global.lu.s8 %0, [%1];"  : "=r"(ret) : "r" (ptr) : "memory"); return (signed char)ret; }
static __declspec(__device__) __inline short __ldlu(const short *ptr) { unsigned short ret; asm ("ld.global.lu.s16 %0, [%1];"  : "=h"(ret) : "r" (ptr) : "memory"); return (short)ret; }
static __declspec(__device__) __inline int __ldlu(const int *ptr) { unsigned int ret; asm ("ld.global.lu.s32 %0, [%1];"  : "=r"(ret) : "r" (ptr) : "memory"); return (int)ret; }
static __declspec(__device__) __inline long long __ldlu(const long long *ptr) { unsigned long long ret; asm ("ld.global.lu.s64 %0, [%1];"  : "=l"(ret) : "r" (ptr) : "memory"); return (long long)ret; }
static __declspec(__device__) __inline char2 __ldlu(const char2 *ptr) { char2 ret; int2 tmp; asm ("ld.global.lu.v2.s8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "r" (ptr) : "memory"); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __declspec(__device__) __inline char4 __ldlu(const char4 *ptr) { char4 ret; int4 tmp; asm ("ld.global.lu.v4.s8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "r" (ptr) : "memory"); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __declspec(__device__) __inline short2 __ldlu(const short2 *ptr) { short2 ret; asm ("ld.global.lu.v2.s16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline short4 __ldlu(const short4 *ptr) { short4 ret; asm ("ld.global.lu.v4.s16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline int2 __ldlu(const int2 *ptr) { int2 ret; asm ("ld.global.lu.v2.s32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline int4 __ldlu(const int4 *ptr) { int4 ret; asm ("ld.global.lu.v4.s32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline longlong2 __ldlu(const longlong2 *ptr) { longlong2 ret; asm ("ld.global.lu.v2.s64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "r" (ptr) : "memory"); return ret; }

static __declspec(__device__) __inline unsigned char __ldlu(const unsigned char *ptr) { unsigned int ret; asm ("ld.global.lu.u8 %0, [%1];"  : "=r"(ret) : "r" (ptr) : "memory");  return (unsigned char)ret; }
static __declspec(__device__) __inline unsigned short __ldlu(const unsigned short *ptr) { unsigned short ret; asm ("ld.global.lu.u16 %0, [%1];"  : "=h"(ret) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline unsigned int __ldlu(const unsigned int *ptr) { unsigned int ret; asm ("ld.global.lu.u32 %0, [%1];"  : "=r"(ret) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline unsigned long long __ldlu(const unsigned long long *ptr) { unsigned long long ret; asm ("ld.global.lu.u64 %0, [%1];"  : "=l"(ret) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline uchar2 __ldlu(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm ("ld.global.lu.v2.u8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "r" (ptr) : "memory"); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __declspec(__device__) __inline uchar4 __ldlu(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm ("ld.global.lu.v4.u8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "r" (ptr) : "memory"); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __declspec(__device__) __inline ushort2 __ldlu(const ushort2 *ptr) { ushort2 ret; asm ("ld.global.lu.v2.u16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline ushort4 __ldlu(const ushort4 *ptr) { ushort4 ret; asm ("ld.global.lu.v4.u16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline uint2 __ldlu(const uint2 *ptr) { uint2 ret; asm ("ld.global.lu.v2.u32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline uint4 __ldlu(const uint4 *ptr) { uint4 ret; asm ("ld.global.lu.v4.u32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline ulonglong2 __ldlu(const ulonglong2 *ptr) { ulonglong2 ret; asm ("ld.global.lu.v2.u64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "r" (ptr) : "memory"); return ret; }

static __declspec(__device__) __inline float __ldlu(const float *ptr) { float ret; asm ("ld.global.lu.f32 %0, [%1];"  : "=f"(ret) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline double __ldlu(const double *ptr) { double ret; asm ("ld.global.lu.f64 %0, [%1];"  : "=d"(ret) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline float2 __ldlu(const float2 *ptr) { float2 ret; asm ("ld.global.lu.v2.f32 {%0,%1}, [%2];"  : "=f"(ret.x), "=f"(ret.y) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline float4 __ldlu(const float4 *ptr) { float4 ret; asm ("ld.global.lu.v4.f32 {%0,%1,%2,%3}, [%4];"  : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline double2 __ldlu(const double2 *ptr) { double2 ret; asm ("ld.global.lu.v2.f64 {%0,%1}, [%2];"  : "=d"(ret.x), "=d"(ret.y) : "r" (ptr) : "memory"); return ret; }









#line 330 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"
static __declspec(__device__) __inline long __ldcv(const long *ptr) { unsigned long ret; asm ("ld.global.cv.s32 %0, [%1];"  : "=r"(ret) : "r" (ptr) : "memory"); return (long)ret; }
static __declspec(__device__) __inline unsigned long __ldcv(const unsigned long *ptr) { unsigned long ret; asm ("ld.global.cv.u32 %0, [%1];"  : "=r"(ret) : "r" (ptr) : "memory"); return ret; }
#line 333 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"


static __declspec(__device__) __inline char __ldcv(const char *ptr) { unsigned int ret; asm ("ld.global.cv.s8 %0, [%1];"  : "=r"(ret) : "r" (ptr) : "memory"); return (char)ret; }
static __declspec(__device__) __inline signed char __ldcv(const signed char *ptr) { unsigned int ret; asm ("ld.global.cv.s8 %0, [%1];"  : "=r"(ret) : "r" (ptr) : "memory"); return (signed char)ret; }
static __declspec(__device__) __inline short __ldcv(const short *ptr) { unsigned short ret; asm ("ld.global.cv.s16 %0, [%1];"  : "=h"(ret) : "r" (ptr) : "memory"); return (short)ret; }
static __declspec(__device__) __inline int __ldcv(const int *ptr) { unsigned int ret; asm ("ld.global.cv.s32 %0, [%1];"  : "=r"(ret) : "r" (ptr) : "memory"); return (int)ret; }
static __declspec(__device__) __inline long long __ldcv(const long long *ptr) { unsigned long long ret; asm ("ld.global.cv.s64 %0, [%1];"  : "=l"(ret) : "r" (ptr) : "memory"); return (long long)ret; }
static __declspec(__device__) __inline char2 __ldcv(const char2 *ptr) { char2 ret; int2 tmp; asm ("ld.global.cv.v2.s8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "r" (ptr) : "memory"); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __declspec(__device__) __inline char4 __ldcv(const char4 *ptr) { char4 ret; int4 tmp; asm ("ld.global.cv.v4.s8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "r" (ptr) : "memory"); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __declspec(__device__) __inline short2 __ldcv(const short2 *ptr) { short2 ret; asm ("ld.global.cv.v2.s16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline short4 __ldcv(const short4 *ptr) { short4 ret; asm ("ld.global.cv.v4.s16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline int2 __ldcv(const int2 *ptr) { int2 ret; asm ("ld.global.cv.v2.s32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline int4 __ldcv(const int4 *ptr) { int4 ret; asm ("ld.global.cv.v4.s32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline longlong2 __ldcv(const longlong2 *ptr) { longlong2 ret; asm ("ld.global.cv.v2.s64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "r" (ptr) : "memory"); return ret; }

static __declspec(__device__) __inline unsigned char __ldcv(const unsigned char *ptr) { unsigned int ret; asm ("ld.global.cv.u8 %0, [%1];"  : "=r"(ret) : "r" (ptr) : "memory");  return (unsigned char)ret; }
static __declspec(__device__) __inline unsigned short __ldcv(const unsigned short *ptr) { unsigned short ret; asm ("ld.global.cv.u16 %0, [%1];"  : "=h"(ret) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline unsigned int __ldcv(const unsigned int *ptr) { unsigned int ret; asm ("ld.global.cv.u32 %0, [%1];"  : "=r"(ret) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline unsigned long long __ldcv(const unsigned long long *ptr) { unsigned long long ret; asm ("ld.global.cv.u64 %0, [%1];"  : "=l"(ret) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline uchar2 __ldcv(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm ("ld.global.cv.v2.u8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "r" (ptr) : "memory"); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __declspec(__device__) __inline uchar4 __ldcv(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm ("ld.global.cv.v4.u8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "r" (ptr) : "memory"); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __declspec(__device__) __inline ushort2 __ldcv(const ushort2 *ptr) { ushort2 ret; asm ("ld.global.cv.v2.u16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline ushort4 __ldcv(const ushort4 *ptr) { ushort4 ret; asm ("ld.global.cv.v4.u16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline uint2 __ldcv(const uint2 *ptr) { uint2 ret; asm ("ld.global.cv.v2.u32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline uint4 __ldcv(const uint4 *ptr) { uint4 ret; asm ("ld.global.cv.v4.u32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline ulonglong2 __ldcv(const ulonglong2 *ptr) { ulonglong2 ret; asm ("ld.global.cv.v2.u64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "r" (ptr) : "memory"); return ret; }

static __declspec(__device__) __inline float __ldcv(const float *ptr) { float ret; asm ("ld.global.cv.f32 %0, [%1];"  : "=f"(ret) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline double __ldcv(const double *ptr) { double ret; asm ("ld.global.cv.f64 %0, [%1];"  : "=d"(ret) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline float2 __ldcv(const float2 *ptr) { float2 ret; asm ("ld.global.cv.v2.f32 {%0,%1}, [%2];"  : "=f"(ret.x), "=f"(ret.y) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline float4 __ldcv(const float4 *ptr) { float4 ret; asm ("ld.global.cv.v4.f32 {%0,%1,%2,%3}, [%4];"  : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "r" (ptr) : "memory"); return ret; }
static __declspec(__device__) __inline double2 __ldcv(const double2 *ptr) { double2 ret; asm ("ld.global.cv.v2.f64 {%0,%1}, [%2];"  : "=d"(ret.x), "=d"(ret.y) : "r" (ptr) : "memory"); return ret; }









#line 375 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"
static __declspec(__device__) __inline void __stwb(long *ptr, long value) { asm ("st.global.wb.s32 [%0], %1;"  :: "r" (ptr),  "r"(value) : "memory"); }
static __declspec(__device__) __inline void __stwb(unsigned long *ptr, unsigned long value) { asm ("st.global.wb.u32 [%0], %1;" :: "r" (ptr), "r"(value) : "memory"); }
#line 378 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"


static __declspec(__device__) __inline void __stwb(char *ptr, char value) { asm ("st.global.wb.s8 [%0], %1;"  :: "r" (ptr), "r"((int)value) : "memory"); }
static __declspec(__device__) __inline void __stwb(signed char *ptr, signed char value) { asm ("st.global.wb.s8 [%0], %1;"  :: "r" (ptr), "r"((int)value) : "memory"); }
static __declspec(__device__) __inline void __stwb(short *ptr, short value) { asm ("st.global.wb.s16 [%0], %1;"  :: "r" (ptr), "h"(value) : "memory"); }
static __declspec(__device__) __inline void __stwb(int *ptr, int value) { asm ("st.global.wb.s32 [%0], %1;"  :: "r" (ptr), "r"(value) : "memory"); }
static __declspec(__device__) __inline void __stwb(long long *ptr, long long value) { asm ("st.global.wb.s64 [%0], %1;"  :: "r" (ptr), "l"(value) : "memory"); }
static __declspec(__device__) __inline void __stwb(char2 *ptr, char2 value) { const int x = value.x, y = value.y; asm ("st.global.wb.v2.s8 [%0], {%1,%2};" :: "r" (ptr), "r"(x), "r"(y) : "memory"); }
static __declspec(__device__) __inline void __stwb(char4 *ptr, char4 value) { const int x = value.x, y = value.y, z = value.z, w = value.w; asm ("st.global.wb.v4.s8 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "r"(x), "r"(y), "r"(z), "r"(w) : "memory"); }
static __declspec(__device__) __inline void __stwb(short2 *ptr, short2 value) { asm ("st.global.wb.v2.s16 [%0], {%1,%2};" :: "r" (ptr), "h"(value.x), "h"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stwb(short4 *ptr, short4 value) { asm ("st.global.wb.v4.s16 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "h"(value.x), "h"(value.y), "h"(value.z), "h"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stwb(int2 *ptr, int2 value) { asm ("st.global.wb.v2.s32 [%0], {%1,%2};" :: "r" (ptr), "r"(value.x), "r"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stwb(int4 *ptr, int4 value) { asm ("st.global.wb.v4.s32 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "r"(value.x), "r"(value.y), "r"(value.z), "r"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stwb(longlong2 *ptr, longlong2 value) { asm ("st.global.wb.v2.s64 [%0], {%1,%2};" :: "r" (ptr), "l"(value.x), "l"(value.y) : "memory"); }

static __declspec(__device__) __inline void __stwb(unsigned char *ptr, unsigned char value) { asm ("st.global.wb.u8 [%0], %1;"  :: "r" (ptr), "r"((int)value) : "memory");  }
static __declspec(__device__) __inline void __stwb(unsigned short *ptr, unsigned short value) { asm ("st.global.wb.u16 [%0], %1;"  :: "r" (ptr), "h"(value) : "memory"); }
static __declspec(__device__) __inline void __stwb(unsigned int *ptr, unsigned int value) { asm ("st.global.wb.u32 [%0], %1;"  :: "r" (ptr), "r"(value) : "memory"); }
static __declspec(__device__) __inline void __stwb(unsigned long long *ptr, unsigned long long value) { asm ("st.global.wb.u64 [%0], %1;"  :: "r" (ptr), "l"(value) : "memory"); }
static __declspec(__device__) __inline void __stwb(uchar2 *ptr, uchar2 value) { const int x = value.x, y = value.y; asm ("st.global.wb.v2.u8 [%0], {%1,%2};"  :: "r" (ptr),  "r"(x), "r"(y) : "memory"); }
static __declspec(__device__) __inline void __stwb(uchar4 *ptr, uchar4 value) { const int x = value.x, y = value.y, z = value.z, w = value.w; asm ("st.global.wb.v4.u8 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "r"(x), "r"(y), "r"(z), "r"(w) : "memory"); }
static __declspec(__device__) __inline void __stwb(ushort2 *ptr, ushort2 value) { asm ("st.global.wb.v2.u16 [%0], {%1,%2};"  :: "r" (ptr), "h"(value.x), "h"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stwb(ushort4 *ptr, ushort4 value) { asm ("st.global.wb.v4.u16 [%0], {%1,%2,%3,%4};"  :: "r" (ptr), "h"(value.x), "h"(value.y), "h"(value.z), "h"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stwb(uint2 *ptr, uint2 value) { asm ("st.global.wb.v2.u32 [%0], {%1,%2};" :: "r" (ptr), "r"(value.x), "r"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stwb(uint4 *ptr, uint4 value) { asm ("st.global.wb.v4.u32 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "r"(value.x), "r"(value.y), "r"(value.z), "r"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stwb(ulonglong2 *ptr, ulonglong2 value) { asm ("st.global.wb.v2.u64 [%0], {%1,%2};" :: "r" (ptr), "l"(value.x), "l"(value.y) : "memory"); }

static __declspec(__device__) __inline void __stwb(float *ptr, float value) { asm ("st.global.wb.f32 [%0], %1;"  :: "r" (ptr), "f"(value) : "memory"); }
static __declspec(__device__) __inline void __stwb(double *ptr, double value) { asm ("st.global.wb.f64 [%0], %1;"  :: "r" (ptr), "d"(value) : "memory"); }
static __declspec(__device__) __inline void __stwb(float2 *ptr, float2 value) { asm ("st.global.wb.v2.f32 [%0], {%1,%2};"  :: "r" (ptr), "f"(value.x), "f"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stwb(float4 *ptr, float4 value) { asm ("st.global.wb.v4.f32 [%0], {%1,%2,%3,%4};"  :: "r" (ptr), "f"(value.x), "f"(value.y), "f"(value.z), "f"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stwb(double2 *ptr, double2 value) { asm ("st.global.wb.v2.f64 [%0], {%1,%2};"  :: "r" (ptr), "d"(value.x), "d"(value.y) : "memory"); }









#line 420 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"
static __declspec(__device__) __inline void __stcg(long *ptr, long value) { asm ("st.global.cg.s32 [%0], %1;"  :: "r" (ptr),  "r"(value) : "memory"); }
static __declspec(__device__) __inline void __stcg(unsigned long *ptr, unsigned long value) { asm ("st.global.cg.u32 [%0], %1;" :: "r" (ptr), "r"(value) : "memory"); }
#line 423 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"


static __declspec(__device__) __inline void __stcg(char *ptr, char value) { asm ("st.global.cg.s8 [%0], %1;"  :: "r" (ptr), "r"((int)value) : "memory"); }
static __declspec(__device__) __inline void __stcg(signed char *ptr, signed char value) { asm ("st.global.cg.s8 [%0], %1;"  :: "r" (ptr), "r"((int)value) : "memory"); }
static __declspec(__device__) __inline void __stcg(short *ptr, short value) { asm ("st.global.cg.s16 [%0], %1;"  :: "r" (ptr), "h"(value) : "memory"); }
static __declspec(__device__) __inline void __stcg(int *ptr, int value) { asm ("st.global.cg.s32 [%0], %1;"  :: "r" (ptr), "r"(value) : "memory"); }
static __declspec(__device__) __inline void __stcg(long long *ptr, long long value) { asm ("st.global.cg.s64 [%0], %1;"  :: "r" (ptr), "l"(value) : "memory"); }
static __declspec(__device__) __inline void __stcg(char2 *ptr, char2 value) { const int x = value.x, y = value.y; asm ("st.global.cg.v2.s8 [%0], {%1,%2};" :: "r" (ptr), "r"(x), "r"(y) : "memory"); }
static __declspec(__device__) __inline void __stcg(char4 *ptr, char4 value) { const int x = value.x, y = value.y, z = value.z, w = value.w; asm ("st.global.cg.v4.s8 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "r"(x), "r"(y), "r"(z), "r"(w) : "memory"); }
static __declspec(__device__) __inline void __stcg(short2 *ptr, short2 value) { asm ("st.global.cg.v2.s16 [%0], {%1,%2};" :: "r" (ptr), "h"(value.x), "h"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stcg(short4 *ptr, short4 value) { asm ("st.global.cg.v4.s16 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "h"(value.x), "h"(value.y), "h"(value.z), "h"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stcg(int2 *ptr, int2 value) { asm ("st.global.cg.v2.s32 [%0], {%1,%2};" :: "r" (ptr), "r"(value.x), "r"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stcg(int4 *ptr, int4 value) { asm ("st.global.cg.v4.s32 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "r"(value.x), "r"(value.y), "r"(value.z), "r"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stcg(longlong2 *ptr, longlong2 value) { asm ("st.global.cg.v2.s64 [%0], {%1,%2};" :: "r" (ptr), "l"(value.x), "l"(value.y) : "memory"); }

static __declspec(__device__) __inline void __stcg(unsigned char *ptr, unsigned char value) { asm ("st.global.cg.u8 [%0], %1;"  :: "r" (ptr), "r"((int)value) : "memory");  }
static __declspec(__device__) __inline void __stcg(unsigned short *ptr, unsigned short value) { asm ("st.global.cg.u16 [%0], %1;"  :: "r" (ptr), "h"(value) : "memory"); }
static __declspec(__device__) __inline void __stcg(unsigned int *ptr, unsigned int value) { asm ("st.global.cg.u32 [%0], %1;"  :: "r" (ptr), "r"(value) : "memory"); }
static __declspec(__device__) __inline void __stcg(unsigned long long *ptr, unsigned long long value) { asm ("st.global.cg.u64 [%0], %1;"  :: "r" (ptr), "l"(value) : "memory"); }
static __declspec(__device__) __inline void __stcg(uchar2 *ptr, uchar2 value) { const int x = value.x, y = value.y; asm ("st.global.cg.v2.u8 [%0], {%1,%2};"  :: "r" (ptr),  "r"(x), "r"(y) : "memory"); }
static __declspec(__device__) __inline void __stcg(uchar4 *ptr, uchar4 value) { const int x = value.x, y = value.y, z = value.z, w = value.w; asm ("st.global.cg.v4.u8 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "r"(x), "r"(y), "r"(z), "r"(w) : "memory"); }
static __declspec(__device__) __inline void __stcg(ushort2 *ptr, ushort2 value) { asm ("st.global.cg.v2.u16 [%0], {%1,%2};"  :: "r" (ptr), "h"(value.x), "h"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stcg(ushort4 *ptr, ushort4 value) { asm ("st.global.cg.v4.u16 [%0], {%1,%2,%3,%4};"  :: "r" (ptr), "h"(value.x), "h"(value.y), "h"(value.z), "h"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stcg(uint2 *ptr, uint2 value) { asm ("st.global.cg.v2.u32 [%0], {%1,%2};" :: "r" (ptr), "r"(value.x), "r"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stcg(uint4 *ptr, uint4 value) { asm ("st.global.cg.v4.u32 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "r"(value.x), "r"(value.y), "r"(value.z), "r"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stcg(ulonglong2 *ptr, ulonglong2 value) { asm ("st.global.cg.v2.u64 [%0], {%1,%2};" :: "r" (ptr), "l"(value.x), "l"(value.y) : "memory"); }

static __declspec(__device__) __inline void __stcg(float *ptr, float value) { asm ("st.global.cg.f32 [%0], %1;"  :: "r" (ptr), "f"(value) : "memory"); }
static __declspec(__device__) __inline void __stcg(double *ptr, double value) { asm ("st.global.cg.f64 [%0], %1;"  :: "r" (ptr), "d"(value) : "memory"); }
static __declspec(__device__) __inline void __stcg(float2 *ptr, float2 value) { asm ("st.global.cg.v2.f32 [%0], {%1,%2};"  :: "r" (ptr), "f"(value.x), "f"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stcg(float4 *ptr, float4 value) { asm ("st.global.cg.v4.f32 [%0], {%1,%2,%3,%4};"  :: "r" (ptr), "f"(value.x), "f"(value.y), "f"(value.z), "f"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stcg(double2 *ptr, double2 value) { asm ("st.global.cg.v2.f64 [%0], {%1,%2};"  :: "r" (ptr), "d"(value.x), "d"(value.y) : "memory"); }









#line 465 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"
static __declspec(__device__) __inline void __stcs(long *ptr, long value) { asm ("st.global.cs.s32 [%0], %1;"  :: "r" (ptr),  "r"(value) : "memory"); }
static __declspec(__device__) __inline void __stcs(unsigned long *ptr, unsigned long value) { asm ("st.global.cs.u32 [%0], %1;" :: "r" (ptr), "r"(value) : "memory"); }
#line 468 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"


static __declspec(__device__) __inline void __stcs(char *ptr, char value) { asm ("st.global.cs.s8 [%0], %1;"  :: "r" (ptr), "r"((int)value) : "memory"); }
static __declspec(__device__) __inline void __stcs(signed char *ptr, signed char value) { asm ("st.global.cs.s8 [%0], %1;"  :: "r" (ptr), "r"((int)value) : "memory"); }
static __declspec(__device__) __inline void __stcs(short *ptr, short value) { asm ("st.global.cs.s16 [%0], %1;"  :: "r" (ptr), "h"(value) : "memory"); }
static __declspec(__device__) __inline void __stcs(int *ptr, int value) { asm ("st.global.cs.s32 [%0], %1;"  :: "r" (ptr), "r"(value) : "memory"); }
static __declspec(__device__) __inline void __stcs(long long *ptr, long long value) { asm ("st.global.cs.s64 [%0], %1;"  :: "r" (ptr), "l"(value) : "memory"); }
static __declspec(__device__) __inline void __stcs(char2 *ptr, char2 value) { const int x = value.x, y = value.y; asm ("st.global.cs.v2.s8 [%0], {%1,%2};" :: "r" (ptr), "r"(x), "r"(y) : "memory"); }
static __declspec(__device__) __inline void __stcs(char4 *ptr, char4 value) { const int x = value.x, y = value.y, z = value.z, w = value.w; asm ("st.global.cs.v4.s8 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "r"(x), "r"(y), "r"(z), "r"(w) : "memory"); }
static __declspec(__device__) __inline void __stcs(short2 *ptr, short2 value) { asm ("st.global.cs.v2.s16 [%0], {%1,%2};" :: "r" (ptr), "h"(value.x), "h"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stcs(short4 *ptr, short4 value) { asm ("st.global.cs.v4.s16 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "h"(value.x), "h"(value.y), "h"(value.z), "h"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stcs(int2 *ptr, int2 value) { asm ("st.global.cs.v2.s32 [%0], {%1,%2};" :: "r" (ptr), "r"(value.x), "r"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stcs(int4 *ptr, int4 value) { asm ("st.global.cs.v4.s32 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "r"(value.x), "r"(value.y), "r"(value.z), "r"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stcs(longlong2 *ptr, longlong2 value) { asm ("st.global.cs.v2.s64 [%0], {%1,%2};" :: "r" (ptr), "l"(value.x), "l"(value.y) : "memory"); }

static __declspec(__device__) __inline void __stcs(unsigned char *ptr, unsigned char value) { asm ("st.global.cs.u8 [%0], %1;"  :: "r" (ptr), "r"((int)value) : "memory");  }
static __declspec(__device__) __inline void __stcs(unsigned short *ptr, unsigned short value) { asm ("st.global.cs.u16 [%0], %1;"  :: "r" (ptr), "h"(value) : "memory"); }
static __declspec(__device__) __inline void __stcs(unsigned int *ptr, unsigned int value) { asm ("st.global.cs.u32 [%0], %1;"  :: "r" (ptr), "r"(value) : "memory"); }
static __declspec(__device__) __inline void __stcs(unsigned long long *ptr, unsigned long long value) { asm ("st.global.cs.u64 [%0], %1;"  :: "r" (ptr), "l"(value) : "memory"); }
static __declspec(__device__) __inline void __stcs(uchar2 *ptr, uchar2 value) { const int x = value.x, y = value.y; asm ("st.global.cs.v2.u8 [%0], {%1,%2};"  :: "r" (ptr),  "r"(x), "r"(y) : "memory"); }
static __declspec(__device__) __inline void __stcs(uchar4 *ptr, uchar4 value) { const int x = value.x, y = value.y, z = value.z, w = value.w; asm ("st.global.cs.v4.u8 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "r"(x), "r"(y), "r"(z), "r"(w) : "memory"); }
static __declspec(__device__) __inline void __stcs(ushort2 *ptr, ushort2 value) { asm ("st.global.cs.v2.u16 [%0], {%1,%2};"  :: "r" (ptr), "h"(value.x), "h"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stcs(ushort4 *ptr, ushort4 value) { asm ("st.global.cs.v4.u16 [%0], {%1,%2,%3,%4};"  :: "r" (ptr), "h"(value.x), "h"(value.y), "h"(value.z), "h"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stcs(uint2 *ptr, uint2 value) { asm ("st.global.cs.v2.u32 [%0], {%1,%2};" :: "r" (ptr), "r"(value.x), "r"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stcs(uint4 *ptr, uint4 value) { asm ("st.global.cs.v4.u32 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "r"(value.x), "r"(value.y), "r"(value.z), "r"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stcs(ulonglong2 *ptr, ulonglong2 value) { asm ("st.global.cs.v2.u64 [%0], {%1,%2};" :: "r" (ptr), "l"(value.x), "l"(value.y) : "memory"); }

static __declspec(__device__) __inline void __stcs(float *ptr, float value) { asm ("st.global.cs.f32 [%0], %1;"  :: "r" (ptr), "f"(value) : "memory"); }
static __declspec(__device__) __inline void __stcs(double *ptr, double value) { asm ("st.global.cs.f64 [%0], %1;"  :: "r" (ptr), "d"(value) : "memory"); }
static __declspec(__device__) __inline void __stcs(float2 *ptr, float2 value) { asm ("st.global.cs.v2.f32 [%0], {%1,%2};"  :: "r" (ptr), "f"(value.x), "f"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stcs(float4 *ptr, float4 value) { asm ("st.global.cs.v4.f32 [%0], {%1,%2,%3,%4};"  :: "r" (ptr), "f"(value.x), "f"(value.y), "f"(value.z), "f"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stcs(double2 *ptr, double2 value) { asm ("st.global.cs.v2.f64 [%0], {%1,%2};"  :: "r" (ptr), "d"(value.x), "d"(value.y) : "memory"); }









#line 510 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"
static __declspec(__device__) __inline void __stwt(long *ptr, long value) { asm ("st.global.wt.s32 [%0], %1;"  :: "r" (ptr),  "r"(value) : "memory"); }
static __declspec(__device__) __inline void __stwt(unsigned long *ptr, unsigned long value) { asm ("st.global.wt.u32 [%0], %1;" :: "r" (ptr), "r"(value) : "memory"); }
#line 513 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"


static __declspec(__device__) __inline void __stwt(char *ptr, char value) { asm ("st.global.wt.s8 [%0], %1;"  :: "r" (ptr), "r"((int)value) : "memory"); }
static __declspec(__device__) __inline void __stwt(signed char *ptr, signed char value) { asm ("st.global.wt.s8 [%0], %1;"  :: "r" (ptr), "r"((int)value) : "memory"); }
static __declspec(__device__) __inline void __stwt(short *ptr, short value) { asm ("st.global.wt.s16 [%0], %1;"  :: "r" (ptr), "h"(value) : "memory"); }
static __declspec(__device__) __inline void __stwt(int *ptr, int value) { asm ("st.global.wt.s32 [%0], %1;"  :: "r" (ptr), "r"(value) : "memory"); }
static __declspec(__device__) __inline void __stwt(long long *ptr, long long value) { asm ("st.global.wt.s64 [%0], %1;"  :: "r" (ptr), "l"(value) : "memory"); }
static __declspec(__device__) __inline void __stwt(char2 *ptr, char2 value) { const int x = value.x, y = value.y; asm ("st.global.wt.v2.s8 [%0], {%1,%2};" :: "r" (ptr), "r"(x), "r"(y) : "memory"); }
static __declspec(__device__) __inline void __stwt(char4 *ptr, char4 value) { const int x = value.x, y = value.y, z = value.z, w = value.w; asm ("st.global.wt.v4.s8 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "r"(x), "r"(y), "r"(z), "r"(w) : "memory"); }
static __declspec(__device__) __inline void __stwt(short2 *ptr, short2 value) { asm ("st.global.wt.v2.s16 [%0], {%1,%2};" :: "r" (ptr), "h"(value.x), "h"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stwt(short4 *ptr, short4 value) { asm ("st.global.wt.v4.s16 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "h"(value.x), "h"(value.y), "h"(value.z), "h"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stwt(int2 *ptr, int2 value) { asm ("st.global.wt.v2.s32 [%0], {%1,%2};" :: "r" (ptr), "r"(value.x), "r"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stwt(int4 *ptr, int4 value) { asm ("st.global.wt.v4.s32 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "r"(value.x), "r"(value.y), "r"(value.z), "r"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stwt(longlong2 *ptr, longlong2 value) { asm ("st.global.wt.v2.s64 [%0], {%1,%2};" :: "r" (ptr), "l"(value.x), "l"(value.y) : "memory"); }

static __declspec(__device__) __inline void __stwt(unsigned char *ptr, unsigned char value) { asm ("st.global.wt.u8 [%0], %1;"  :: "r" (ptr), "r"((int)value) : "memory");  }
static __declspec(__device__) __inline void __stwt(unsigned short *ptr, unsigned short value) { asm ("st.global.wt.u16 [%0], %1;"  :: "r" (ptr), "h"(value) : "memory"); }
static __declspec(__device__) __inline void __stwt(unsigned int *ptr, unsigned int value) { asm ("st.global.wt.u32 [%0], %1;"  :: "r" (ptr), "r"(value) : "memory"); }
static __declspec(__device__) __inline void __stwt(unsigned long long *ptr, unsigned long long value) { asm ("st.global.wt.u64 [%0], %1;"  :: "r" (ptr), "l"(value) : "memory"); }
static __declspec(__device__) __inline void __stwt(uchar2 *ptr, uchar2 value) { const int x = value.x, y = value.y; asm ("st.global.wt.v2.u8 [%0], {%1,%2};"  :: "r" (ptr),  "r"(x), "r"(y) : "memory"); }
static __declspec(__device__) __inline void __stwt(uchar4 *ptr, uchar4 value) { const int x = value.x, y = value.y, z = value.z, w = value.w; asm ("st.global.wt.v4.u8 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "r"(x), "r"(y), "r"(z), "r"(w) : "memory"); }
static __declspec(__device__) __inline void __stwt(ushort2 *ptr, ushort2 value) { asm ("st.global.wt.v2.u16 [%0], {%1,%2};"  :: "r" (ptr), "h"(value.x), "h"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stwt(ushort4 *ptr, ushort4 value) { asm ("st.global.wt.v4.u16 [%0], {%1,%2,%3,%4};"  :: "r" (ptr), "h"(value.x), "h"(value.y), "h"(value.z), "h"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stwt(uint2 *ptr, uint2 value) { asm ("st.global.wt.v2.u32 [%0], {%1,%2};" :: "r" (ptr), "r"(value.x), "r"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stwt(uint4 *ptr, uint4 value) { asm ("st.global.wt.v4.u32 [%0], {%1,%2,%3,%4};" :: "r" (ptr), "r"(value.x), "r"(value.y), "r"(value.z), "r"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stwt(ulonglong2 *ptr, ulonglong2 value) { asm ("st.global.wt.v2.u64 [%0], {%1,%2};" :: "r" (ptr), "l"(value.x), "l"(value.y) : "memory"); }

static __declspec(__device__) __inline void __stwt(float *ptr, float value) { asm ("st.global.wt.f32 [%0], %1;"  :: "r" (ptr), "f"(value) : "memory"); }
static __declspec(__device__) __inline void __stwt(double *ptr, double value) { asm ("st.global.wt.f64 [%0], %1;"  :: "r" (ptr), "d"(value) : "memory"); }
static __declspec(__device__) __inline void __stwt(float2 *ptr, float2 value) { asm ("st.global.wt.v2.f32 [%0], {%1,%2};"  :: "r" (ptr), "f"(value.x), "f"(value.y) : "memory"); }
static __declspec(__device__) __inline void __stwt(float4 *ptr, float4 value) { asm ("st.global.wt.v4.f32 [%0], {%1,%2,%3,%4};"  :: "r" (ptr), "f"(value.x), "f"(value.y), "f"(value.z), "f"(value.w) : "memory"); }
static __declspec(__device__) __inline void __stwt(double2 *ptr, double2 value) { asm ("st.global.wt.v2.f64 [%0], {%1,%2};"  :: "r" (ptr), "d"(value.x), "d"(value.y) : "memory"); }








static __declspec(__device__) __inline unsigned int __funnelshift_l(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.l.wrap.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}
static __declspec(__device__) __inline unsigned int __funnelshift_lc(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.l.clamp.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}


static __declspec(__device__) __inline unsigned int __funnelshift_r(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.r.wrap.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}
static __declspec(__device__) __inline unsigned int __funnelshift_rc(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.r.clamp.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}


#line 582 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"

#line 584 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"



#line 588 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.hpp"

#line 508 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.h"
#line 509 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.h"

#line 511 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.h"
#line 3297 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_35_intrinsics.h"














































































































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.h"





























































































































































































































































































































































































































































































































#line 511 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_32_intrinsics.h"
#line 112 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_35_intrinsics.h"



#line 116 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_35_intrinsics.h"

#line 3298 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_61_intrinsics.h"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_61_intrinsics.h"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_61_intrinsics.h"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_61_intrinsics.h"





#line 76 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_61_intrinsics.h"













static __declspec(__device__) __inline int __dp2a_lo(int srcA, int srcB, int c) ;
static __declspec(__device__) __inline unsigned int __dp2a_lo(unsigned int srcA, unsigned int srcB, unsigned int c) ;

static __declspec(__device__) __inline int __dp2a_lo(short2 srcA, char4 srcB, int c) ;
static __declspec(__device__) __inline unsigned int __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned int c) ;

static __declspec(__device__) __inline int __dp2a_hi(int srcA, int srcB, int c) ;
static __declspec(__device__) __inline unsigned int __dp2a_hi(unsigned int srcA, unsigned int srcB, unsigned int c) ;

static __declspec(__device__) __inline int __dp2a_hi(short2 srcA, char4 srcB, int c) ;
static __declspec(__device__) __inline unsigned int __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned int c) ;






static __declspec(__device__) __inline int __dp4a(int srcA, int srcB, int c) ;
static __declspec(__device__) __inline unsigned int __dp4a(unsigned int srcA, unsigned int srcB, unsigned int c) ;

static __declspec(__device__) __inline int __dp4a(char4 srcA, char4 srcB, int c) ;
static __declspec(__device__) __inline unsigned int __dp4a(uchar4 srcA, uchar4 srcB, unsigned int c) ;

#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_61_intrinsics.h"

#line 115 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_61_intrinsics.h"





#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_61_intrinsics.hpp"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_61_intrinsics.hpp"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_61_intrinsics.hpp"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_61_intrinsics.hpp"









static __declspec(__device__) __inline int __dp4a(int srcA, int srcB, int c) {
    int ret;
    asm volatile ("dp4a.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __declspec(__device__) __inline unsigned int __dp4a(unsigned int srcA, unsigned int srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp4a.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __declspec(__device__) __inline int __dp4a(char4 srcA, char4 srcB, int c) {
    int ret;
    asm volatile ("dp4a.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(int *)&srcA), "r"(*(int *)&srcB), "r"(c));
    return ret;
}

static __declspec(__device__) __inline unsigned int __dp4a(uchar4 srcA, uchar4 srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp4a.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(unsigned int *)&srcA), "r"(*(unsigned int *)&srcB), "r"(c));
    return ret;
}


static __declspec(__device__) __inline int __dp2a_lo(int srcA, int srcB, int c) {
    int ret;
    asm volatile ("dp2a.lo.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __declspec(__device__) __inline unsigned int __dp2a_lo(unsigned int srcA, unsigned int srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp2a.lo.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __declspec(__device__) __inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {
    int ret;
    asm volatile ("dp2a.lo.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(int *)&srcA), "r"(*(int *)&srcB), "r"(c));
    return ret;
}

static __declspec(__device__) __inline unsigned int __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp2a.lo.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(unsigned int *)&srcA), "r"(*(unsigned int *)&srcB), "r"(c));
    return ret;
}


static __declspec(__device__) __inline int __dp2a_hi(int srcA, int srcB, int c) {
    int ret;
    asm volatile ("dp2a.hi.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __declspec(__device__) __inline unsigned int __dp2a_hi(unsigned int srcA, unsigned int srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp2a.hi.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __declspec(__device__) __inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {
    int ret;
    asm volatile ("dp2a.hi.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(int *)&srcA), "r"(*(int *)&srcB), "r"(c));
    return ret;
}

static __declspec(__device__) __inline unsigned int __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp2a.hi.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(unsigned int *)&srcA), "r"(*(unsigned int *)&srcB), "r"(c));
    return ret;
}


#line 155 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_61_intrinsics.hpp"

#line 157 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_61_intrinsics.hpp"



#line 161 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_61_intrinsics.hpp"

#line 121 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_61_intrinsics.h"
#line 122 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_61_intrinsics.h"

#line 124 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\sm_61_intrinsics.h"
#line 3299 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.h"






#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.h"

#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.h"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"






















































































































#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
































































































































































































































#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 81 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"






















































































































































































#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"
#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.h"





#line 88 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.h"





static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, unsigned value) ;
static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, int value) ;
static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, unsigned long value) ;
static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, long value) ;
static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, unsigned long long value) ;
static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, long long value) ;
static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, float value) ;
static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, double value) ;

static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, unsigned value, int *pred) ;
static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, int value, int *pred) ;
static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, unsigned long value, int *pred) ;
static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, long value, int *pred) ;
static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, unsigned long long value, int *pred) ;
static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, long long value, int *pred) ;
static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, float value, int *pred) ;
static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, double value, int *pred) ;

static __declspec(__device__) __inline void __nanosleep(unsigned int ns) ;

static __declspec(__device__) __inline unsigned short int atomicCAS(unsigned short int *address, unsigned short int compare, unsigned short int val) ;

#line 116 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.h"

#line 118 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.h"





#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.hpp"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.hpp"






#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.hpp"

#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.hpp"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"






















































































































#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
































































































































































































































#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.hpp"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 81 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.hpp"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"






















































































































































































#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"
#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.hpp"











static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, unsigned value) {
  return __match32_any_sync(mask, value);
}

static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, int value) {
  return __match32_any_sync(mask, value);
}

static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, unsigned long value) {
  return (sizeof(long) == sizeof(long long)) ?
    __match64_any_sync(mask, (unsigned long long)value):
    __match32_any_sync(mask, (unsigned)value);
}

static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, long value) {
  return (sizeof(long) == sizeof(long long)) ?
    __match64_any_sync(mask, (unsigned long long)value):
    __match32_any_sync(mask, (unsigned)value);
}

static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, unsigned long long value) {
  return __match64_any_sync(mask, value);
}

static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, long long value) {
  return __match64_any_sync(mask, value);
}

static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, float value) {
  return __match32_any_sync(mask, __float_as_uint(value));
}

static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, double value) {
  return __match64_any_sync(mask, __double_as_longlong(value));
}




static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, unsigned value, int *pred) {
  return __match32_all_sync(mask, value, pred);
}

static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, int value, int *pred) {
  return __match32_all_sync(mask, value, pred);
}

static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, unsigned long value, int *pred) {
  return (sizeof(long) == sizeof(long long)) ?
    __match64_all_sync(mask, (unsigned long long)value, pred):
    __match32_all_sync(mask, (unsigned)value, pred);
}

static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, long value, int *pred) {
  return (sizeof(long) == sizeof(long long)) ?
    __match64_all_sync(mask, (unsigned long long)value, pred):
    __match32_all_sync(mask, (unsigned)value, pred);
}

static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, unsigned long long value, int *pred) {
  return __match64_all_sync(mask, value, pred);
}

static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, long long value, int *pred) {
  return __match64_all_sync(mask, value, pred);
}

static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, float value, int *pred) {
  return __match32_all_sync(mask, __float_as_uint(value), pred);
}

static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, double value, int *pred) {
  return __match64_all_sync(mask, __double_as_longlong(value), pred);
}

static __declspec(__device__) __inline void __nanosleep(unsigned int ns) {
    asm volatile("nanosleep.u32 %0;" :: "r"(ns));
}


extern "C" __declspec(__device__) __declspec(__device_builtin__)
unsigned short __usAtomicCAS(unsigned short *, unsigned short, unsigned short);

static __declspec(__device__) __inline unsigned short int atomicCAS(unsigned short int *address, unsigned short int compare, unsigned short int val) {
  return __usAtomicCAS(address, compare, val);
}


#line 182 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.hpp"

#line 184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.hpp"



#line 188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.hpp"




#line 193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.hpp"
#line 124 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.h"
#line 125 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.h"

#line 127 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.h"




#line 132 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_70_rt.h"
#line 3300 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.h"






#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.h"

#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.h"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"






















































































































#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
































































































































































































































#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 81 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"






















































































































































































#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"
#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.h"





#line 88 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.h"





static __declspec(__device__) __inline unsigned __reduce_add_sync(unsigned mask, unsigned value) ;
static __declspec(__device__) __inline unsigned __reduce_min_sync(unsigned mask, unsigned value) ;
static __declspec(__device__) __inline unsigned __reduce_max_sync(unsigned mask, unsigned value) ;

static __declspec(__device__) __inline int __reduce_add_sync(unsigned mask, int value) ;
static __declspec(__device__) __inline int __reduce_min_sync(unsigned mask, int value) ;
static __declspec(__device__) __inline int __reduce_max_sync(unsigned mask, int value) ;

static __declspec(__device__) __inline unsigned __reduce_and_sync(unsigned mask, unsigned value) ;
static __declspec(__device__) __inline unsigned __reduce_or_sync(unsigned mask, unsigned value) ;
static __declspec(__device__) __inline unsigned __reduce_xor_sync(unsigned mask, unsigned value) ;


extern "C" {
inline __declspec(__device__) void *__nv_associate_access_property(const void *ptr, 
                                                       unsigned long long property) {
  extern __declspec(__device__) void *__nv_associate_access_property_impl(const void *,
                                                              unsigned long long);
  return __nv_associate_access_property_impl(ptr, property);
}

inline __declspec(__device__)  void __nv_memcpy_async_shared_global_4(void *dst, 
                                                          const void *src, 
                                                          unsigned src_size) {
  extern __declspec(__device__) void __nv_memcpy_async_shared_global_4_impl(void *, 
                                                                const void *, 
                                                                unsigned);
  __nv_memcpy_async_shared_global_4_impl(dst, src, src_size);
}

inline __declspec(__device__)  void __nv_memcpy_async_shared_global_8(void *dst, 
                                                          const void *src, 
                                                          unsigned src_size) {
  extern __declspec(__device__) void __nv_memcpy_async_shared_global_8_impl(void *, 
                                                                const void *, 
                                                                unsigned);
  __nv_memcpy_async_shared_global_8_impl(dst, src, src_size);
}

inline __declspec(__device__)  void __nv_memcpy_async_shared_global_16(void *dst, 
                                                          const void *src, 
                                                          unsigned src_size) {
  extern __declspec(__device__) void __nv_memcpy_async_shared_global_16_impl(void *, 
                                                                const void *, 
                                                                unsigned);
  __nv_memcpy_async_shared_global_16_impl(dst, src, src_size);
}

}
#line 143 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.h"

#line 145 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.h"





#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.hpp"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.hpp"






#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.hpp"

#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.hpp"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3055 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"






















































































































#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
































































































































































































































#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\builtin_types.h"
#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.hpp"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_types.h"
#line 81 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.hpp"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"






















































































































































































#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"




#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\host_defines.h"
#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.hpp"








extern "C" { 
  __declspec(__device_builtin__) __declspec(__device__) unsigned __reduce_add_sync_unsigned_impl(unsigned, unsigned);
  __declspec(__device_builtin__) __declspec(__device__) unsigned __reduce_min_sync_unsigned_impl(unsigned, unsigned);
  __declspec(__device_builtin__) __declspec(__device__) unsigned __reduce_max_sync_unsigned_impl(unsigned, unsigned);
  __declspec(__device_builtin__) __declspec(__device__) int __reduce_add_sync_signed_impl(unsigned, int);
  __declspec(__device_builtin__) __declspec(__device__) int __reduce_min_sync_signed_impl(unsigned, int);
  __declspec(__device_builtin__) __declspec(__device__) int __reduce_max_sync_signed_impl(unsigned, int);
  __declspec(__device_builtin__) __declspec(__device__) unsigned __reduce_or_sync_unsigned_impl(unsigned, unsigned);
  __declspec(__device_builtin__) __declspec(__device__) unsigned __reduce_and_sync_unsigned_impl(unsigned, unsigned);
  __declspec(__device_builtin__) __declspec(__device__) unsigned __reduce_xor_sync_unsigned_impl(unsigned, unsigned);
}

static __declspec(__device__) __inline unsigned __reduce_add_sync(unsigned mask, unsigned value) {
  return __reduce_add_sync_unsigned_impl(mask, value);
}

static __declspec(__device__) __inline unsigned __reduce_min_sync(unsigned mask, unsigned value) {
  return __reduce_min_sync_unsigned_impl(mask, value);
}

static __declspec(__device__) __inline unsigned __reduce_max_sync(unsigned mask, unsigned value) {
  return __reduce_max_sync_unsigned_impl(mask, value);
}

static __declspec(__device__) __inline int __reduce_add_sync(unsigned mask, int value) {
  return __reduce_add_sync_signed_impl(mask, value);
}
  
static __declspec(__device__) __inline int __reduce_min_sync(unsigned mask, int value) {
  return __reduce_min_sync_signed_impl(mask, value);
}

static __declspec(__device__) __inline int __reduce_max_sync(unsigned mask, int value) {
  return __reduce_max_sync_signed_impl(mask, value);
}

static __declspec(__device__) __inline unsigned __reduce_and_sync(unsigned mask, unsigned value) {
  return __reduce_and_sync_unsigned_impl(mask, value);
}

static __declspec(__device__) __inline unsigned __reduce_or_sync(unsigned mask, unsigned value) {
  return __reduce_or_sync_unsigned_impl(mask, value);
}

static __declspec(__device__) __inline unsigned __reduce_xor_sync(unsigned mask, unsigned value) {
  return __reduce_xor_sync_unsigned_impl(mask, value);
}
#line 138 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.hpp"

#line 140 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.hpp"



#line 144 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.hpp"




#line 149 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.hpp"
#line 151 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.h"
#line 152 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.h"

#line 154 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.h"




#line 159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt\\sm_80_rt.h"
#line 3301 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"




























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_surface_types.h"






































































































#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"





#line 69 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"




template <typename T> struct __nv_surf_trait {  typedef void * cast_type; };

template<> struct __nv_surf_trait<char> {  typedef char * cast_type; };
template<> struct __nv_surf_trait<signed char> {  typedef signed char * cast_type; };
template<> struct __nv_surf_trait<unsigned char> {  typedef unsigned char * cast_type; };
template<> struct __nv_surf_trait<char1> {  typedef char1 * cast_type; };
template<> struct __nv_surf_trait<uchar1> {  typedef uchar1 * cast_type; };
template<> struct __nv_surf_trait<char2> {  typedef char2 * cast_type; };
template<> struct __nv_surf_trait<uchar2> {  typedef uchar2 * cast_type; };
template<> struct __nv_surf_trait<char4> {  typedef char4 * cast_type; };
template<> struct __nv_surf_trait<uchar4> {  typedef uchar4 * cast_type; };
template<> struct __nv_surf_trait<short> {  typedef short * cast_type; };
template<> struct __nv_surf_trait<unsigned short> {  typedef unsigned short * cast_type; };
template<> struct __nv_surf_trait<short1> {  typedef short1 * cast_type; };
template<> struct __nv_surf_trait<ushort1> {  typedef ushort1 * cast_type; };
template<> struct __nv_surf_trait<short2> {  typedef short2 * cast_type; };
template<> struct __nv_surf_trait<ushort2> {  typedef ushort2 * cast_type; };
template<> struct __nv_surf_trait<short4> {  typedef short4 * cast_type; };
template<> struct __nv_surf_trait<ushort4> {  typedef ushort4 * cast_type; };
template<> struct __nv_surf_trait<int> {  typedef int * cast_type; };
template<> struct __nv_surf_trait<unsigned int> {  typedef unsigned int * cast_type; };
template<> struct __nv_surf_trait<int1> {  typedef int1 * cast_type; };
template<> struct __nv_surf_trait<uint1> {  typedef uint1 * cast_type; };
template<> struct __nv_surf_trait<int2> {  typedef int2 * cast_type; };
template<> struct __nv_surf_trait<uint2> {  typedef uint2 * cast_type; };
template<> struct __nv_surf_trait<int4> {  typedef int4 * cast_type; };
template<> struct __nv_surf_trait<uint4> {  typedef uint4 * cast_type; };
template<> struct __nv_surf_trait<long long> {  typedef long long * cast_type; };
template<> struct __nv_surf_trait<unsigned long long> {  typedef unsigned long long * cast_type; };
template<> struct __nv_surf_trait<longlong1> {  typedef longlong1 * cast_type; };
template<> struct __nv_surf_trait<ulonglong1> {  typedef ulonglong1 * cast_type; };
template<> struct __nv_surf_trait<longlong2> {  typedef longlong2 * cast_type; };
template<> struct __nv_surf_trait<ulonglong2> {  typedef ulonglong2 * cast_type; };

template<> struct __nv_surf_trait<long> {  typedef int * cast_type; };
template<> struct __nv_surf_trait<unsigned long> {  typedef unsigned int * cast_type; };
template<> struct __nv_surf_trait<long1> {  typedef int1 * cast_type; };
template<> struct __nv_surf_trait<ulong1> {  typedef uint1 * cast_type; };
template<> struct __nv_surf_trait<long2> {  typedef int2 * cast_type; };
template<> struct __nv_surf_trait<ulong2> {  typedef uint2 * cast_type; };
template<> struct __nv_surf_trait<long4> {  typedef uint4 * cast_type; };
template<> struct __nv_surf_trait<ulong4> {  typedef int4 * cast_type; };
#line 116 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
template<> struct __nv_surf_trait<float> {  typedef float * cast_type; };
template<> struct __nv_surf_trait<float1> {  typedef float1 * cast_type; };
template<> struct __nv_surf_trait<float2> {  typedef float2 * cast_type; };
template<> struct __nv_surf_trait<float4> {  typedef float4 * cast_type; };
#line 121 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"

template <typename T>
static __declspec(deprecated) __declspec(__device__)  __forceinline void surf1Dread(T *res, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1Dread_v2", (void *)res, s, surf, x, mode);
#line 128 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline  T surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surf1Dread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, mode);
  return temp;
#line 138 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}
  
template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surf1Dread(T *res, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf1Dread<T>(surf, x, mode);
#line 146 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}


template <typename T>
static __declspec(deprecated) __declspec(__device__)  __forceinline void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2Dread_v2", (void *)res, s, surf, x, y, mode);
#line 155 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline  T surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surf2Dread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, y, mode);
  return temp;
#line 165 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf2Dread<T>(surf, x, y, mode);
#line 173 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}


template <typename T>
static __declspec(deprecated) __declspec(__device__)  __forceinline void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf3Dread_v2", (void *)res, s, surf, x, y, z, mode);
#line 182 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline  T surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surf3Dread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, y, z, mode);
  return temp;
#line 192 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf3Dread<T>(surf, x, y, z, mode);
#line 200 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}



template <typename T>
static __declspec(deprecated) __declspec(__device__)  __forceinline void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int  layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1DLayeredread_v2", (void *)res, s, surf, x,  layer, mode);
#line 210 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline  T surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surf1DLayeredread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, layer, mode);
  return temp;
#line 220 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}


template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf1DLayeredread<T>(surf, x, layer, mode);
#line 229 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}


template <typename T>
static __declspec(deprecated) __declspec(__device__)  __forceinline void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x,  int y, int  layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2DLayeredread_v2", (void *)res, s, surf, x, y, layer, mode);
#line 238 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline  T surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surf2DLayeredread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, y, layer, mode);
  return temp;
#line 248 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}


template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf2DLayeredread<T>(surf, x, y, layer, mode);
#line 257 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}


template <typename T>
static __declspec(__device__)  __forceinline void surfCubemapread(T *res, surface<void, 0x0C> surf, int x,  int y, int  face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapread_v2", (void *)res, s, surf, x, y, face, mode);
#line 266 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline  T surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;

  __nv_tex_surf_handler("__surfCubemapread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, y, face, mode);
  return temp;
#line 277 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surfCubemapread<T>(surf, x, y, face, mode);
#line 285 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}


template <typename T>
static __declspec(deprecated) __declspec(__device__)  __forceinline void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x,  int y, int  layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapLayeredread_v2", (void *)res, s, surf, x, y, layerFace, mode);
#line 294 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline  T surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surfCubemapLayeredread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, y, layerFace, mode);
  return temp;
#line 304 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surfCubemapLayeredread<T>(surf, x, y, layerFace, mode);
#line 312 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}


template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surf1Dwrite(T val, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1Dwrite_v2", (void *)&val, s, surf, x, mode);
#line 321 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surf1Dwrite(T val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1Dwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val, (int)sizeof(T), surf, x,  mode);
#line 329 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}



template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2Dwrite_v2", (void *)&val,  s, surf, x, y, mode);
#line 339 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2Dwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val, (int)sizeof(T), surf, x, y,  mode);
#line 347 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}


template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf3Dwrite_v2", (void *)&val,  s, surf, x, y, z,mode);
#line 356 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf3Dwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val, (int)sizeof(T), surf, x, y, z,  mode);
#line 364 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}


template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1DLayeredwrite_v2", (void *)&val,  s, surf, x, layer,mode);
#line 373 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1DLayeredwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val,  (int)sizeof(T), surf, x, layer, mode);
#line 381 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}


template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2DLayeredwrite_v2", (void *)&val, s, surf, x, y, layer,mode);
#line 390 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2DLayeredwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val,  (int)sizeof(T), surf, x, y, layer, mode);
#line 398 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}


template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapwrite_v2", (void *)&val, s, surf, x, y, face, mode);
#line 407 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val, (int)sizeof(T), surf, x, y, face,  mode);
#line 415 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}



template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapLayeredwrite_v2", (void *)&val, s, surf, x, y, layerFace,  mode);
#line 425 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}

template<class T>
static __declspec(deprecated) __declspec(__device__) __forceinline void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapLayeredwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val, (int)sizeof(T), surf, x, y, layerFace,  mode);
#line 433 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
}




#line 439 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
#line 440 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_functions.h"
#line 3302 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"





























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_texture_types.h"












































































































#line 110 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"





#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"


template <typename T>
struct __nv_tex_rmet_ret { };

template<> struct __nv_tex_rmet_ret<char> { typedef char type; };
template<> struct __nv_tex_rmet_ret<signed char> { typedef signed char type; };
template<> struct __nv_tex_rmet_ret<unsigned char> { typedef unsigned char type; };
template<> struct __nv_tex_rmet_ret<char1> { typedef char1 type; };
template<> struct __nv_tex_rmet_ret<uchar1> { typedef uchar1 type; };
template<> struct __nv_tex_rmet_ret<char2> { typedef char2 type; };
template<> struct __nv_tex_rmet_ret<uchar2> { typedef uchar2 type; };
template<> struct __nv_tex_rmet_ret<char4> { typedef char4 type; };
template<> struct __nv_tex_rmet_ret<uchar4> { typedef uchar4 type; };

template<> struct __nv_tex_rmet_ret<short> { typedef short type; };
template<> struct __nv_tex_rmet_ret<unsigned short> { typedef unsigned short type; };
template<> struct __nv_tex_rmet_ret<short1> { typedef short1 type; };
template<> struct __nv_tex_rmet_ret<ushort1> { typedef ushort1 type; };
template<> struct __nv_tex_rmet_ret<short2> { typedef short2 type; };
template<> struct __nv_tex_rmet_ret<ushort2> { typedef ushort2 type; };
template<> struct __nv_tex_rmet_ret<short4> { typedef short4 type; };
template<> struct __nv_tex_rmet_ret<ushort4> { typedef ushort4 type; };

template<> struct __nv_tex_rmet_ret<int> { typedef int type; };
template<> struct __nv_tex_rmet_ret<unsigned int> { typedef unsigned int type; };
template<> struct __nv_tex_rmet_ret<int1> { typedef int1 type; };
template<> struct __nv_tex_rmet_ret<uint1> { typedef uint1 type; };
template<> struct __nv_tex_rmet_ret<int2> { typedef int2 type; };
template<> struct __nv_tex_rmet_ret<uint2> { typedef uint2 type; };
template<> struct __nv_tex_rmet_ret<int4> { typedef int4 type; };
template<> struct __nv_tex_rmet_ret<uint4> { typedef uint4 type; };


template<> struct __nv_tex_rmet_ret<long> { typedef long type; };
template<> struct __nv_tex_rmet_ret<unsigned long> { typedef unsigned long type; };
template<> struct __nv_tex_rmet_ret<long1> { typedef long1 type; };
template<> struct __nv_tex_rmet_ret<ulong1> { typedef ulong1 type; };
template<> struct __nv_tex_rmet_ret<long2> { typedef long2 type; };
template<> struct __nv_tex_rmet_ret<ulong2> { typedef ulong2 type; };
template<> struct __nv_tex_rmet_ret<long4> { typedef long4 type; };
template<> struct __nv_tex_rmet_ret<ulong4> { typedef ulong4 type; };
#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret<float> { typedef float type; };
template<> struct __nv_tex_rmet_ret<float1> { typedef float1 type; };
template<> struct __nv_tex_rmet_ret<float2> { typedef float2 type; };
template<> struct __nv_tex_rmet_ret<float4> { typedef float4 type; };


template <typename T> struct __nv_tex_rmet_cast { typedef T* type;  };

template<> struct __nv_tex_rmet_cast<long> { typedef int *type; };
template<> struct __nv_tex_rmet_cast<unsigned long> { typedef unsigned int *type; };
template<> struct __nv_tex_rmet_cast<long1> { typedef int1 *type; };
template<> struct __nv_tex_rmet_cast<ulong1> { typedef uint1 *type; };
template<> struct __nv_tex_rmet_cast<long2> { typedef int2 *type; };
template<> struct __nv_tex_rmet_cast<ulong2> { typedef uint2 *type; };
template<> struct __nv_tex_rmet_cast<long4> { typedef int4 *type; };
template<> struct __nv_tex_rmet_cast<ulong4> { typedef uint4 *type; };
#line 130 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__)  typename __nv_tex_rmet_ret<T>::type tex1Dfetch(texture<T, 0x01, cudaReadModeElementType> t, int x)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1Dfetch_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x);
  return temp;
#line 139 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
struct __nv_tex_rmnf_ret { };

template <> struct __nv_tex_rmnf_ret<char> { typedef float type; };
template <> struct __nv_tex_rmnf_ret<signed char> { typedef float type; };
template <> struct __nv_tex_rmnf_ret<unsigned char> { typedef float type; };
template <> struct __nv_tex_rmnf_ret<short> { typedef float type; };
template <> struct __nv_tex_rmnf_ret<unsigned short> { typedef float type; };
template <> struct __nv_tex_rmnf_ret<char1> { typedef float1 type; };
template <> struct __nv_tex_rmnf_ret<uchar1> { typedef float1 type; };
template <> struct __nv_tex_rmnf_ret<short1> { typedef float1 type; };
template <> struct __nv_tex_rmnf_ret<ushort1> { typedef float1 type; };
template <> struct __nv_tex_rmnf_ret<char2> { typedef float2 type; };
template <> struct __nv_tex_rmnf_ret<uchar2> { typedef float2 type; };
template <> struct __nv_tex_rmnf_ret<short2> { typedef float2 type; };
template <> struct __nv_tex_rmnf_ret<ushort2> { typedef float2 type; };
template <> struct __nv_tex_rmnf_ret<char4> { typedef float4 type; };
template <> struct __nv_tex_rmnf_ret<uchar4> { typedef float4 type; };
template <> struct __nv_tex_rmnf_ret<short4> { typedef float4 type; };
template <> struct __nv_tex_rmnf_ret<ushort4> { typedef float4 type; };

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex1Dfetch(texture<T, 0x01, cudaReadModeNormalizedFloat> t, int x) 
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1Dfetch_rmnf_v2", &type_dummy, &retval, t, x);
  return retval;
#line 171 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}


template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex1D(texture<T, 0x01, cudaReadModeElementType> t, float x)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1D_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x);
  return temp;
#line 182 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex1D(texture<T, 0x01, cudaReadModeNormalizedFloat> t, float x)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1D_rmnf_v2", &type_dummy, &retval, t, x);
  return retval;
#line 193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}



template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex2D(texture<T, 0x02, cudaReadModeElementType> t, float x, float y)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;

  __nv_tex_surf_handler("__tex2D_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x, y);
  return temp;
#line 206 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex2D(texture<T, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2D_rmnf_v2", &type_dummy, &retval, t, x, y);
  return retval;
#line 217 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}



template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex1DLayered(texture<T, 0xF1, cudaReadModeElementType> t, float x, int layer)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1DLayered_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x, layer);
  return temp;
#line 229 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex1DLayered(texture<T, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1DLayered_rmnf_v2", &type_dummy, &retval, t, x, layer);
  return retval;
#line 240 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}



template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex2DLayered(texture<T, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex2DLayered_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x, y, layer);
  return temp;
#line 252 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex2DLayered(texture<T, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2DLayered_rmnf_v2", &type_dummy, &retval, t, x, y, layer);
  return retval;
#line 263 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}


template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex3D(texture<T, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex3D_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x, y, z);
  return temp;
#line 274 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex3D(texture<T, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex3D_rmnf_v2", &type_dummy, &retval, t, x, y, z);
  return retval;
#line 285 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}


template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type texCubemap(texture<T, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemap_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x, y, z);
  return temp;
#line 296 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type texCubemap(texture<T, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemap_rmnf_v2", &type_dummy, &retval, t, x, y, z);
  return retval;
#line 307 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}


template <typename T>
struct __nv_tex2dgather_ret { };
template <> struct __nv_tex2dgather_ret<char> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<signed char> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<char1> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<char2> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<char3> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<char4> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<unsigned char> { typedef uchar4 type; };
template <> struct __nv_tex2dgather_ret<uchar1> { typedef uchar4 type; };
template <> struct __nv_tex2dgather_ret<uchar2> { typedef uchar4 type; };
template <> struct __nv_tex2dgather_ret<uchar3> { typedef uchar4 type; };
template <> struct __nv_tex2dgather_ret<uchar4> { typedef uchar4 type; };

template <> struct __nv_tex2dgather_ret<short> { typedef short4 type; };
template <> struct __nv_tex2dgather_ret<short1> { typedef short4 type; };
template <> struct __nv_tex2dgather_ret<short2> { typedef short4 type; };
template <> struct __nv_tex2dgather_ret<short3> { typedef short4 type; };
template <> struct __nv_tex2dgather_ret<short4> { typedef short4 type; };
template <> struct __nv_tex2dgather_ret<unsigned short> { typedef ushort4 type; };
template <> struct __nv_tex2dgather_ret<ushort1> { typedef ushort4 type; };
template <> struct __nv_tex2dgather_ret<ushort2> { typedef ushort4 type; };
template <> struct __nv_tex2dgather_ret<ushort3> { typedef ushort4 type; };
template <> struct __nv_tex2dgather_ret<ushort4> { typedef ushort4 type; };

template <> struct __nv_tex2dgather_ret<int> { typedef int4 type; };
template <> struct __nv_tex2dgather_ret<int1> { typedef int4 type; };
template <> struct __nv_tex2dgather_ret<int2> { typedef int4 type; };
template <> struct __nv_tex2dgather_ret<int3> { typedef int4 type; };
template <> struct __nv_tex2dgather_ret<int4> { typedef int4 type; };
template <> struct __nv_tex2dgather_ret<unsigned int> { typedef uint4 type; };
template <> struct __nv_tex2dgather_ret<uint1> { typedef uint4 type; };
template <> struct __nv_tex2dgather_ret<uint2> { typedef uint4 type; };
template <> struct __nv_tex2dgather_ret<uint3> { typedef uint4 type; };
template <> struct __nv_tex2dgather_ret<uint4> { typedef uint4 type; };

template <> struct __nv_tex2dgather_ret<float> { typedef float4 type; };
template <> struct __nv_tex2dgather_ret<float1> { typedef float4 type; };
template <> struct __nv_tex2dgather_ret<float2> { typedef float4 type; };
template <> struct __nv_tex2dgather_ret<float3> { typedef float4 type; };
template <> struct __nv_tex2dgather_ret<float4> { typedef float4 type; };

template <typename T>
static __declspec(__device__) __forceinline typename __nv_tex2dgather_ret<T>::type tex2Dgather(texture<T, 0x02, cudaReadModeElementType> t, float x, float y, int comp=0)
{ 

  T type_dummy;
  typename __nv_tex2dgather_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2Dgather_v2", &type_dummy, &retval, t, x, y, comp);
  return retval;
#line 361 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}


template<typename T> struct __nv_tex2dgather_rmnf_ret { };
template<> struct __nv_tex2dgather_rmnf_ret<char> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<signed char> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<unsigned char> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<char1> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<uchar1> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<char2> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<uchar2> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<char3> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<uchar3> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<char4> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<uchar4> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<signed short> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<unsigned short> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<short1> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<ushort1> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<short2> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<ushort2> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<short3> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<ushort3> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<short4> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<ushort4> { typedef float4 type; };

template <typename T>
static __declspec(__device__) __forceinline  typename __nv_tex2dgather_rmnf_ret<T>::type tex2Dgather(texture<T, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{  

  T type_dummy;
  typename __nv_tex2dgather_rmnf_ret<T>::type  retval;
  __nv_tex_surf_handler("__tex2Dgather_rmnf_v2", &type_dummy, &retval, t, x, y, comp);
  return retval;
#line 396 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}



template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex1DLod(texture<T, 0x01, cudaReadModeElementType> t, float x, float level)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1DLod_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, level);
  return temp;
#line 408 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex1DLod(texture<T, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1DLod_rmnf_v2", &type_dummy, &retval, t, x, level);
  return retval;
#line 419 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}


template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex2DLod(texture<T, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex2DLod_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, level);
  return temp;
#line 430 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex2DLod(texture<T, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2DLod_rmnf_v2", &type_dummy, &retval, t, x, y, level);
  return retval;
#line 441 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}


template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex1DLayeredLod(texture<T, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1DLayeredLod_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, layer, level);
  return temp;
#line 452 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex1DLayeredLod(texture<T, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1DLayeredLod_rmnf_v2", &type_dummy, &retval, t, x, layer, level);
  return retval;
#line 463 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}


template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex2DLayeredLod(texture<T, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex2DLayeredLod_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, layer, level);
  return temp;
#line 474 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex2DLayeredLod(texture<T, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2DLayeredLod_rmnf_v2", &type_dummy, &retval, t, x, y, layer, level);
  return retval;
#line 485 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}


template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex3DLod(texture<T, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex3DLod_v2",(typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, level);
  return temp;
#line 496 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex3DLod(texture<T, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex3DLod_rmnf_v2", &type_dummy, &retval, t, x, y, z, level);
  return retval;
#line 507 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}


template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type texCubemapLod(texture<T, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemapLod_v2",(typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, level);
  return temp;
#line 518 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type texCubemapLod(texture<T, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemapLod_rmnf_v2", &type_dummy, &retval, t, x, y, z, level);
  return retval;
#line 529 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}



template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type texCubemapLayered(texture<T, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemapLayered_v2",(typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, layer);
  return temp;
#line 541 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type texCubemapLayered(texture<T, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemapLayered_rmnf_v2", &type_dummy, &retval, t, x, y, z, layer);
  return retval;
#line 552 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}



template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type texCubemapLayeredLod(texture<T, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemapLayeredLod_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, layer, level);
  return temp;
#line 564 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type texCubemapLayeredLod(texture<T, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemapLayeredLod_rmnf_v2", &type_dummy, &retval, t, x, y, z, layer, level);
  return retval;
#line 575 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}



template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type texCubemapGrad(texture<T, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemapGrad_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, &dPdx, &dPdy);
  return temp;
#line 587 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type texCubemapGrad(texture<T, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemapGrad_rmnf_v2", &type_dummy, &retval, t,  x, y, z, &dPdx, &dPdy);
  return retval;
#line 598 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}



template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type texCubemapLayeredGrad(texture<T, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemapLayeredGrad_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, layer, &dPdx, &dPdy);
  return temp;
#line 610 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type texCubemapLayeredGrad(texture<T, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemapLayeredGrad_rmnf_v2", &type_dummy, &retval,t, x, y, z, layer, &dPdx, &dPdy);
  return retval;
#line 621 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}



template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex1DGrad(texture<T, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1DGrad_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, dPdx, dPdy);
  return temp;
#line 633 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex1DGrad(texture<T, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1DGrad_rmnf_v2", &type_dummy, &retval,t, x,dPdx, dPdy);
  return retval;
#line 644 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}



template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex2DGrad(texture<T, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex2DGrad_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, &dPdx, &dPdy);
  return temp;
#line 656 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex2DGrad(texture<T, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2DGrad_rmnf_v2", &type_dummy, &retval,t, x, y, &dPdx, &dPdy);
  return retval;
#line 667 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}


template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex1DLayeredGrad(texture<T, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1DLayeredGrad_v2",(typename __nv_tex_rmet_cast<T>::type)&temp, t, x, layer, dPdx, dPdy);
  return temp;
#line 678 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex1DLayeredGrad(texture<T, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1DLayeredGrad_rmnf_v2", &type_dummy, &retval,t, x, layer, dPdx, dPdy);
  return retval;
#line 689 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}


template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex2DLayeredGrad(texture<T, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex2DLayeredGrad_v2",(typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, layer, &dPdx, &dPdy);
  return temp;
#line 700 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex2DLayeredGrad(texture<T, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2DLayeredGrad_rmnf_v2", &type_dummy, &retval,t, x, y, layer, &dPdx, &dPdy);
  return retval;
#line 711 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}


template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmet_ret<T>::type tex3DGrad(texture<T, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{ 

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex3DGrad_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, &dPdx, &dPdy);
  return temp;
#line 722 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}

template <typename T>
static __declspec(deprecated) __forceinline __declspec(__device__) typename __nv_tex_rmnf_ret<T>::type tex3DGrad(texture<T, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{ 

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex3DGrad_rmnf_v2", &type_dummy, &retval,t, x, y, z, &dPdx, &dPdy);
  return retval;
#line 733 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
}



#line 738 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"

#line 740 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_fetch_functions.h"
#line 3303 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"




#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"

template <typename T> struct __nv_itex_trait {   };
template<> struct __nv_itex_trait<char> { typedef void type; };
template<> struct __nv_itex_trait<signed char> { typedef void type; };
template<> struct __nv_itex_trait<char1> { typedef void type; };
template<> struct __nv_itex_trait<char2> { typedef void type; };
template<> struct __nv_itex_trait<char4> { typedef void type; };
template<> struct __nv_itex_trait<unsigned char> { typedef void type; };
template<> struct __nv_itex_trait<uchar1> { typedef void type; };
template<> struct __nv_itex_trait<uchar2> { typedef void type; };
template<> struct __nv_itex_trait<uchar4> { typedef void type; };
template<> struct __nv_itex_trait<short> { typedef void type; };
template<> struct __nv_itex_trait<short1> { typedef void type; };
template<> struct __nv_itex_trait<short2> { typedef void type; };
template<> struct __nv_itex_trait<short4> { typedef void type; };
template<> struct __nv_itex_trait<unsigned short> { typedef void type; };
template<> struct __nv_itex_trait<ushort1> { typedef void type; };
template<> struct __nv_itex_trait<ushort2> { typedef void type; };
template<> struct __nv_itex_trait<ushort4> { typedef void type; };
template<> struct __nv_itex_trait<int> { typedef void type; };
template<> struct __nv_itex_trait<int1> { typedef void type; };
template<> struct __nv_itex_trait<int2> { typedef void type; };
template<> struct __nv_itex_trait<int4> { typedef void type; };
template<> struct __nv_itex_trait<unsigned int> { typedef void type; };
template<> struct __nv_itex_trait<uint1> { typedef void type; };
template<> struct __nv_itex_trait<uint2> { typedef void type; };
template<> struct __nv_itex_trait<uint4> { typedef void type; };

template<> struct __nv_itex_trait<long> { typedef void type; };
template<> struct __nv_itex_trait<long1> { typedef void type; };
template<> struct __nv_itex_trait<long2> { typedef void type; };
template<> struct __nv_itex_trait<long4> { typedef void type; };
template<> struct __nv_itex_trait<unsigned long> { typedef void type; };
template<> struct __nv_itex_trait<ulong1> { typedef void type; };
template<> struct __nv_itex_trait<ulong2> { typedef void type; };
template<> struct __nv_itex_trait<ulong4> { typedef void type; };
#line 100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait<float> { typedef void type; };
template<> struct __nv_itex_trait<float1> { typedef void type; };
template<> struct __nv_itex_trait<float2> { typedef void type; };
template<> struct __nv_itex_trait<float4> { typedef void type; };



template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1Dfetch(T *ptr, cudaTextureObject_t obj, int x)
{

   __nv_tex_surf_handler("__itex1Dfetch", ptr, obj, x);
#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__) T tex1Dfetch(cudaTextureObject_t texObject, int x)
{

  T ret;
  tex1Dfetch(&ret, texObject, x);
  return ret;
#line 123 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1D(T *ptr, cudaTextureObject_t obj, float x)
{

   __nv_tex_surf_handler("__itex1D", ptr, obj, x);
#line 131 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <class T>
static __declspec(__device__)  T tex1D(cudaTextureObject_t texObject, float x)
{

  T ret;
  tex1D(&ret, texObject, x);
  return ret;
#line 142 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2D(T *ptr, cudaTextureObject_t obj, float x, float y)
{

   __nv_tex_surf_handler("__itex2D", ptr, obj, x, y);
#line 151 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2D(cudaTextureObject_t texObject, float x, float y)
{

  T ret;
  tex2D(&ret, texObject, x, y);
  return ret;
#line 161 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2D(T *ptr, cudaTextureObject_t obj, float x, float y, 
                                                          bool* isResident)
{

  unsigned char res;
   __nv_tex_surf_handler("__itex2D_sparse", ptr, obj, x, y, &res);
   *isResident = (res != 0);
#line 173 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2D(cudaTextureObject_t texObject, float x, float y, bool* isResident)
{

  T ret;
  tex2D(&ret, texObject, x, y, isResident);
  return ret;
#line 183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

#line 186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z)
{

   __nv_tex_surf_handler("__itex3D", ptr, obj, x, y, z);
#line 194 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex3D(cudaTextureObject_t texObject, float x, float y, float z)
{

  T ret;
  tex3D(&ret, texObject, x, y, z);
  return ret;
#line 204 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z, 
                                                          bool* isResident)
{

  unsigned char res;
   __nv_tex_surf_handler("__itex3D_sparse", ptr, obj, x, y, z, &res);
   *isResident = (res != 0);
#line 216 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex3D(cudaTextureObject_t texObject, float x, float y, float z, bool* isResident)
{

  T ret;
  tex3D(&ret, texObject, x, y, z, isResident);
  return ret;
#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}
#line 228 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1DLayered(T *ptr, cudaTextureObject_t obj, float x, int layer)
{

   __nv_tex_surf_handler("__itex1DLayered", ptr, obj, x, layer);
#line 236 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex1DLayered(cudaTextureObject_t texObject, float x, int layer)
{

  T ret;
  tex1DLayered(&ret, texObject, x, layer);
  return ret;
#line 246 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer)
{

  __nv_tex_surf_handler("__itex2DLayered", ptr, obj, x, y, layer);
#line 254 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer)
{

  T ret;
  tex2DLayered(&ret, texObject, x, y, layer);
  return ret;
#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, bool* isResident)
{

  unsigned char res;
  __nv_tex_surf_handler("__itex2DLayered_sparse", ptr, obj, x, y, layer, &res);
  *isResident = (res != 0);
#line 275 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer, bool* isResident)
{

  T ret;
  tex2DLayered(&ret, texObject, x, y, layer, isResident);
  return ret;
#line 285 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}
#line 287 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemap(T *ptr, cudaTextureObject_t obj, float x, float y, float z)
{

  __nv_tex_surf_handler("__itexCubemap", ptr, obj, x, y, z);
#line 295 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <class T>
static __declspec(__device__)  T texCubemap(cudaTextureObject_t texObject, float x, float y, float z)
{

  T ret;
  texCubemap(&ret, texObject, x, y, z);
  return ret;
#line 306 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemapLayered(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer)
{ 

  __nv_tex_surf_handler("__itexCubemapLayered", ptr, obj, x, y, z, layer);
#line 315 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer)
{

  T ret;
  texCubemapLayered(&ret, texObject, x, y, z, layer);
  return ret;
#line 325 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, int comp = 0)
{

  __nv_tex_surf_handler("__itex2Dgather", ptr, obj, x, y, comp);
#line 333 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0)
{

  T ret;
  tex2Dgather(&ret, to, x, y, comp);
  return ret;
#line 343 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, bool* isResident, int comp = 0)
{

  unsigned char res;
  __nv_tex_surf_handler("__itex2Dgather_sparse", ptr, obj, x, y, comp,  &res);
  *isResident = (res != 0);
#line 354 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2Dgather(cudaTextureObject_t to, float x, float y, bool* isResident, int comp = 0)
{

  T ret;
  tex2Dgather(&ret, to, x, y,  isResident, comp);
  return ret;
#line 364 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

#line 367 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1DLod(T *ptr, cudaTextureObject_t obj, float x, float level)
{

  __nv_tex_surf_handler("__itex1DLod", ptr, obj, x, level);
#line 374 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex1DLod(cudaTextureObject_t texObject, float x, float level)
{

  T ret;
  tex1DLod(&ret, texObject, x, level);
  return ret;
#line 384 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level)
{

  __nv_tex_surf_handler("__itex2DLod", ptr, obj, x, y, level);
#line 393 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2DLod(cudaTextureObject_t texObject, float x, float y, float level)
{

  T ret;
  tex2DLod(&ret, texObject, x, y, level);
  return ret;
#line 403 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}



template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level, bool* isResident)
{

  unsigned char res;
  __nv_tex_surf_handler("__itex2DLod_sparse", ptr, obj, x, y, level, &res);
  *isResident = (res != 0);
#line 415 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2DLod(cudaTextureObject_t texObject, float x, float y, float level, bool* isResident)
{

  T ret;
  tex2DLod(&ret, texObject, x, y, level, isResident);
  return ret;
#line 425 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

#line 428 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level)
{ 

  __nv_tex_surf_handler("__itex3DLod", ptr, obj, x, y, z, level);
#line 436 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{

  T ret;
  tex3DLod(&ret, texObject, x, y, z, level);
  return ret;
#line 446 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level, bool* isResident)
{ 

  unsigned char res;
  __nv_tex_surf_handler("__itex3DLod_sparse", ptr, obj, x, y, z, level, &res);
  *isResident = (res != 0);
#line 457 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level, bool* isResident)
{

  T ret;
  tex3DLod(&ret, texObject, x, y, z, level, isResident);
  return ret;
#line 467 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

#line 470 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, int layer, float level)
{ 

  __nv_tex_surf_handler("__itex1DLayeredLod", ptr, obj, x, layer, level);
#line 478 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level)
{

  T ret;
  tex1DLayeredLod(&ret, texObject, x, layer, level);
  return ret;
#line 488 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level)
{ 

  __nv_tex_surf_handler("__itex2DLayeredLod", ptr, obj, x, y, layer, level);
#line 497 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level)
{

  T ret;
  tex2DLayeredLod(&ret, texObject, x, y, layer, level);
  return ret;
#line 507 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level, bool* isResident)
{ 

  unsigned char res;
  __nv_tex_surf_handler("__itex2DLayeredLod_sparse", ptr, obj, x, y, layer, level, &res);
  *isResident = (res != 0);
#line 518 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level, bool* isResident)
{

  T ret;
  tex2DLayeredLod(&ret, texObject, x, y, layer, level, isResident);
  return ret;
#line 528 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}
#line 530 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemapLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level)
{ 

  __nv_tex_surf_handler("__itexCubemapLod", ptr, obj, x, y, z, level);
#line 537 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{

  T ret;
  texCubemapLod(&ret, texObject, x, y, z, level);
  return ret;
#line 547 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemapGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy)
{ 

  __nv_tex_surf_handler("__itexCubemapGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy);
#line 556 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T texCubemapGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{

  T ret;
  texCubemapGrad(&ret, texObject, x, y, z, dPdx, dPdy);
  return ret;
#line 566 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemapLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float level)
{ 

  __nv_tex_surf_handler("__itexCubemapLayeredLod", ptr, obj, x, y, z, layer, level);
#line 574 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{

  T ret;
  texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level);
  return ret;
#line 584 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1DGrad(T *ptr, cudaTextureObject_t obj, float x, float dPdx, float dPdy)
{

  __nv_tex_surf_handler("__itex1DGrad", ptr, obj, x, dPdx, dPdy);
#line 592 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{

  T ret;
  tex1DGrad(&ret, texObject, x, dPdx, dPdy);
  return ret;
#line 602 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy)
{ 

  __nv_tex_surf_handler("__itex2DGrad_v2", ptr, obj, x, y, &dPdx, &dPdy);
#line 611 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"

}

template <class T>
static __declspec(__device__)  T tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{

  T ret;
  tex2DGrad(&ret, texObject, x, y, dPdx, dPdy);
  return ret;
#line 622 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy, bool* isResident)
{ 

  unsigned char res;
  __nv_tex_surf_handler("__itex2DGrad_sparse", ptr, obj, x, y, &dPdx, &dPdy, &res);
  *isResident = (res != 0);
#line 633 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"

}

template <class T>
static __declspec(__device__)  T tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy, bool* isResident)
{

  T ret;
  tex2DGrad(&ret, texObject, x, y, dPdx, dPdy, isResident);
  return ret;
#line 644 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}
#line 646 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy)
{ 

  __nv_tex_surf_handler("__itex3DGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy);
#line 654 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{

  T ret;
  tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy);
  return ret;
#line 664 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy, bool* isResident)
{ 

  unsigned char res;
  __nv_tex_surf_handler("__itex3DGrad_sparse", ptr, obj, x, y, z, &dPdx, &dPdy, &res);
  *isResident = (res != 0);
#line 675 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy, bool* isResident)
{

  T ret;
  tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy, isResident);
  return ret;
#line 685 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

#line 688 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy)
{ 

  __nv_tex_surf_handler("__itex1DLayeredGrad", ptr, obj, x, layer, dPdx, dPdy);
#line 696 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{

  T ret;
  tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy);
  return ret;
#line 706 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLayeredGrad(T * ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy)
{ 

  __nv_tex_surf_handler("__itex2DLayeredGrad_v2", ptr, obj, x, y, layer, &dPdx, &dPdy);
#line 715 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{

  T ret;
  tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy);
  return ret;
#line 725 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLayeredGrad(T * ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy, bool* isResident)
{ 

  unsigned char res;
  __nv_tex_surf_handler("__itex2DLayeredGrad_sparse", ptr, obj, x, y, layer, &dPdx, &dPdy, &res);
  *isResident = (res != 0);
#line 736 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy, bool* isResident)
{

  T ret;
  tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy, isResident);
  return ret;
#line 746 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}
#line 748 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemapLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float4 dPdx, float4 dPdy)
{

  __nv_tex_surf_handler("__itexCubemapLayeredGrad_v2", ptr, obj, x, y, z, layer, &dPdx, &dPdy);
#line 756 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}

template <class T>
static __declspec(__device__)  T texCubemapLayeredGrad(cudaTextureObject_t texObject, float x, float y, float z, int layer, float4 dPdx, float4 dPdy)
{

  T ret;
  texCubemapLayeredGrad(&ret, texObject, x, y, z, layer, dPdx, dPdy);
  return ret;
#line 766 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
}



#line 771 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
#line 772 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\texture_indirect_functions.h"
#line 3304 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\cuda_runtime_api.h"
#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"

template<typename T> struct __nv_isurf_trait { };
template<> struct __nv_isurf_trait<char> { typedef void type; };
template<> struct __nv_isurf_trait<signed char> { typedef void type; };
template<> struct __nv_isurf_trait<char1> { typedef void type; };
template<> struct __nv_isurf_trait<unsigned char> { typedef void type; };
template<> struct __nv_isurf_trait<uchar1> { typedef void type; };
template<> struct __nv_isurf_trait<short> { typedef void type; };
template<> struct __nv_isurf_trait<short1> { typedef void type; };
template<> struct __nv_isurf_trait<unsigned short> { typedef void type; };
template<> struct __nv_isurf_trait<ushort1> { typedef void type; };
template<> struct __nv_isurf_trait<int> { typedef void type; };
template<> struct __nv_isurf_trait<int1> { typedef void type; };
template<> struct __nv_isurf_trait<unsigned int> { typedef void type; };
template<> struct __nv_isurf_trait<uint1> { typedef void type; };
template<> struct __nv_isurf_trait<long long> { typedef void type; };
template<> struct __nv_isurf_trait<longlong1> { typedef void type; };
template<> struct __nv_isurf_trait<unsigned long long> { typedef void type; };
template<> struct __nv_isurf_trait<ulonglong1> { typedef void type; };
template<> struct __nv_isurf_trait<float> { typedef void type; };
template<> struct __nv_isurf_trait<float1> { typedef void type; };

template<> struct __nv_isurf_trait<char2> { typedef void type; };
template<> struct __nv_isurf_trait<uchar2> { typedef void type; };
template<> struct __nv_isurf_trait<short2> { typedef void type; };
template<> struct __nv_isurf_trait<ushort2> { typedef void type; };
template<> struct __nv_isurf_trait<int2> { typedef void type; };
template<> struct __nv_isurf_trait<uint2> { typedef void type; };
template<> struct __nv_isurf_trait<longlong2> { typedef void type; };
template<> struct __nv_isurf_trait<ulonglong2> { typedef void type; };
template<> struct __nv_isurf_trait<float2> { typedef void type; };

template<> struct __nv_isurf_trait<char4> { typedef void type; };
template<> struct __nv_isurf_trait<uchar4> { typedef void type; };
template<> struct __nv_isurf_trait<short4> { typedef void type; };
template<> struct __nv_isurf_trait<ushort4> { typedef void type; };
template<> struct __nv_isurf_trait<int4> { typedef void type; };
template<> struct __nv_isurf_trait<uint4> { typedef void type; };
template<> struct __nv_isurf_trait<float4> { typedef void type; };


template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type  surf1Dread(T *ptr, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf1Dread", ptr, obj, x, mode);
#line 105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <class T>
static __declspec(__device__) T surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf1Dread(&ret, surfObject, x, boundaryMode);
   return ret;
#line 115 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type  surf2Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf2Dread", ptr, obj, x, y, mode);
#line 123 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <class T>
static __declspec(__device__) T surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf2Dread(&ret, surfObject, x, y, boundaryMode);
   return ret;
#line 133 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}


template <typename T>
static __declspec(__device__) typename  __nv_isurf_trait<T>::type  surf3Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf3Dread", ptr, obj, x, y, z, mode);
#line 142 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <class T>
static __declspec(__device__) T surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf3Dread(&ret, surfObject, x, y, z, boundaryMode);
   return ret;
#line 152 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename  __nv_isurf_trait<T>::type  surf1DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf1DLayeredread", ptr, obj, x, layer, mode);
#line 160 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <class T>
static __declspec(__device__) T surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode);
   return ret;
#line 170 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__)  typename __nv_isurf_trait<T>::type  surf2DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf2DLayeredread", ptr, obj, x, y, layer, mode);
#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <class T>
static __declspec(__device__) T surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode);
   return ret;
#line 188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type  surfCubemapread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurfCubemapread", ptr, obj, x, y, face, mode);
#line 196 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <class T>
static __declspec(__device__) T surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surfCubemapread(&ret, surfObject, x, y, face, boundaryMode);
   return ret;
#line 206 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__)  typename __nv_isurf_trait<T>::type  surfCubemapLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurfCubemapLayeredread", ptr, obj, x, y, layerface, mode);
#line 214 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <class T>
static __declspec(__device__) T surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surfCubemapLayeredread(&ret, surfObject, x, y, layerface, boundaryMode);
   return ret;
#line 224 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surf1Dwrite(T val, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{ 

  __nv_tex_surf_handler("__isurf1Dwrite_v2", &val, obj, x, mode);
#line 232 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surf2Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf2Dwrite_v2", &val, obj, x, y, mode);
#line 240 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surf3Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf3Dwrite_v2", &val, obj, x, y, z, mode);
#line 248 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surf1DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf1DLayeredwrite_v2", &val, obj, x, layer, mode);
#line 256 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surf2DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf2DLayeredwrite_v2", &val, obj, x, y, layer, mode);
#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surfCubemapwrite(T val, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurfCubemapwrite_v2", &val, obj, x, y, face, mode);
#line 272 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surfCubemapLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurfCubemapLayeredwrite_v2", &val, obj, x, y, layerface, mode);
#line 280 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"
}

#line 283 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"

#line 285 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\surface_indirect_functions.h"


#line 3305 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"


extern "C" __declspec(__host__) __declspec(__device__)  unsigned __stdcall __cudaPushCallConfiguration(dim3 gridDim,
                                      dim3 blockDim, 
                                      size_t sharedMem = 0, 
                                      struct CUstream_st *stream = 0);
#line 3312 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"

#line 3314 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"




#line 3319 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\crt/device_functions.h"
#line 119 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_launch_parameters.h"




















































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\vector_types.h"
#line 54 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_launch_parameters.h"






#line 61 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_launch_parameters.h"


#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_launch_parameters.h"

#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_launch_parameters.h"


extern "C" {
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_launch_parameters.h"

uint3 __declspec(__device_builtin__) extern const threadIdx;
uint3 __declspec(__device_builtin__) extern const blockIdx;
dim3 __declspec(__device_builtin__) extern const blockDim;
dim3 __declspec(__device_builtin__) extern const gridDim;
int __declspec(__device_builtin__) extern const warpSize;




}
#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_launch_parameters.h"






#line 89 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_launch_parameters.h"






#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_launch_parameters.h"






#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_launch_parameters.h"






#line 110 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_launch_parameters.h"






#line 117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_launch_parameters.h"

#line 119 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\include\\device_launch_parameters.h"
#line 120 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"





#line 126 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"


#line 129 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"

#line 131 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"




#line 136 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"





#line 142 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"



























































template<class T>
static __inline __declspec(__host__) cudaError_t cudaLaunchKernel(
  const T *func,
  dim3 gridDim,
  dim3 blockDim,
  void **args,
  size_t sharedMem = 0,
  cudaStream_t stream = 0
)
{
    return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream);
}


















































template<class T>
static __inline __declspec(__host__) cudaError_t cudaLaunchCooperativeKernel(
  const T *func,
  dim3 gridDim,
  dim3 blockDim,
  void **args,
  size_t sharedMem = 0,
  cudaStream_t stream = 0
)
{
    return ::cudaLaunchCooperativeKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream);
}
































static __inline __declspec(__host__) cudaError_t cudaEventCreate(
  cudaEvent_t  *event,
  unsigned int  flags
)
{
  return ::cudaEventCreateWithFlags(event, flags);
}


























































static __inline __declspec(__host__) cudaError_t cudaMallocHost(
  void         **ptr,
  size_t         size,
  unsigned int   flags
)
{
  return ::cudaHostAlloc(ptr, size, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaHostAlloc(
  T            **ptr,
  size_t         size,
  unsigned int   flags
)
{
  return ::cudaHostAlloc((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaHostGetDevicePointer(
  T            **pDevice,
  void          *pHost,
  unsigned int   flags
)
{
  return ::cudaHostGetDevicePointer((void**)(void*)pDevice, pHost, flags);
}





































































































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocManaged(
  T            **devPtr,
  size_t         size,
  unsigned int   flags = 0x01
)
{
  return ::cudaMallocManaged((void**)(void*)devPtr, size, flags);
}

















































































template<class T>
static __inline __declspec(__host__) cudaError_t cudaStreamAttachMemAsync(
  cudaStream_t   stream,
  T              *devPtr,
  size_t         length = 0,
  unsigned int   flags  = 0x04
)
{
  return ::cudaStreamAttachMemAsync(stream, (void*)devPtr, length, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMalloc(
  T      **devPtr,
  size_t   size
)
{
  return ::cudaMalloc((void**)(void*)devPtr, size);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocHost(
  T            **ptr,
  size_t         size,
  unsigned int   flags = 0
)
{
  return cudaMallocHost((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocPitch(
  T      **devPtr,
  size_t  *pitch,
  size_t   width,
  size_t   height
)
{
  return ::cudaMallocPitch((void**)(void*)devPtr, pitch, width, height);
}










static __inline __declspec(__host__) cudaError_t cudaMallocAsync(
  void        **ptr,
  size_t        size,
  cudaMemPool_t memPool,
  cudaStream_t  stream
)
{
  return ::cudaMallocFromPoolAsync(ptr, size, memPool, stream);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocAsync(
  T           **ptr,
  size_t        size,
  cudaMemPool_t memPool,
  cudaStream_t  stream
)
{
  return ::cudaMallocFromPoolAsync((void**)(void*)ptr, size, memPool, stream);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocAsync(
  T           **ptr,
  size_t        size,
  cudaStream_t  stream
)
{
  return ::cudaMallocAsync((void**)(void*)ptr, size, stream);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocFromPoolAsync(
  T           **ptr,
  size_t        size,
  cudaMemPool_t memPool,
  cudaStream_t  stream
)
{
  return ::cudaMallocFromPoolAsync((void**)(void*)ptr, size, memPool, stream);
}






































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyToSymbol(
  const T                   &symbol,
  const void                *src,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyHostToDevice
)
{
  return ::cudaMemcpyToSymbol((const void*)&symbol, src, count, offset, kind);
}











































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyToSymbolAsync(
  const T                   &symbol,
  const void                *src,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyHostToDevice,
        cudaStream_t         stream = 0
)
{
  return ::cudaMemcpyToSymbolAsync((const void*)&symbol, src, count, offset, kind, stream);
}




































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyFromSymbol(
        void                *dst,
  const T                   &symbol,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyDeviceToHost
)
{
  return ::cudaMemcpyFromSymbol(dst, (const void*)&symbol, count, offset, kind);
}











































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyFromSymbolAsync(
        void                *dst,
  const T                   &symbol,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyDeviceToHost,
        cudaStream_t         stream = 0
)
{
  return ::cudaMemcpyFromSymbolAsync(dst, (const void*)&symbol, count, offset, kind, stream);
}

























































template<class T>
static __inline __declspec(__host__) cudaError_t cudaGraphAddMemcpyNodeToSymbol(
    cudaGraphNode_t *pGraphNode,
    cudaGraph_t graph,
    const cudaGraphNode_t *pDependencies,
    size_t numDependencies,
    const T &symbol,
    const void* src,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind)
{
  return ::cudaGraphAddMemcpyNodeToSymbol(pGraphNode, graph, pDependencies, numDependencies, (const void*)&symbol, src, count, offset, kind);
}

























































template<class T>
static __inline __declspec(__host__) cudaError_t cudaGraphAddMemcpyNodeFromSymbol(
    cudaGraphNode_t* pGraphNode,
    cudaGraph_t graph,
    const cudaGraphNode_t* pDependencies,
    size_t numDependencies,
    void* dst,
    const T &symbol,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind)
{
  return ::cudaGraphAddMemcpyNodeFromSymbol(pGraphNode, graph, pDependencies, numDependencies, dst, (const void*)&symbol, count, offset, kind);
}





































template<class T>
static __inline __declspec(__host__) cudaError_t cudaGraphMemcpyNodeSetParamsToSymbol(
    cudaGraphNode_t node,
    const T &symbol,
    const void* src,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind)
{
  return ::cudaGraphMemcpyNodeSetParamsToSymbol(node, (const void*)&symbol, src, count, offset, kind);
}





































template<class T>
static __inline __declspec(__host__) cudaError_t cudaGraphMemcpyNodeSetParamsFromSymbol(
    cudaGraphNode_t node,
    void* dst,
    const T &symbol,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind)
{
  return ::cudaGraphMemcpyNodeSetParamsFromSymbol(node, dst, (const void*)&symbol, count, offset, kind);
}















































template<class T>
static __inline __declspec(__host__) cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol(
    cudaGraphExec_t hGraphExec,
    cudaGraphNode_t node,
    const T &symbol,
    const void* src,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind)
{
    return ::cudaGraphExecMemcpyNodeSetParamsToSymbol(hGraphExec, node, (const void*)&symbol, src, count, offset, kind);
}















































template<class T>
static __inline __declspec(__host__) cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol(
    cudaGraphExec_t hGraphExec,
    cudaGraphNode_t node,
    void* dst,
    const T &symbol,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind)
{
  return ::cudaGraphExecMemcpyNodeSetParamsFromSymbol(hGraphExec, node, dst, (const void*)&symbol, count, offset, kind);
}




















































#line 1297 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"
























template<class T>
static __inline __declspec(__host__) cudaError_t cudaGetSymbolAddress(
        void **devPtr,
  const T     &symbol
)
{
  return ::cudaGetSymbolAddress(devPtr, (const void*)&symbol);
}
























template<class T>
static __inline __declspec(__host__) cudaError_t cudaGetSymbolSize(
        size_t *size,
  const T      &symbol
)
{
  return ::cudaGetSymbolSize(size, (const void*)&symbol);
}




































template<class T, int dim, enum cudaTextureReadMode readMode>
static __declspec(deprecated) __inline __declspec(__host__) cudaError_t cudaBindTexture(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
  const struct cudaChannelFormatDesc     &desc,
        size_t                            size = 0xffffffff
)
{
  return ::cudaBindTexture(offset, &tex, devPtr, &desc, size);
}



































template<class T, int dim, enum cudaTextureReadMode readMode>
static __declspec(deprecated) __inline __declspec(__host__) cudaError_t cudaBindTexture(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
        size_t                            size = 0xffffffff
)
{
  return cudaBindTexture(offset, tex, devPtr, tex.channelDesc, size);
}















































template<class T, int dim, enum cudaTextureReadMode readMode>
static __declspec(deprecated) __inline __declspec(__host__) cudaError_t cudaBindTexture2D(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
  const struct cudaChannelFormatDesc     &desc,
  size_t                                  width,
  size_t                                  height,
  size_t                                  pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch);
}














































template<class T, int dim, enum cudaTextureReadMode readMode>
static __declspec(deprecated) __inline __declspec(__host__) cudaError_t cudaBindTexture2D(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
  size_t                                  width,
  size_t                                  height,
  size_t                                  pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &tex.channelDesc, width, height, pitch);
}































template<class T, int dim, enum cudaTextureReadMode readMode>
static __declspec(deprecated) __inline __declspec(__host__) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t                       array,
  const struct cudaChannelFormatDesc     &desc
)
{
  return ::cudaBindTextureToArray(&tex, array, &desc);
}






























template<class T, int dim, enum cudaTextureReadMode readMode>
static __declspec(deprecated) __inline __declspec(__host__) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t                       array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t                  err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindTextureToArray(tex, array, desc) : err;
}































template<class T, int dim, enum cudaTextureReadMode readMode>
static __declspec(deprecated) __inline __declspec(__host__) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t              mipmappedArray,
  const struct cudaChannelFormatDesc     &desc
)
{
  return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc);
}






























template<class T, int dim, enum cudaTextureReadMode readMode>
static __declspec(deprecated) __inline __declspec(__host__) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t              mipmappedArray
)
{
  struct cudaChannelFormatDesc desc;
  cudaArray_t                  levelArray;
  cudaError_t                  err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0);
  
  if (err != cudaSuccess) {
      return err;
  }
  err = ::cudaGetChannelDesc(&desc, levelArray);

  return err == cudaSuccess ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err;
}


























template<class T, int dim, enum cudaTextureReadMode readMode>
static __declspec(deprecated) __inline __declspec(__host__) cudaError_t cudaUnbindTexture(
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaUnbindTexture(&tex);
}





























template<class T, int dim, enum cudaTextureReadMode readMode>
static __declspec(deprecated) __inline __declspec(__host__) cudaError_t cudaGetTextureAlignmentOffset(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaGetTextureAlignmentOffset(offset, &tex);
}












































template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncSetCacheConfig(
  T                  *func,
  enum cudaFuncCache  cacheConfig
)
{
  return ::cudaFuncSetCacheConfig((const void*)func, cacheConfig);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncSetSharedMemConfig(
  T                        *func,
  enum cudaSharedMemConfig  config
)
{
  return ::cudaFuncSetSharedMemConfig((const void*)func, config);
}

#line 1872 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"





























template<class T>
static __inline __declspec(__host__) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(
    int   *numBlocks,
    T      func,
    int    blockSize,
    size_t dynamicSMemSize)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, 0x00);
}











































template<class T>
static __inline __declspec(__host__) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
    int         *numBlocks,
    T            func,
    int          blockSize,
    size_t       dynamicSMemSize,
    unsigned int flags)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, flags);
}




class __cudaOccupancyB2DHelper {
  size_t n;
public:
  inline __declspec(__host__) __declspec(__device__) __cudaOccupancyB2DHelper(size_t n_) : n(n_) {}
  inline __declspec(__host__) __declspec(__device__) size_t operator()(int)
  {
      return n;
  }
};















































template<typename UnaryFunction, class T>
static __inline __declspec(__host__) __declspec(__device__) cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(
    int           *minGridSize,
    int           *blockSize,
    T              func,
    UnaryFunction  blockSizeToDynamicSMemSize,
    int            blockSizeLimit = 0,
    unsigned int   flags = 0)
{
    cudaError_t status;

    
    int                       device;
    struct cudaFuncAttributes attr;

    
    int maxThreadsPerMultiProcessor;
    int warpSize;
    int devMaxThreadsPerBlock;
    int multiProcessorCount;
    int funcMaxThreadsPerBlock;
    int occupancyLimit;
    int granularity;

    
    int maxBlockSize = 0;
    int numBlocks    = 0;
    int maxOccupancy = 0;

    
    int blockSizeToTryAligned;
    int blockSizeToTry;
    int blockSizeLimitAligned;
    int occupancyInBlocks;
    int occupancyInThreads;
    size_t dynamicSMemSize;

    
    
    

    if (!minGridSize || !blockSize || !func) {
        return cudaErrorInvalidValue;
    }

    
    
    

    status = ::cudaGetDevice(&device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &maxThreadsPerMultiProcessor,
        cudaDevAttrMaxThreadsPerMultiProcessor,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &warpSize,
        cudaDevAttrWarpSize,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &devMaxThreadsPerBlock,
        cudaDevAttrMaxThreadsPerBlock,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &multiProcessorCount,
        cudaDevAttrMultiProcessorCount,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaFuncGetAttributes(&attr, func);
    if (status != cudaSuccess) {
        return status;
    }
    
    funcMaxThreadsPerBlock = attr.maxThreadsPerBlock;

    
    
    

    occupancyLimit = maxThreadsPerMultiProcessor;
    granularity    = warpSize;

    if (blockSizeLimit == 0) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (devMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (funcMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = funcMaxThreadsPerBlock;
    }

    blockSizeLimitAligned = ((blockSizeLimit + (granularity - 1)) / granularity) * granularity;

    for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) {
        
        
        
        if (blockSizeLimit < blockSizeToTryAligned) {
            blockSizeToTry = blockSizeLimit;
        } else {
            blockSizeToTry = blockSizeToTryAligned;
        }
        
        dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry);

        status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
            &occupancyInBlocks,
            func,
            blockSizeToTry,
            dynamicSMemSize,
            flags);

        if (status != cudaSuccess) {
            return status;
        }

        occupancyInThreads = blockSizeToTry * occupancyInBlocks;

        if (occupancyInThreads > maxOccupancy) {
            maxBlockSize = blockSizeToTry;
            numBlocks    = occupancyInBlocks;
            maxOccupancy = occupancyInThreads;
        }

        
        
        if (occupancyLimit == maxOccupancy) {
            break;
        }
    }

    
    
    

    
    
    *minGridSize = numBlocks * multiProcessorCount;
    *blockSize = maxBlockSize;

    return status;
}

































template<typename UnaryFunction, class T>
static __inline __declspec(__host__) __declspec(__device__) cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMem(
    int           *minGridSize,
    int           *blockSize,
    T              func,
    UnaryFunction  blockSizeToDynamicSMemSize,
    int            blockSizeLimit = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0x00);
}




































template<class T>
static __inline __declspec(__host__) __declspec(__device__) cudaError_t cudaOccupancyMaxPotentialBlockSize(
    int    *minGridSize,
    int    *blockSize,
    T       func,
    size_t  dynamicSMemSize = 0,
    int     blockSizeLimit = 0)
{
  return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, 0x00);
}




























template<class T>
static __inline __declspec(__host__) cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(
    size_t *dynamicSmemSize,
    T      func,
    int    numBlocks,
    int    blockSize)
{
    return ::cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, (const void*)func, numBlocks, blockSize);
}


















































template<class T>
static __inline __declspec(__host__) __declspec(__device__) cudaError_t cudaOccupancyMaxPotentialBlockSizeWithFlags(
    int    *minGridSize,
    int    *blockSize,
    T      func,
    size_t dynamicSMemSize = 0,
    int    blockSizeLimit = 0,
    unsigned int flags = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, flags);
}
































template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncGetAttributes(
  struct cudaFuncAttributes *attr,
  T                         *entry
)
{
  return ::cudaFuncGetAttributes(attr, (const void*)entry);
}





































template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncSetAttribute(
  T                         *entry,
  enum cudaFuncAttribute    attr,
  int                       value
)
{
  return ::cudaFuncSetAttribute((const void*)entry, attr, value);
}























template<class T, int dim>
static __declspec(deprecated) __inline __declspec(__host__) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim>       &surf,
  cudaArray_const_t                   array,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindSurfaceToArray(&surf, array, &desc);
}






















template<class T, int dim>
static __declspec(deprecated) __inline __declspec(__host__) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  cudaArray_const_t             array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t                  err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindSurfaceToArray(surf, array, desc) : err;
}

#line 2526 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"

 

#line 2530 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"






#line 2537 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"
#pragma warning(pop)
#line 2539 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"
#line 2540 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"






#line 2547 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"

#line 2549 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda_runtime.h"
#line 1 "C:\\Users\\wangweihao\\Documents\\GPURayTraversal\\src\\rt\\cuda\\RendererKernels.cu"
#line 1 ".\\cudacache/defines.inl"


#line 1 "C:\\Users\\wangweihao\\Documents\\GPURayTraversal\\src\\rt\\cuda\\RendererKernels.cu"



























#line 1 "src/rt\\cuda/RendererKernels.hpp"



























#pragma once
#line 1 "src/framework\\base/DLLImports.hpp"



























#pragma once
#line 1 "src/framework\\base/Defs.hpp"



























#pragma once

#pragma warning(disable:4530) 



namespace FW
{










#line 47 "src/framework\\base/Defs.hpp"





#line 53 "src/framework\\base/Defs.hpp"





#line 59 "src/framework\\base/Defs.hpp"



#line 63 "src/framework\\base/Defs.hpp"



#line 67 "src/framework\\base/Defs.hpp"

#line 69 "src/framework\\base/Defs.hpp"







#line 77 "src/framework\\base/Defs.hpp"






typedef unsigned char       U8;
typedef unsigned short      U16;
typedef unsigned int        U32;
typedef signed char         S8;
typedef signed short        S16;
typedef signed int          S32;
typedef float               F32;
typedef double              F64;
typedef void                (*FuncPtr)(void);


typedef unsigned long long  U64;
typedef signed long long    S64;



#line 100 "src/framework\\base/Defs.hpp"




#line 105 "src/framework\\base/Defs.hpp"
typedef __w64 S32           SPTR;
typedef __w64 U32           UPTR;
#line 108 "src/framework\\base/Defs.hpp"




































































#line 177 "src/framework\\base/Defs.hpp"




template <class T> __declspec(__device__) __inline void swap(T& a, T& b) { T t = a; a = b; b = t; }


















template <class T> __declspec(__device__) __inline T& min(T& a, T& b) { return (a < b) ? a : b; } template <class T> __declspec(__device__) __inline T& max(T& a, T& b) { return (a > b) ? a : b; } template <class T> __declspec(__device__) __inline T& min(T& a, T& b, T& c) { return min(min(a, b), c); } template <class T> __declspec(__device__) __inline T& max(T& a, T& b, T& c) { return max(max(a, b), c); } template <class T> __declspec(__device__) __inline T& min(T& a, T& b, T& c, T& d) { return min(min(min(a, b), c), d); } template <class T> __declspec(__device__) __inline T& max(T& a, T& b, T& c, T& d) { return max(max(max(a, b), c), d); } template <class T> __declspec(__device__) __inline T& min(T& a, T& b, T& c, T& d, T& e) { return min(min(min(min(a, b), c), d), e); } template <class T> __declspec(__device__) __inline T& max(T& a, T& b, T& c, T& d, T& e) { return max(max(max(max(a, b), c), d), e); } template <class T> __declspec(__device__) __inline T& min(T& a, T& b, T& c, T& d, T& e, T& f) { return min(min(min(min(min(a, b), c), d), e), f); } template <class T> __declspec(__device__) __inline T& max(T& a, T& b, T& c, T& d, T& e, T& f) { return max(max(max(max(max(a, b), c), d), e), f); } template <class T> __declspec(__device__) __inline T& min(T& a, T& b, T& c, T& d, T& e, T& f, T& g) { return min(min(min(min(min(min(a, b), c), d), e), f), g); } template <class T> __declspec(__device__) __inline T& max(T& a, T& b, T& c, T& d, T& e, T& f, T& g) { return max(max(max(max(max(max(a, b), c), d), e), f), g); } template <class T> __declspec(__device__) __inline T& min(T& a, T& b, T& c, T& d, T& e, T& f, T& g, T& h) { return min(min(min(min(min(min(min(a, b), c), d), e), f), g), h); } template <class T> __declspec(__device__) __inline T& max(T& a, T& b, T& c, T& d, T& e, T& f, T& g, T& h) { return max(max(max(max(max(max(max(a, b), c), d), e), f), g), h); } template <class T> __declspec(__device__) __inline T& clamp(T& v, T& lo, T& hi) { return min(max(v, lo), hi); }
template <class T> __declspec(__device__) __inline const T& min(const T& a, const T& b) { return (a < b) ? a : b; } template <class T> __declspec(__device__) __inline const T& max(const T& a, const T& b) { return (a > b) ? a : b; } template <class T> __declspec(__device__) __inline const T& min(const T& a, const T& b, const T& c) { return min(min(a, b), c); } template <class T> __declspec(__device__) __inline const T& max(const T& a, const T& b, const T& c) { return max(max(a, b), c); } template <class T> __declspec(__device__) __inline const T& min(const T& a, const T& b, const T& c, const T& d) { return min(min(min(a, b), c), d); } template <class T> __declspec(__device__) __inline const T& max(const T& a, const T& b, const T& c, const T& d) { return max(max(max(a, b), c), d); } template <class T> __declspec(__device__) __inline const T& min(const T& a, const T& b, const T& c, const T& d, const T& e) { return min(min(min(min(a, b), c), d), e); } template <class T> __declspec(__device__) __inline const T& max(const T& a, const T& b, const T& c, const T& d, const T& e) { return max(max(max(max(a, b), c), d), e); } template <class T> __declspec(__device__) __inline const T& min(const T& a, const T& b, const T& c, const T& d, const T& e, const T& f) { return min(min(min(min(min(a, b), c), d), e), f); } template <class T> __declspec(__device__) __inline const T& max(const T& a, const T& b, const T& c, const T& d, const T& e, const T& f) { return max(max(max(max(max(a, b), c), d), e), f); } template <class T> __declspec(__device__) __inline const T& min(const T& a, const T& b, const T& c, const T& d, const T& e, const T& f, const T& g) { return min(min(min(min(min(min(a, b), c), d), e), f), g); } template <class T> __declspec(__device__) __inline const T& max(const T& a, const T& b, const T& c, const T& d, const T& e, const T& f, const T& g) { return max(max(max(max(max(max(a, b), c), d), e), f), g); } template <class T> __declspec(__device__) __inline const T& min(const T& a, const T& b, const T& c, const T& d, const T& e, const T& f, const T& g, const T& h) { return min(min(min(min(min(min(min(a, b), c), d), e), f), g), h); } template <class T> __declspec(__device__) __inline const T& max(const T& a, const T& b, const T& c, const T& d, const T& e, const T& f, const T& g, const T& h) { return max(max(max(max(max(max(max(a, b), c), d), e), f), g), h); } template <class T> __declspec(__device__) __inline const T& clamp(const T& v, const T& lo, const T& hi) { return min(max(v, lo), hi); }


 __declspec(__device__) __inline U32 min(U32 a, U32 b) { return ::min(a, b); }  __declspec(__device__) __inline U32 max(U32 a, U32 b) { return ::max(a, b); }  __declspec(__device__) __inline U32 min(U32 a, U32 b, U32 c) { return min(min(a, b), c); }  __declspec(__device__) __inline U32 max(U32 a, U32 b, U32 c) { return max(max(a, b), c); }  __declspec(__device__) __inline U32 min(U32 a, U32 b, U32 c, U32 d) { return min(min(min(a, b), c), d); }  __declspec(__device__) __inline U32 max(U32 a, U32 b, U32 c, U32 d) { return max(max(max(a, b), c), d); }  __declspec(__device__) __inline U32 min(U32 a, U32 b, U32 c, U32 d, U32 e) { return min(min(min(min(a, b), c), d), e); }  __declspec(__device__) __inline U32 max(U32 a, U32 b, U32 c, U32 d, U32 e) { return max(max(max(max(a, b), c), d), e); }  __declspec(__device__) __inline U32 min(U32 a, U32 b, U32 c, U32 d, U32 e, U32 f) { return min(min(min(min(min(a, b), c), d), e), f); }  __declspec(__device__) __inline U32 max(U32 a, U32 b, U32 c, U32 d, U32 e, U32 f) { return max(max(max(max(max(a, b), c), d), e), f); }  __declspec(__device__) __inline U32 min(U32 a, U32 b, U32 c, U32 d, U32 e, U32 f, U32 g) { return min(min(min(min(min(min(a, b), c), d), e), f), g); }  __declspec(__device__) __inline U32 max(U32 a, U32 b, U32 c, U32 d, U32 e, U32 f, U32 g) { return max(max(max(max(max(max(a, b), c), d), e), f), g); }  __declspec(__device__) __inline U32 min(U32 a, U32 b, U32 c, U32 d, U32 e, U32 f, U32 g, U32 h) { return min(min(min(min(min(min(min(a, b), c), d), e), f), g), h); }  __declspec(__device__) __inline U32 max(U32 a, U32 b, U32 c, U32 d, U32 e, U32 f, U32 g, U32 h) { return max(max(max(max(max(max(max(a, b), c), d), e), f), g), h); }  __declspec(__device__) __inline U32 clamp(U32 v, U32 lo, U32 hi) { return min(max(v, lo), hi); }
 __declspec(__device__) __inline S32 min(S32 a, S32 b) { return ::min(a, b); }  __declspec(__device__) __inline S32 max(S32 a, S32 b) { return ::max(a, b); }  __declspec(__device__) __inline S32 min(S32 a, S32 b, S32 c) { return min(min(a, b), c); }  __declspec(__device__) __inline S32 max(S32 a, S32 b, S32 c) { return max(max(a, b), c); }  __declspec(__device__) __inline S32 min(S32 a, S32 b, S32 c, S32 d) { return min(min(min(a, b), c), d); }  __declspec(__device__) __inline S32 max(S32 a, S32 b, S32 c, S32 d) { return max(max(max(a, b), c), d); }  __declspec(__device__) __inline S32 min(S32 a, S32 b, S32 c, S32 d, S32 e) { return min(min(min(min(a, b), c), d), e); }  __declspec(__device__) __inline S32 max(S32 a, S32 b, S32 c, S32 d, S32 e) { return max(max(max(max(a, b), c), d), e); }  __declspec(__device__) __inline S32 min(S32 a, S32 b, S32 c, S32 d, S32 e, S32 f) { return min(min(min(min(min(a, b), c), d), e), f); }  __declspec(__device__) __inline S32 max(S32 a, S32 b, S32 c, S32 d, S32 e, S32 f) { return max(max(max(max(max(a, b), c), d), e), f); }  __declspec(__device__) __inline S32 min(S32 a, S32 b, S32 c, S32 d, S32 e, S32 f, S32 g) { return min(min(min(min(min(min(a, b), c), d), e), f), g); }  __declspec(__device__) __inline S32 max(S32 a, S32 b, S32 c, S32 d, S32 e, S32 f, S32 g) { return max(max(max(max(max(max(a, b), c), d), e), f), g); }  __declspec(__device__) __inline S32 min(S32 a, S32 b, S32 c, S32 d, S32 e, S32 f, S32 g, S32 h) { return min(min(min(min(min(min(min(a, b), c), d), e), f), g), h); }  __declspec(__device__) __inline S32 max(S32 a, S32 b, S32 c, S32 d, S32 e, S32 f, S32 g, S32 h) { return max(max(max(max(max(max(max(a, b), c), d), e), f), g), h); }  __declspec(__device__) __inline S32 clamp(S32 v, S32 lo, S32 hi) { return min(max(v, lo), hi); }
 __declspec(__device__) __inline U64 min(U64 a, U64 b) { return ::min(a, b); }  __declspec(__device__) __inline U64 max(U64 a, U64 b) { return ::max(a, b); }  __declspec(__device__) __inline U64 min(U64 a, U64 b, U64 c) { return min(min(a, b), c); }  __declspec(__device__) __inline U64 max(U64 a, U64 b, U64 c) { return max(max(a, b), c); }  __declspec(__device__) __inline U64 min(U64 a, U64 b, U64 c, U64 d) { return min(min(min(a, b), c), d); }  __declspec(__device__) __inline U64 max(U64 a, U64 b, U64 c, U64 d) { return max(max(max(a, b), c), d); }  __declspec(__device__) __inline U64 min(U64 a, U64 b, U64 c, U64 d, U64 e) { return min(min(min(min(a, b), c), d), e); }  __declspec(__device__) __inline U64 max(U64 a, U64 b, U64 c, U64 d, U64 e) { return max(max(max(max(a, b), c), d), e); }  __declspec(__device__) __inline U64 min(U64 a, U64 b, U64 c, U64 d, U64 e, U64 f) { return min(min(min(min(min(a, b), c), d), e), f); }  __declspec(__device__) __inline U64 max(U64 a, U64 b, U64 c, U64 d, U64 e, U64 f) { return max(max(max(max(max(a, b), c), d), e), f); }  __declspec(__device__) __inline U64 min(U64 a, U64 b, U64 c, U64 d, U64 e, U64 f, U64 g) { return min(min(min(min(min(min(a, b), c), d), e), f), g); }  __declspec(__device__) __inline U64 max(U64 a, U64 b, U64 c, U64 d, U64 e, U64 f, U64 g) { return max(max(max(max(max(max(a, b), c), d), e), f), g); }  __declspec(__device__) __inline U64 min(U64 a, U64 b, U64 c, U64 d, U64 e, U64 f, U64 g, U64 h) { return min(min(min(min(min(min(min(a, b), c), d), e), f), g), h); }  __declspec(__device__) __inline U64 max(U64 a, U64 b, U64 c, U64 d, U64 e, U64 f, U64 g, U64 h) { return max(max(max(max(max(max(max(a, b), c), d), e), f), g), h); }  __declspec(__device__) __inline U64 clamp(U64 v, U64 lo, U64 hi) { return min(max(v, lo), hi); }
 __declspec(__device__) __inline S64 min(S64 a, S64 b) { return ::min(a, b); }  __declspec(__device__) __inline S64 max(S64 a, S64 b) { return ::max(a, b); }  __declspec(__device__) __inline S64 min(S64 a, S64 b, S64 c) { return min(min(a, b), c); }  __declspec(__device__) __inline S64 max(S64 a, S64 b, S64 c) { return max(max(a, b), c); }  __declspec(__device__) __inline S64 min(S64 a, S64 b, S64 c, S64 d) { return min(min(min(a, b), c), d); }  __declspec(__device__) __inline S64 max(S64 a, S64 b, S64 c, S64 d) { return max(max(max(a, b), c), d); }  __declspec(__device__) __inline S64 min(S64 a, S64 b, S64 c, S64 d, S64 e) { return min(min(min(min(a, b), c), d), e); }  __declspec(__device__) __inline S64 max(S64 a, S64 b, S64 c, S64 d, S64 e) { return max(max(max(max(a, b), c), d), e); }  __declspec(__device__) __inline S64 min(S64 a, S64 b, S64 c, S64 d, S64 e, S64 f) { return min(min(min(min(min(a, b), c), d), e), f); }  __declspec(__device__) __inline S64 max(S64 a, S64 b, S64 c, S64 d, S64 e, S64 f) { return max(max(max(max(max(a, b), c), d), e), f); }  __declspec(__device__) __inline S64 min(S64 a, S64 b, S64 c, S64 d, S64 e, S64 f, S64 g) { return min(min(min(min(min(min(a, b), c), d), e), f), g); }  __declspec(__device__) __inline S64 max(S64 a, S64 b, S64 c, S64 d, S64 e, S64 f, S64 g) { return max(max(max(max(max(max(a, b), c), d), e), f), g); }  __declspec(__device__) __inline S64 min(S64 a, S64 b, S64 c, S64 d, S64 e, S64 f, S64 g, S64 h) { return min(min(min(min(min(min(min(a, b), c), d), e), f), g), h); }  __declspec(__device__) __inline S64 max(S64 a, S64 b, S64 c, S64 d, S64 e, S64 f, S64 g, S64 h) { return max(max(max(max(max(max(max(a, b), c), d), e), f), g), h); }  __declspec(__device__) __inline S64 clamp(S64 v, S64 lo, S64 hi) { return min(max(v, lo), hi); }
 __declspec(__device__) __inline F32 min(F32 a, F32 b) { return ::fminf(a, b); }  __declspec(__device__) __inline F32 max(F32 a, F32 b) { return ::fmaxf(a, b); }  __declspec(__device__) __inline F32 min(F32 a, F32 b, F32 c) { return min(min(a, b), c); }  __declspec(__device__) __inline F32 max(F32 a, F32 b, F32 c) { return max(max(a, b), c); }  __declspec(__device__) __inline F32 min(F32 a, F32 b, F32 c, F32 d) { return min(min(min(a, b), c), d); }  __declspec(__device__) __inline F32 max(F32 a, F32 b, F32 c, F32 d) { return max(max(max(a, b), c), d); }  __declspec(__device__) __inline F32 min(F32 a, F32 b, F32 c, F32 d, F32 e) { return min(min(min(min(a, b), c), d), e); }  __declspec(__device__) __inline F32 max(F32 a, F32 b, F32 c, F32 d, F32 e) { return max(max(max(max(a, b), c), d), e); }  __declspec(__device__) __inline F32 min(F32 a, F32 b, F32 c, F32 d, F32 e, F32 f) { return min(min(min(min(min(a, b), c), d), e), f); }  __declspec(__device__) __inline F32 max(F32 a, F32 b, F32 c, F32 d, F32 e, F32 f) { return max(max(max(max(max(a, b), c), d), e), f); }  __declspec(__device__) __inline F32 min(F32 a, F32 b, F32 c, F32 d, F32 e, F32 f, F32 g) { return min(min(min(min(min(min(a, b), c), d), e), f), g); }  __declspec(__device__) __inline F32 max(F32 a, F32 b, F32 c, F32 d, F32 e, F32 f, F32 g) { return max(max(max(max(max(max(a, b), c), d), e), f), g); }  __declspec(__device__) __inline F32 min(F32 a, F32 b, F32 c, F32 d, F32 e, F32 f, F32 g, F32 h) { return min(min(min(min(min(min(min(a, b), c), d), e), f), g), h); }  __declspec(__device__) __inline F32 max(F32 a, F32 b, F32 c, F32 d, F32 e, F32 f, F32 g, F32 h) { return max(max(max(max(max(max(max(a, b), c), d), e), f), g), h); }  __declspec(__device__) __inline F32 clamp(F32 v, F32 lo, F32 hi) { return min(max(v, lo), hi); }
 __declspec(__device__) __inline F64 min(F64 a, F64 b) { return ::fmin(a, b); }  __declspec(__device__) __inline F64 max(F64 a, F64 b) { return ::fmax(a, b); }  __declspec(__device__) __inline F64 min(F64 a, F64 b, F64 c) { return min(min(a, b), c); }  __declspec(__device__) __inline F64 max(F64 a, F64 b, F64 c) { return max(max(a, b), c); }  __declspec(__device__) __inline F64 min(F64 a, F64 b, F64 c, F64 d) { return min(min(min(a, b), c), d); }  __declspec(__device__) __inline F64 max(F64 a, F64 b, F64 c, F64 d) { return max(max(max(a, b), c), d); }  __declspec(__device__) __inline F64 min(F64 a, F64 b, F64 c, F64 d, F64 e) { return min(min(min(min(a, b), c), d), e); }  __declspec(__device__) __inline F64 max(F64 a, F64 b, F64 c, F64 d, F64 e) { return max(max(max(max(a, b), c), d), e); }  __declspec(__device__) __inline F64 min(F64 a, F64 b, F64 c, F64 d, F64 e, F64 f) { return min(min(min(min(min(a, b), c), d), e), f); }  __declspec(__device__) __inline F64 max(F64 a, F64 b, F64 c, F64 d, F64 e, F64 f) { return max(max(max(max(max(a, b), c), d), e), f); }  __declspec(__device__) __inline F64 min(F64 a, F64 b, F64 c, F64 d, F64 e, F64 f, F64 g) { return min(min(min(min(min(min(a, b), c), d), e), f), g); }  __declspec(__device__) __inline F64 max(F64 a, F64 b, F64 c, F64 d, F64 e, F64 f, F64 g) { return max(max(max(max(max(max(a, b), c), d), e), f), g); }  __declspec(__device__) __inline F64 min(F64 a, F64 b, F64 c, F64 d, F64 e, F64 f, F64 g, F64 h) { return min(min(min(min(min(min(min(a, b), c), d), e), f), g), h); }  __declspec(__device__) __inline F64 max(F64 a, F64 b, F64 c, F64 d, F64 e, F64 f, F64 g, F64 h) { return max(max(max(max(max(max(max(a, b), c), d), e), f), g), h); }  __declspec(__device__) __inline F64 clamp(F64 v, F64 lo, F64 hi) { return min(max(v, lo), hi); }
#line 211 "src/framework\\base/Defs.hpp"






#line 218 "src/framework\\base/Defs.hpp"



}









#line 232 "src/framework\\base/Defs.hpp"
#line 233 "src/framework\\base/Defs.hpp"


#line 30 "src/framework\\base/DLLImports.hpp"









#line 1 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"






















































typedef unsigned __int32 cuuint32_t;
typedef unsigned __int64 cuuint64_t;




#line 62 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"



#line 66 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"





#line 72 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"



#line 76 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"





#line 82 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"
    
    
#line 85 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"























































































































#line 205 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"

























extern "C" {
#line 232 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"







#line 240 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"
typedef unsigned int CUdeviceptr_v2;
#line 242 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"
typedef CUdeviceptr_v2 CUdeviceptr;                          

typedef int CUdevice_v1;                                     
typedef CUdevice_v1 CUdevice;                                
typedef struct CUctx_st *CUcontext;                          
typedef struct CUmod_st *CUmodule;                           
typedef struct CUfunc_st *CUfunction;                        
typedef struct CUarray_st *CUarray;                          
typedef struct CUmipmappedArray_st *CUmipmappedArray;        
typedef struct CUtexref_st *CUtexref;                        
typedef struct CUsurfref_st *CUsurfref;                      
typedef struct CUevent_st *CUevent;                          
typedef struct CUstream_st *CUstream;                        
typedef struct CUgraphicsResource_st *CUgraphicsResource;    
typedef unsigned long long CUtexObject_v1;                   
typedef CUtexObject_v1 CUtexObject;                          
typedef unsigned long long CUsurfObject_v1;                  
typedef CUsurfObject_v1 CUsurfObject;                         
typedef struct CUextMemory_st *CUexternalMemory;             
typedef struct CUextSemaphore_st *CUexternalSemaphore;       
typedef struct CUgraph_st *CUgraph;                          
typedef struct CUgraphNode_st *CUgraphNode;                  
typedef struct CUgraphExec_st *CUgraphExec;                  
typedef struct CUmemPoolHandle_st *CUmemoryPool;             
typedef struct CUuserObject_st *CUuserObject;                
















typedef struct CUipcEventHandle_st {
    char reserved[64];
} CUipcEventHandle_v1;
typedef CUipcEventHandle_v1 CUipcEventHandle;




typedef struct CUipcMemHandle_st {
    char reserved[64];
} CUipcMemHandle_v1;
typedef CUipcMemHandle_v1 CUipcMemHandle;




typedef enum CUipcMem_flags_enum {
    CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 0x1 
} CUipcMem_flags;





typedef enum CUmemAttach_flags_enum {
    CU_MEM_ATTACH_GLOBAL = 0x1, 
    CU_MEM_ATTACH_HOST   = 0x2, 
    CU_MEM_ATTACH_SINGLE = 0x4  
} CUmemAttach_flags;




typedef enum CUctx_flags_enum {
    CU_CTX_SCHED_AUTO          = 0x00, 
    CU_CTX_SCHED_SPIN          = 0x01, 
    CU_CTX_SCHED_YIELD         = 0x02, 
    CU_CTX_SCHED_BLOCKING_SYNC = 0x04, 
    CU_CTX_BLOCKING_SYNC       = 0x04, 


    CU_CTX_SCHED_MASK          = 0x07,
    CU_CTX_MAP_HOST            = 0x08, 


    CU_CTX_LMEM_RESIZE_TO_MAX  = 0x10, 
    CU_CTX_FLAGS_MASK          = 0x1f
} CUctx_flags;




typedef enum CUstream_flags_enum {
    CU_STREAM_DEFAULT             = 0x0, 
    CU_STREAM_NON_BLOCKING        = 0x1  
} CUstream_flags;
























typedef enum CUevent_flags_enum {
    CU_EVENT_DEFAULT        = 0x0, 
    CU_EVENT_BLOCKING_SYNC  = 0x1, 
    CU_EVENT_DISABLE_TIMING = 0x2, 
    CU_EVENT_INTERPROCESS   = 0x4  
} CUevent_flags;




typedef enum CUevent_record_flags_enum {
    CU_EVENT_RECORD_DEFAULT  = 0x0, 
    CU_EVENT_RECORD_EXTERNAL = 0x1  


} CUevent_record_flags;




typedef enum CUevent_wait_flags_enum {
    CU_EVENT_WAIT_DEFAULT  = 0x0, 
    CU_EVENT_WAIT_EXTERNAL = 0x1  


} CUevent_wait_flags;




typedef enum CUstreamWaitValue_flags_enum {
    CU_STREAM_WAIT_VALUE_GEQ   = 0x0,   


    CU_STREAM_WAIT_VALUE_EQ    = 0x1,   
    CU_STREAM_WAIT_VALUE_AND   = 0x2,   
    CU_STREAM_WAIT_VALUE_NOR   = 0x3,   


    CU_STREAM_WAIT_VALUE_FLUSH = 1<<30  








} CUstreamWaitValue_flags;




typedef enum CUstreamWriteValue_flags_enum {
    CU_STREAM_WRITE_VALUE_DEFAULT           = 0x0, 
    CU_STREAM_WRITE_VALUE_NO_MEMORY_BARRIER = 0x1  





} CUstreamWriteValue_flags;




typedef enum CUstreamBatchMemOpType_enum {
    CU_STREAM_MEM_OP_WAIT_VALUE_32  = 1,     
    CU_STREAM_MEM_OP_WRITE_VALUE_32 = 2,     
    CU_STREAM_MEM_OP_WAIT_VALUE_64  = 4,     
    CU_STREAM_MEM_OP_WRITE_VALUE_64 = 5,     
    CU_STREAM_MEM_OP_FLUSH_REMOTE_WRITES = 3 

} CUstreamBatchMemOpType;




typedef union CUstreamBatchMemOpParams_union {
    CUstreamBatchMemOpType operation;
    struct CUstreamMemOpWaitValueParams_st {
        CUstreamBatchMemOpType operation;
        CUdeviceptr address;
        union {
            cuuint32_t value;
            cuuint64_t value64;
        };
        unsigned int flags;
        CUdeviceptr alias; 
    } waitValue;
    struct CUstreamMemOpWriteValueParams_st {
        CUstreamBatchMemOpType operation;
        CUdeviceptr address;
        union {
            cuuint32_t value;
            cuuint64_t value64;
        };
        unsigned int flags;
        CUdeviceptr alias; 
    } writeValue;
    struct CUstreamMemOpFlushRemoteWritesParams_st {
        CUstreamBatchMemOpType operation;
        unsigned int flags;
    } flushRemoteWrites;
    cuuint64_t pad[6];
} CUstreamBatchMemOpParams_v1;
typedef CUstreamBatchMemOpParams_v1 CUstreamBatchMemOpParams;




typedef enum CUoccupancy_flags_enum {
    CU_OCCUPANCY_DEFAULT                  = 0x0, 
    CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE = 0x1  
} CUoccupancy_flags;




typedef enum CUstreamUpdateCaptureDependencies_flags_enum {
    CU_STREAM_ADD_CAPTURE_DEPENDENCIES = 0x0, 
    CU_STREAM_SET_CAPTURE_DEPENDENCIES = 0x1  
} CUstreamUpdateCaptureDependencies_flags;




typedef enum CUarray_format_enum {
    CU_AD_FORMAT_UNSIGNED_INT8  = 0x01, 
    CU_AD_FORMAT_UNSIGNED_INT16 = 0x02, 
    CU_AD_FORMAT_UNSIGNED_INT32 = 0x03, 
    CU_AD_FORMAT_SIGNED_INT8    = 0x08, 
    CU_AD_FORMAT_SIGNED_INT16   = 0x09, 
    CU_AD_FORMAT_SIGNED_INT32   = 0x0a, 
    CU_AD_FORMAT_HALF           = 0x10, 
    CU_AD_FORMAT_FLOAT          = 0x20, 
    CU_AD_FORMAT_NV12           = 0xb0, 
    CU_AD_FORMAT_UNORM_INT8X1   = 0xc0, 
    CU_AD_FORMAT_UNORM_INT8X2   = 0xc1, 
    CU_AD_FORMAT_UNORM_INT8X4   = 0xc2, 
    CU_AD_FORMAT_UNORM_INT16X1  = 0xc3, 
    CU_AD_FORMAT_UNORM_INT16X2  = 0xc4, 
    CU_AD_FORMAT_UNORM_INT16X4  = 0xc5, 
    CU_AD_FORMAT_SNORM_INT8X1   = 0xc6, 
    CU_AD_FORMAT_SNORM_INT8X2   = 0xc7, 
    CU_AD_FORMAT_SNORM_INT8X4   = 0xc8, 
    CU_AD_FORMAT_SNORM_INT16X1  = 0xc9, 
    CU_AD_FORMAT_SNORM_INT16X2  = 0xca, 
    CU_AD_FORMAT_SNORM_INT16X4  = 0xcb, 
    CU_AD_FORMAT_BC1_UNORM      = 0x91, 
    CU_AD_FORMAT_BC1_UNORM_SRGB = 0x92, 
    CU_AD_FORMAT_BC2_UNORM      = 0x93, 
    CU_AD_FORMAT_BC2_UNORM_SRGB = 0x94, 
    CU_AD_FORMAT_BC3_UNORM      = 0x95, 
    CU_AD_FORMAT_BC3_UNORM_SRGB = 0x96, 
    CU_AD_FORMAT_BC4_UNORM      = 0x97, 
    CU_AD_FORMAT_BC4_SNORM      = 0x98, 
    CU_AD_FORMAT_BC5_UNORM      = 0x99, 
    CU_AD_FORMAT_BC5_SNORM      = 0x9a, 
    CU_AD_FORMAT_BC6H_UF16      = 0x9b, 
    CU_AD_FORMAT_BC6H_SF16      = 0x9c, 
    CU_AD_FORMAT_BC7_UNORM      = 0x9d, 
    CU_AD_FORMAT_BC7_UNORM_SRGB = 0x9e  
} CUarray_format;




typedef enum CUaddress_mode_enum {
    CU_TR_ADDRESS_MODE_WRAP   = 0, 
    CU_TR_ADDRESS_MODE_CLAMP  = 1, 
    CU_TR_ADDRESS_MODE_MIRROR = 2, 
    CU_TR_ADDRESS_MODE_BORDER = 3  
} CUaddress_mode;




typedef enum CUfilter_mode_enum {
    CU_TR_FILTER_MODE_POINT  = 0, 
    CU_TR_FILTER_MODE_LINEAR = 1  
} CUfilter_mode;




typedef enum CUdevice_attribute_enum {
    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1,                          
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X = 2,                                
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y = 3,                                
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z = 4,                                
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X = 5,                                 
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y = 6,                                 
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z = 7,                                 
    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK = 8,                    
    CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8,                        
    CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY = 9,                          
    CU_DEVICE_ATTRIBUTE_WARP_SIZE = 10,                                     
    CU_DEVICE_ATTRIBUTE_MAX_PITCH = 11,                                     
    CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK = 12,                       
    CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12,                           
    CU_DEVICE_ATTRIBUTE_CLOCK_RATE = 13,                                    
    CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT = 14,                             
    CU_DEVICE_ATTRIBUTE_GPU_OVERLAP = 15,                                   
    CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT = 16,                          
    CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT = 17,                           
    CU_DEVICE_ATTRIBUTE_INTEGRATED = 18,                                    
    CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY = 19,                           
    CU_DEVICE_ATTRIBUTE_COMPUTE_MODE = 20,                                  
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH = 21,                       
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH = 22,                       
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT = 23,                      
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH = 24,                       
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT = 25,                      
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH = 26,                       
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH = 27,               
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT = 28,              
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS = 29,              
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 27,                 
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT = 28,                
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES = 29,             
    CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT = 30,                             
    CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS = 31,                            
    CU_DEVICE_ATTRIBUTE_ECC_ENABLED = 32,                                   
    CU_DEVICE_ATTRIBUTE_PCI_BUS_ID = 33,                                    
    CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID = 34,                                 
    CU_DEVICE_ATTRIBUTE_TCC_DRIVER = 35,                                    
    CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE = 36,                             
    CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH = 37,                       
    CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE = 38,                                 
    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR = 39,                
    CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT = 40,                            
    CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING = 41,                            
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH = 42,               
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS = 43,              
    CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER = 44,                              
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH = 45,                
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT = 46,               
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE = 47,             
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE = 48,            
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE = 49,             
    CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID = 50,                                 
    CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT = 51,                       
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH = 52,                  
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH = 53,          
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS = 54,         
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH = 55,                       
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH = 56,                       
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT = 57,                      
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH = 58,                       
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT = 59,                      
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH = 60,                       
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH = 61,               
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS = 62,              
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH = 63,               
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT = 64,              
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS = 65,              
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH = 66,                  
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH = 67,          
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS = 68,         
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH = 69,                
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH = 70,                
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT = 71,               
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH = 72,                
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH = 73,             
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT = 74,            
    CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR = 75,                      
    CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR = 76,                      
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH = 77,             
    CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED = 78,                   
    CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED = 79,                     
    CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED = 80,                      
    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR = 81,          
    CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR = 82,              
    CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY = 83,                                
    CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD = 84,                               
    CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID = 85,                      
    CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED = 86,                  
    CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO = 87,         
    CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS = 88,                        
    CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS = 89,                     
    CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED = 90,                  
    CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM = 91,       
    CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_MEM_OPS = 92,                        
    CU_DEVICE_ATTRIBUTE_CAN_USE_64_BIT_STREAM_MEM_OPS = 93,                 
    CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR = 94,                 
    CU_DEVICE_ATTRIBUTE_COOPERATIVE_LAUNCH = 95,                            
    CU_DEVICE_ATTRIBUTE_COOPERATIVE_MULTI_DEVICE_LAUNCH = 96,               
    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK_OPTIN = 97,             
    CU_DEVICE_ATTRIBUTE_CAN_FLUSH_REMOTE_WRITES = 98,                       
    CU_DEVICE_ATTRIBUTE_HOST_REGISTER_SUPPORTED = 99,                       
    CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS_USES_HOST_PAGE_TABLES = 100, 
    CU_DEVICE_ATTRIBUTE_DIRECT_MANAGED_MEM_ACCESS_FROM_HOST = 101,          
    CU_DEVICE_ATTRIBUTE_VIRTUAL_ADDRESS_MANAGEMENT_SUPPORTED = 102,         
    CU_DEVICE_ATTRIBUTE_VIRTUAL_MEMORY_MANAGEMENT_SUPPORTED = 102,         
    CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR_SUPPORTED = 103,  
    CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_HANDLE_SUPPORTED = 104,           
    CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_KMT_HANDLE_SUPPORTED = 105,       
    CU_DEVICE_ATTRIBUTE_MAX_BLOCKS_PER_MULTIPROCESSOR = 106,                
    CU_DEVICE_ATTRIBUTE_GENERIC_COMPRESSION_SUPPORTED = 107,                
    CU_DEVICE_ATTRIBUTE_MAX_PERSISTING_L2_CACHE_SIZE = 108,                 
    CU_DEVICE_ATTRIBUTE_MAX_ACCESS_POLICY_WINDOW_SIZE = 109,                
    CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_WITH_CUDA_VMM_SUPPORTED = 110,      
    CU_DEVICE_ATTRIBUTE_RESERVED_SHARED_MEMORY_PER_BLOCK = 111,             
    CU_DEVICE_ATTRIBUTE_SPARSE_CUDA_ARRAY_SUPPORTED = 112,                  
    CU_DEVICE_ATTRIBUTE_READ_ONLY_HOST_REGISTER_SUPPORTED = 113,            
    CU_DEVICE_ATTRIBUTE_TIMELINE_SEMAPHORE_INTEROP_SUPPORTED = 114,         
    CU_DEVICE_ATTRIBUTE_MEMORY_POOLS_SUPPORTED = 115,                       
    CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_SUPPORTED = 116,                    
    CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_FLUSH_WRITES_OPTIONS = 117,         
    CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_WRITES_ORDERING = 118,              
    CU_DEVICE_ATTRIBUTE_MEMPOOL_SUPPORTED_HANDLE_TYPES = 119,               
    CU_DEVICE_ATTRIBUTE_MAX
} CUdevice_attribute;




typedef struct CUdevprop_st {
    int maxThreadsPerBlock;     
    int maxThreadsDim[3];       
    int maxGridSize[3];         
    int sharedMemPerBlock;      
    int totalConstantMemory;    
    int SIMDWidth;              
    int memPitch;               
    int regsPerBlock;           
    int clockRate;              
    int textureAlign;           
} CUdevprop_v1;
typedef CUdevprop_v1 CUdevprop;




typedef enum CUpointer_attribute_enum {
    CU_POINTER_ATTRIBUTE_CONTEXT = 1,                     
    CU_POINTER_ATTRIBUTE_MEMORY_TYPE = 2,                 
    CU_POINTER_ATTRIBUTE_DEVICE_POINTER = 3,              
    CU_POINTER_ATTRIBUTE_HOST_POINTER = 4,                
    CU_POINTER_ATTRIBUTE_P2P_TOKENS = 5,                  
    CU_POINTER_ATTRIBUTE_SYNC_MEMOPS = 6,                 
    CU_POINTER_ATTRIBUTE_BUFFER_ID = 7,                   
    CU_POINTER_ATTRIBUTE_IS_MANAGED = 8,                  
    CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL = 9,              
    CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE = 10, 
    CU_POINTER_ATTRIBUTE_RANGE_START_ADDR = 11,           
    CU_POINTER_ATTRIBUTE_RANGE_SIZE = 12,                 
    CU_POINTER_ATTRIBUTE_MAPPED = 13,                     
    CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES = 14,       
    CU_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE = 15, 
    CU_POINTER_ATTRIBUTE_ACCESS_FLAGS = 16,               
    CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE = 17              
} CUpointer_attribute;




typedef enum CUfunction_attribute_enum {
    




    CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 0,

    




    CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES = 1,

    



    CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES = 2,

    


    CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES = 3,

    


    CU_FUNC_ATTRIBUTE_NUM_REGS = 4,

    






    CU_FUNC_ATTRIBUTE_PTX_VERSION = 5,

    






    CU_FUNC_ATTRIBUTE_BINARY_VERSION = 6,

    



    CU_FUNC_ATTRIBUTE_CACHE_MODE_CA = 7,

    





    CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES = 8,

    






    CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT = 9,

    CU_FUNC_ATTRIBUTE_MAX
} CUfunction_attribute;




typedef enum CUfunc_cache_enum {
    CU_FUNC_CACHE_PREFER_NONE    = 0x00, 
    CU_FUNC_CACHE_PREFER_SHARED  = 0x01, 
    CU_FUNC_CACHE_PREFER_L1      = 0x02, 
    CU_FUNC_CACHE_PREFER_EQUAL   = 0x03  
} CUfunc_cache;




typedef enum CUsharedconfig_enum {
    CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE    = 0x00, 
    CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE  = 0x01, 
    CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE = 0x02  
} CUsharedconfig;




typedef enum CUshared_carveout_enum {
    CU_SHAREDMEM_CARVEOUT_DEFAULT       = -1,  
    CU_SHAREDMEM_CARVEOUT_MAX_SHARED    = 100, 
    CU_SHAREDMEM_CARVEOUT_MAX_L1        = 0    
} CUshared_carveout;




typedef enum CUmemorytype_enum {
    CU_MEMORYTYPE_HOST    = 0x01,    
    CU_MEMORYTYPE_DEVICE  = 0x02,    
    CU_MEMORYTYPE_ARRAY   = 0x03,    
    CU_MEMORYTYPE_UNIFIED = 0x04     
} CUmemorytype;




typedef enum CUcomputemode_enum {
    CU_COMPUTEMODE_DEFAULT           = 0, 
    CU_COMPUTEMODE_PROHIBITED        = 2, 
    CU_COMPUTEMODE_EXCLUSIVE_PROCESS = 3  
} CUcomputemode;




typedef enum CUmem_advise_enum {
    CU_MEM_ADVISE_SET_READ_MOSTLY          = 1, 
    CU_MEM_ADVISE_UNSET_READ_MOSTLY        = 2, 
    CU_MEM_ADVISE_SET_PREFERRED_LOCATION   = 3, 
    CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION = 4, 
    CU_MEM_ADVISE_SET_ACCESSED_BY          = 5, 
    CU_MEM_ADVISE_UNSET_ACCESSED_BY        = 6  
} CUmem_advise;

typedef enum CUmem_range_attribute_enum {
    CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY            = 1, 
    CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION     = 2, 
    CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY            = 3, 
    CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION = 4  
} CUmem_range_attribute;




typedef enum CUjit_option_enum
{
    




    CU_JIT_MAX_REGISTERS = 0,

    












    CU_JIT_THREADS_PER_BLOCK,

    





    CU_JIT_WALL_TIME,

    






    CU_JIT_INFO_LOG_BUFFER,

    






    CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,

    






    CU_JIT_ERROR_LOG_BUFFER,

    






    CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,

    





    CU_JIT_OPTIMIZATION_LEVEL,

    





    CU_JIT_TARGET_FROM_CUCONTEXT,

    





    CU_JIT_TARGET,

    






    CU_JIT_FALLBACK_STRATEGY,

    





    CU_JIT_GENERATE_DEBUG_INFO,

    




    CU_JIT_LOG_VERBOSE,

    




    CU_JIT_GENERATE_LINE_INFO,

    





    CU_JIT_CACHE_MODE,

    


    CU_JIT_NEW_SM3X_OPT,
    CU_JIT_FAST_COMPILE,

    











    CU_JIT_GLOBAL_SYMBOL_NAMES,

    






    CU_JIT_GLOBAL_SYMBOL_ADDRESSES,

    





    CU_JIT_GLOBAL_SYMBOL_COUNT,

    




    CU_JIT_LTO,

    






    CU_JIT_FTZ,

    







    CU_JIT_PREC_DIV,

    







    CU_JIT_PREC_SQRT,

    






    CU_JIT_FMA,

    CU_JIT_NUM_OPTIONS

} CUjit_option;




typedef enum CUjit_target_enum
{
    CU_TARGET_COMPUTE_20 = 20,       
    CU_TARGET_COMPUTE_21 = 21,       
    CU_TARGET_COMPUTE_30 = 30,       
    CU_TARGET_COMPUTE_32 = 32,       
    CU_TARGET_COMPUTE_35 = 35,       
    CU_TARGET_COMPUTE_37 = 37,       
    CU_TARGET_COMPUTE_50 = 50,       
    CU_TARGET_COMPUTE_52 = 52,       
    CU_TARGET_COMPUTE_53 = 53,       
    CU_TARGET_COMPUTE_60 = 60,       
    CU_TARGET_COMPUTE_61 = 61,       
    CU_TARGET_COMPUTE_62 = 62,       
    CU_TARGET_COMPUTE_70 = 70,       
    CU_TARGET_COMPUTE_72 = 72,       
    CU_TARGET_COMPUTE_75 = 75,       
    CU_TARGET_COMPUTE_80 = 80,       
    CU_TARGET_COMPUTE_86 = 86        
} CUjit_target;




typedef enum CUjit_fallback_enum
{
    CU_PREFER_PTX = 0,  

    CU_PREFER_BINARY    

} CUjit_fallback;




typedef enum CUjit_cacheMode_enum
{
    CU_JIT_CACHE_OPTION_NONE = 0, 
    CU_JIT_CACHE_OPTION_CG,       
    CU_JIT_CACHE_OPTION_CA        
} CUjit_cacheMode;




typedef enum CUjitInputType_enum
{
    



    CU_JIT_INPUT_CUBIN = 0,

    



    CU_JIT_INPUT_PTX,

    



    CU_JIT_INPUT_FATBINARY,

    



    CU_JIT_INPUT_OBJECT,

    



    CU_JIT_INPUT_LIBRARY,

    



    CU_JIT_INPUT_NVVM,

    CU_JIT_NUM_INPUT_TYPES
} CUjitInputType;

typedef struct CUlinkState_st *CUlinkState;




typedef enum CUgraphicsRegisterFlags_enum {
    CU_GRAPHICS_REGISTER_FLAGS_NONE           = 0x00,
    CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY      = 0x01,
    CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD  = 0x02,
    CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST   = 0x04,
    CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER = 0x08
} CUgraphicsRegisterFlags;




typedef enum CUgraphicsMapResourceFlags_enum {
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE          = 0x00,
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY     = 0x01,
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 0x02
} CUgraphicsMapResourceFlags;




typedef enum CUarray_cubemap_face_enum {
    CU_CUBEMAP_FACE_POSITIVE_X  = 0x00, 
    CU_CUBEMAP_FACE_NEGATIVE_X  = 0x01, 
    CU_CUBEMAP_FACE_POSITIVE_Y  = 0x02, 
    CU_CUBEMAP_FACE_NEGATIVE_Y  = 0x03, 
    CU_CUBEMAP_FACE_POSITIVE_Z  = 0x04, 
    CU_CUBEMAP_FACE_NEGATIVE_Z  = 0x05  
} CUarray_cubemap_face;




typedef enum CUlimit_enum {
    CU_LIMIT_STACK_SIZE                       = 0x00, 
    CU_LIMIT_PRINTF_FIFO_SIZE                 = 0x01, 
    CU_LIMIT_MALLOC_HEAP_SIZE                 = 0x02, 
    CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH           = 0x03, 
    CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT = 0x04, 
    CU_LIMIT_MAX_L2_FETCH_GRANULARITY         = 0x05, 
    CU_LIMIT_PERSISTING_L2_CACHE_SIZE         = 0x06, 
    CU_LIMIT_MAX
} CUlimit;




typedef enum CUresourcetype_enum {
    CU_RESOURCE_TYPE_ARRAY           = 0x00, 
    CU_RESOURCE_TYPE_MIPMAPPED_ARRAY = 0x01, 
    CU_RESOURCE_TYPE_LINEAR          = 0x02, 
    CU_RESOURCE_TYPE_PITCH2D         = 0x03  
} CUresourcetype;





#line 1234 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"





typedef void (__stdcall *CUhostFn)(void *userData);




typedef enum CUaccessProperty_enum {
    CU_ACCESS_PROPERTY_NORMAL           = 0,    
    CU_ACCESS_PROPERTY_STREAMING        = 1,    
    CU_ACCESS_PROPERTY_PERSISTING       = 2     
} CUaccessProperty;













typedef struct CUaccessPolicyWindow_st {
    void *base_ptr;                     
    size_t num_bytes;                   
    float hitRatio;                     
    CUaccessProperty hitProp;           
    CUaccessProperty missProp;          
} CUaccessPolicyWindow_v1;
typedef CUaccessPolicyWindow_v1 CUaccessPolicyWindow;




typedef struct CUDA_KERNEL_NODE_PARAMS_st {
    CUfunction func;             
    unsigned int gridDimX;       
    unsigned int gridDimY;       
    unsigned int gridDimZ;       
    unsigned int blockDimX;      
    unsigned int blockDimY;      
    unsigned int blockDimZ;      
    unsigned int sharedMemBytes; 
    void **kernelParams;         
    void **extra;                
} CUDA_KERNEL_NODE_PARAMS_v1;
typedef CUDA_KERNEL_NODE_PARAMS_v1 CUDA_KERNEL_NODE_PARAMS;




typedef struct CUDA_MEMSET_NODE_PARAMS_st {
    CUdeviceptr dst;                        
    size_t pitch;                           
    unsigned int value;                     
    unsigned int elementSize;               
    size_t width;                           
    size_t height;                          
} CUDA_MEMSET_NODE_PARAMS_v1;
typedef CUDA_MEMSET_NODE_PARAMS_v1 CUDA_MEMSET_NODE_PARAMS;




typedef struct CUDA_HOST_NODE_PARAMS_st {
    CUhostFn fn;    
    void* userData; 
} CUDA_HOST_NODE_PARAMS_v1;
typedef CUDA_HOST_NODE_PARAMS_v1 CUDA_HOST_NODE_PARAMS;




typedef enum CUgraphNodeType_enum {
    CU_GRAPH_NODE_TYPE_KERNEL           = 0, 
    CU_GRAPH_NODE_TYPE_MEMCPY           = 1, 
    CU_GRAPH_NODE_TYPE_MEMSET           = 2, 
    CU_GRAPH_NODE_TYPE_HOST             = 3, 
    CU_GRAPH_NODE_TYPE_GRAPH            = 4, 
    CU_GRAPH_NODE_TYPE_EMPTY            = 5, 
    CU_GRAPH_NODE_TYPE_WAIT_EVENT       = 6, 
    CU_GRAPH_NODE_TYPE_EVENT_RECORD     = 7, 
    CU_GRAPH_NODE_TYPE_EXT_SEMAS_SIGNAL = 8, 
    CU_GRAPH_NODE_TYPE_EXT_SEMAS_WAIT   = 9, 
    CU_GRAPH_NODE_TYPE_MEM_ALLOC        = 10,
    CU_GRAPH_NODE_TYPE_MEM_FREE         = 11 
} CUgraphNodeType;

typedef enum CUsynchronizationPolicy_enum {
    CU_SYNC_POLICY_AUTO = 1,
    CU_SYNC_POLICY_SPIN = 2,
    CU_SYNC_POLICY_YIELD = 3,
    CU_SYNC_POLICY_BLOCKING_SYNC = 4
} CUsynchronizationPolicy;




typedef enum CUkernelNodeAttrID_enum {
    CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW       = 1,    
    CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE                = 2     
} CUkernelNodeAttrID;




typedef union CUkernelNodeAttrValue_union {
    CUaccessPolicyWindow accessPolicyWindow;    
    int cooperative;                            
} CUkernelNodeAttrValue_v1;
typedef CUkernelNodeAttrValue_v1 CUkernelNodeAttrValue;




typedef enum CUstreamCaptureStatus_enum {
    CU_STREAM_CAPTURE_STATUS_NONE        = 0, 
    CU_STREAM_CAPTURE_STATUS_ACTIVE      = 1, 
    CU_STREAM_CAPTURE_STATUS_INVALIDATED = 2  

} CUstreamCaptureStatus;





typedef enum CUstreamCaptureMode_enum {
    CU_STREAM_CAPTURE_MODE_GLOBAL       = 0,
    CU_STREAM_CAPTURE_MODE_THREAD_LOCAL = 1,
    CU_STREAM_CAPTURE_MODE_RELAXED      = 2
} CUstreamCaptureMode;




typedef enum CUstreamAttrID_enum {
    CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW    = 1,   
    CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY  = 3    
} CUstreamAttrID;




typedef union CUstreamAttrValue_union {
    CUaccessPolicyWindow accessPolicyWindow;   
    CUsynchronizationPolicy syncPolicy;        
} CUstreamAttrValue_v1;
typedef CUstreamAttrValue_v1 CUstreamAttrValue;




typedef enum CUdriverProcAddress_flags_enum {
    CU_GET_PROC_ADDRESS_DEFAULT = 0,                        
    CU_GET_PROC_ADDRESS_LEGACY_STREAM = 1 << 0,             
    CU_GET_PROC_ADDRESS_PER_THREAD_DEFAULT_STREAM = 1 << 1   
} CUdriverProcAddress_flags;




typedef enum CUexecAffinityType_enum {
    CU_EXEC_AFFINITY_TYPE_SM_COUNT = 0,  
    CU_EXEC_AFFINITY_TYPE_MAX
} CUexecAffinityType;




typedef struct CUexecAffinitySmCount_st {
    unsigned int val;    
} CUexecAffinitySmCount_v1;
typedef CUexecAffinitySmCount_v1 CUexecAffinitySmCount;




typedef struct CUexecAffinityParam_st {
    CUexecAffinityType type;
    union {
        CUexecAffinitySmCount smCount;    
    } param;
} CUexecAffinityParam_v1;
typedef CUexecAffinityParam_v1 CUexecAffinityParam;




typedef enum cudaError_enum {
    




    CUDA_SUCCESS                              = 0,

    



    CUDA_ERROR_INVALID_VALUE                  = 1,

    



    CUDA_ERROR_OUT_OF_MEMORY                  = 2,

    



    CUDA_ERROR_NOT_INITIALIZED                = 3,

    


    CUDA_ERROR_DEINITIALIZED                  = 4,

    




    CUDA_ERROR_PROFILER_DISABLED              = 5,

    





    CUDA_ERROR_PROFILER_NOT_INITIALIZED       = 6,

    




    CUDA_ERROR_PROFILER_ALREADY_STARTED       = 7,

    




    CUDA_ERROR_PROFILER_ALREADY_STOPPED       = 8,

    




    CUDA_ERROR_STUB_LIBRARY                   = 34,

    



    CUDA_ERROR_NO_DEVICE                      = 100,

    




    CUDA_ERROR_INVALID_DEVICE                 = 101,

    


    CUDA_ERROR_DEVICE_NOT_LICENSED            = 102,

    



    CUDA_ERROR_INVALID_IMAGE                  = 200,

    







    CUDA_ERROR_INVALID_CONTEXT                = 201,

    






    CUDA_ERROR_CONTEXT_ALREADY_CURRENT        = 202,

    


    CUDA_ERROR_MAP_FAILED                     = 205,

    


    CUDA_ERROR_UNMAP_FAILED                   = 206,

    



    CUDA_ERROR_ARRAY_IS_MAPPED                = 207,

    


    CUDA_ERROR_ALREADY_MAPPED                 = 208,

    





    CUDA_ERROR_NO_BINARY_FOR_GPU              = 209,

    


    CUDA_ERROR_ALREADY_ACQUIRED               = 210,

    


    CUDA_ERROR_NOT_MAPPED                     = 211,

    



    CUDA_ERROR_NOT_MAPPED_AS_ARRAY            = 212,

    



    CUDA_ERROR_NOT_MAPPED_AS_POINTER          = 213,

    



    CUDA_ERROR_ECC_UNCORRECTABLE              = 214,

    



    CUDA_ERROR_UNSUPPORTED_LIMIT              = 215,

    




    CUDA_ERROR_CONTEXT_ALREADY_IN_USE         = 216,

    



    CUDA_ERROR_PEER_ACCESS_UNSUPPORTED        = 217,

    


    CUDA_ERROR_INVALID_PTX                    = 218,

    


    CUDA_ERROR_INVALID_GRAPHICS_CONTEXT       = 219,

    



    CUDA_ERROR_NVLINK_UNCORRECTABLE           = 220,

    


    CUDA_ERROR_JIT_COMPILER_NOT_FOUND         = 221,

    



    CUDA_ERROR_UNSUPPORTED_PTX_VERSION        = 222,

    


    CUDA_ERROR_JIT_COMPILATION_DISABLED       = 223,

    


 
    CUDA_ERROR_UNSUPPORTED_EXEC_AFFINITY      = 224,

    



    CUDA_ERROR_INVALID_SOURCE                 = 300,

    


    CUDA_ERROR_FILE_NOT_FOUND                 = 301,

    


    CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND = 302,

    


    CUDA_ERROR_SHARED_OBJECT_INIT_FAILED      = 303,

    


    CUDA_ERROR_OPERATING_SYSTEM               = 304,

    



    CUDA_ERROR_INVALID_HANDLE                 = 400,

    



    CUDA_ERROR_ILLEGAL_STATE                  = 401,

    




    CUDA_ERROR_NOT_FOUND                      = 500,

    





    CUDA_ERROR_NOT_READY                      = 600,

    






    CUDA_ERROR_ILLEGAL_ADDRESS                = 700,

    








    CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES        = 701,

    







    CUDA_ERROR_LAUNCH_TIMEOUT                 = 702,

    



    CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING  = 703,

    




    CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED    = 704,

    




    CUDA_ERROR_PEER_ACCESS_NOT_ENABLED        = 705,

    



    CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE         = 708,

    




    CUDA_ERROR_CONTEXT_IS_DESTROYED           = 709,

    





    CUDA_ERROR_ASSERT                         = 710,

    




    CUDA_ERROR_TOO_MANY_PEERS                 = 711,

    



    CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED = 712,

    



    CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED     = 713,

    






    CUDA_ERROR_HARDWARE_STACK_ERROR           = 714,

    





    CUDA_ERROR_ILLEGAL_INSTRUCTION            = 715,

    






    CUDA_ERROR_MISALIGNED_ADDRESS             = 716,

    








    CUDA_ERROR_INVALID_ADDRESS_SPACE          = 717,

    





    CUDA_ERROR_INVALID_PC                     = 718,

    








    CUDA_ERROR_LAUNCH_FAILED                  = 719,

    






    CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE   = 720,

    


    CUDA_ERROR_NOT_PERMITTED                  = 800,

    



    CUDA_ERROR_NOT_SUPPORTED                  = 801,

    






    CUDA_ERROR_SYSTEM_NOT_READY               = 802,

    




    CUDA_ERROR_SYSTEM_DRIVER_MISMATCH         = 803,

    






    CUDA_ERROR_COMPAT_NOT_SUPPORTED_ON_DEVICE = 804,

    


    CUDA_ERROR_MPS_CONNECTION_FAILED          = 805,

    


    CUDA_ERROR_MPS_RPC_FAILURE                = 806,

    



    CUDA_ERROR_MPS_SERVER_NOT_READY           = 807,

    


    CUDA_ERROR_MPS_MAX_CLIENTS_REACHED        = 808,

    


    CUDA_ERROR_MPS_MAX_CONNECTIONS_REACHED    = 809,

    



    CUDA_ERROR_STREAM_CAPTURE_UNSUPPORTED     = 900,

    



    CUDA_ERROR_STREAM_CAPTURE_INVALIDATED     = 901,

    



    CUDA_ERROR_STREAM_CAPTURE_MERGE           = 902,

    


    CUDA_ERROR_STREAM_CAPTURE_UNMATCHED       = 903,

    



    CUDA_ERROR_STREAM_CAPTURE_UNJOINED        = 904,

    




    CUDA_ERROR_STREAM_CAPTURE_ISOLATION       = 905,

    



    CUDA_ERROR_STREAM_CAPTURE_IMPLICIT        = 906,

    



    CUDA_ERROR_CAPTURED_EVENT                 = 907,

    




    CUDA_ERROR_STREAM_CAPTURE_WRONG_THREAD    = 908,

    


    CUDA_ERROR_TIMEOUT                        = 909,

    



    CUDA_ERROR_GRAPH_EXEC_UPDATE_FAILURE      = 910,

    







    CUDA_ERROR_EXTERNAL_DEVICE               = 911,

    


    CUDA_ERROR_UNKNOWN                        = 999
} CUresult;




typedef enum CUdevice_P2PAttribute_enum {
    CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK                     = 0x01,  
    CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED                     = 0x02,  
    CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED              = 0x03,  
    CU_DEVICE_P2P_ATTRIBUTE_ACCESS_ACCESS_SUPPORTED              = 0x04,  
    CU_DEVICE_P2P_ATTRIBUTE_CUDA_ARRAY_ACCESS_SUPPORTED          = 0x04   
} CUdevice_P2PAttribute;







typedef void (__stdcall *CUstreamCallback)(CUstream hStream, CUresult status, void *userData);







typedef size_t (__stdcall *CUoccupancyB2DSize)(int blockSize);
































































typedef struct CUDA_MEMCPY2D_st {
    size_t srcXInBytes;         
    size_t srcY;                

    CUmemorytype srcMemoryType; 
    const void *srcHost;        
    CUdeviceptr srcDevice;      
    CUarray srcArray;           
    size_t srcPitch;            

    size_t dstXInBytes;         
    size_t dstY;                

    CUmemorytype dstMemoryType; 
    void *dstHost;              
    CUdeviceptr dstDevice;      
    CUarray dstArray;           
    size_t dstPitch;            

    size_t WidthInBytes;        
    size_t Height;              
} CUDA_MEMCPY2D_v2;
typedef CUDA_MEMCPY2D_v2 CUDA_MEMCPY2D;




typedef struct CUDA_MEMCPY3D_st {
    size_t srcXInBytes;         
    size_t srcY;                
    size_t srcZ;                
    size_t srcLOD;              
    CUmemorytype srcMemoryType; 
    const void *srcHost;        
    CUdeviceptr srcDevice;      
    CUarray srcArray;           
    void *reserved0;            
    size_t srcPitch;            
    size_t srcHeight;           

    size_t dstXInBytes;         
    size_t dstY;                
    size_t dstZ;                
    size_t dstLOD;              
    CUmemorytype dstMemoryType; 
    void *dstHost;              
    CUdeviceptr dstDevice;      
    CUarray dstArray;           
    void *reserved1;            
    size_t dstPitch;            
    size_t dstHeight;           

    size_t WidthInBytes;        
    size_t Height;              
    size_t Depth;               
} CUDA_MEMCPY3D_v2;
typedef CUDA_MEMCPY3D_v2 CUDA_MEMCPY3D;




typedef struct CUDA_MEMCPY3D_PEER_st {
    size_t srcXInBytes;         
    size_t srcY;                
    size_t srcZ;                
    size_t srcLOD;              
    CUmemorytype srcMemoryType; 
    const void *srcHost;        
    CUdeviceptr srcDevice;      
    CUarray srcArray;           
    CUcontext srcContext;       
    size_t srcPitch;            
    size_t srcHeight;           

    size_t dstXInBytes;         
    size_t dstY;                
    size_t dstZ;                
    size_t dstLOD;              
    CUmemorytype dstMemoryType; 
    void *dstHost;              
    CUdeviceptr dstDevice;      
    CUarray dstArray;           
    CUcontext dstContext;       
    size_t dstPitch;            
    size_t dstHeight;           

    size_t WidthInBytes;        
    size_t Height;              
    size_t Depth;               
} CUDA_MEMCPY3D_PEER_v1;
typedef CUDA_MEMCPY3D_PEER_v1 CUDA_MEMCPY3D_PEER;




typedef struct CUDA_ARRAY_DESCRIPTOR_st
{
    size_t Width;             
    size_t Height;            

    CUarray_format Format;    
    unsigned int NumChannels; 
} CUDA_ARRAY_DESCRIPTOR_v2;
typedef CUDA_ARRAY_DESCRIPTOR_v2 CUDA_ARRAY_DESCRIPTOR;




typedef struct CUDA_ARRAY3D_DESCRIPTOR_st
{
    size_t Width;             
    size_t Height;            
    size_t Depth;             

    CUarray_format Format;    
    unsigned int NumChannels; 
    unsigned int Flags;       
} CUDA_ARRAY3D_DESCRIPTOR_v2;
typedef CUDA_ARRAY3D_DESCRIPTOR_v2 CUDA_ARRAY3D_DESCRIPTOR;









typedef struct CUDA_ARRAY_SPARSE_PROPERTIES_st {
    struct {
        unsigned int width;     
        unsigned int height;    
        unsigned int depth;     
    } tileExtent;

    


    unsigned int miptailFirstLevel;
    


    unsigned long long miptailSize;
    


    unsigned int flags;
    unsigned int reserved[4];
} CUDA_ARRAY_SPARSE_PROPERTIES_v1;
typedef CUDA_ARRAY_SPARSE_PROPERTIES_v1 CUDA_ARRAY_SPARSE_PROPERTIES;




typedef struct CUDA_RESOURCE_DESC_st
{
    CUresourcetype resType;                   

    union {
        struct {
            CUarray hArray;                   
        } array;
        struct {
            CUmipmappedArray hMipmappedArray; 
        } mipmap;
        struct {
            CUdeviceptr devPtr;               
            CUarray_format format;            
            unsigned int numChannels;         
            size_t sizeInBytes;               
        } linear;
        struct {
            CUdeviceptr devPtr;               
            CUarray_format format;            
            unsigned int numChannels;         
            size_t width;                     
            size_t height;                    
            size_t pitchInBytes;              
        } pitch2D;
        struct {
            int reserved[32];
        } reserved;
    } res;

    unsigned int flags;                       
} CUDA_RESOURCE_DESC_v1;
typedef CUDA_RESOURCE_DESC_v1 CUDA_RESOURCE_DESC;




typedef struct CUDA_TEXTURE_DESC_st {
    CUaddress_mode addressMode[3];  
    CUfilter_mode filterMode;       
    unsigned int flags;             
    unsigned int maxAnisotropy;     
    CUfilter_mode mipmapFilterMode; 
    float mipmapLevelBias;          
    float minMipmapLevelClamp;      
    float maxMipmapLevelClamp;      
    float borderColor[4];           
    int reserved[12];
} CUDA_TEXTURE_DESC_v1;
typedef CUDA_TEXTURE_DESC_v1 CUDA_TEXTURE_DESC;




typedef enum CUresourceViewFormat_enum
{
    CU_RES_VIEW_FORMAT_NONE          = 0x00, 
    CU_RES_VIEW_FORMAT_UINT_1X8      = 0x01, 
    CU_RES_VIEW_FORMAT_UINT_2X8      = 0x02, 
    CU_RES_VIEW_FORMAT_UINT_4X8      = 0x03, 
    CU_RES_VIEW_FORMAT_SINT_1X8      = 0x04, 
    CU_RES_VIEW_FORMAT_SINT_2X8      = 0x05, 
    CU_RES_VIEW_FORMAT_SINT_4X8      = 0x06, 
    CU_RES_VIEW_FORMAT_UINT_1X16     = 0x07, 
    CU_RES_VIEW_FORMAT_UINT_2X16     = 0x08, 
    CU_RES_VIEW_FORMAT_UINT_4X16     = 0x09, 
    CU_RES_VIEW_FORMAT_SINT_1X16     = 0x0a, 
    CU_RES_VIEW_FORMAT_SINT_2X16     = 0x0b, 
    CU_RES_VIEW_FORMAT_SINT_4X16     = 0x0c, 
    CU_RES_VIEW_FORMAT_UINT_1X32     = 0x0d, 
    CU_RES_VIEW_FORMAT_UINT_2X32     = 0x0e, 
    CU_RES_VIEW_FORMAT_UINT_4X32     = 0x0f, 
    CU_RES_VIEW_FORMAT_SINT_1X32     = 0x10, 
    CU_RES_VIEW_FORMAT_SINT_2X32     = 0x11, 
    CU_RES_VIEW_FORMAT_SINT_4X32     = 0x12, 
    CU_RES_VIEW_FORMAT_FLOAT_1X16    = 0x13, 
    CU_RES_VIEW_FORMAT_FLOAT_2X16    = 0x14, 
    CU_RES_VIEW_FORMAT_FLOAT_4X16    = 0x15, 
    CU_RES_VIEW_FORMAT_FLOAT_1X32    = 0x16, 
    CU_RES_VIEW_FORMAT_FLOAT_2X32    = 0x17, 
    CU_RES_VIEW_FORMAT_FLOAT_4X32    = 0x18, 
    CU_RES_VIEW_FORMAT_UNSIGNED_BC1  = 0x19, 
    CU_RES_VIEW_FORMAT_UNSIGNED_BC2  = 0x1a, 
    CU_RES_VIEW_FORMAT_UNSIGNED_BC3  = 0x1b, 
    CU_RES_VIEW_FORMAT_UNSIGNED_BC4  = 0x1c, 
    CU_RES_VIEW_FORMAT_SIGNED_BC4    = 0x1d, 
    CU_RES_VIEW_FORMAT_UNSIGNED_BC5  = 0x1e, 
    CU_RES_VIEW_FORMAT_SIGNED_BC5    = 0x1f, 
    CU_RES_VIEW_FORMAT_UNSIGNED_BC6H = 0x20, 
    CU_RES_VIEW_FORMAT_SIGNED_BC6H   = 0x21, 
    CU_RES_VIEW_FORMAT_UNSIGNED_BC7  = 0x22  
} CUresourceViewFormat;




typedef struct CUDA_RESOURCE_VIEW_DESC_st
{
    CUresourceViewFormat format;   
    size_t width;                  
    size_t height;                 
    size_t depth;                  
    unsigned int firstMipmapLevel; 
    unsigned int lastMipmapLevel;  
    unsigned int firstLayer;       
    unsigned int lastLayer;        
    unsigned int reserved[16];
} CUDA_RESOURCE_VIEW_DESC_v1;
typedef CUDA_RESOURCE_VIEW_DESC_v1 CUDA_RESOURCE_VIEW_DESC;




typedef struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st {
    unsigned long long p2pToken;
    unsigned int vaSpaceToken;
} CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1;
typedef CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1 CUDA_POINTER_ATTRIBUTE_P2P_TOKENS;





typedef enum CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum {
    CU_POINTER_ATTRIBUTE_ACCESS_FLAG_NONE      = 0x0,   
    CU_POINTER_ATTRIBUTE_ACCESS_FLAG_READ      = 0x1,   
    CU_POINTER_ATTRIBUTE_ACCESS_FLAG_READWRITE = 0x3    
} CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS;




typedef struct CUDA_LAUNCH_PARAMS_st {
    CUfunction function;         
    unsigned int gridDimX;       
    unsigned int gridDimY;       
    unsigned int gridDimZ;       
    unsigned int blockDimX;      
    unsigned int blockDimY;      
    unsigned int blockDimZ;      
    unsigned int sharedMemBytes; 
    CUstream hStream;            
    void **kernelParams;         
} CUDA_LAUNCH_PARAMS_v1;
typedef CUDA_LAUNCH_PARAMS_v1 CUDA_LAUNCH_PARAMS;




typedef enum CUexternalMemoryHandleType_enum {
    


    CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD          = 1,
    


    CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32       = 2,
    


    CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT   = 3,
    


    CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP         = 4,
    


    CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE     = 5,
    


    CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE     = 6,
    


    CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE_KMT = 7,
    


    CU_EXTERNAL_MEMORY_HANDLE_TYPE_NVSCIBUF = 8
} CUexternalMemoryHandleType;








































typedef struct CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st {
    


    CUexternalMemoryHandleType type;
    union {
        




        int fd;
        














        struct {
            


            void *handle;
            



            const void *name;
        } win32;
        



        const void *nvSciBufObject;
    } handle;
    


    unsigned long long size;
    


    unsigned int flags;
    unsigned int reserved[16];
} CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1;
typedef CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1 CUDA_EXTERNAL_MEMORY_HANDLE_DESC;




typedef struct CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st {
    


    unsigned long long offset;
    


    unsigned long long size;
    


    unsigned int flags;
    unsigned int reserved[16];
} CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1;
typedef CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1 CUDA_EXTERNAL_MEMORY_BUFFER_DESC;




typedef struct CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st {
    



    unsigned long long offset;
    


    CUDA_ARRAY3D_DESCRIPTOR arrayDesc;
    


    unsigned int numLevels;
    unsigned int reserved[16];
} CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1;
typedef CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1 CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC;




typedef enum CUexternalSemaphoreHandleType_enum {
    


    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD             = 1,
    


    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32          = 2,
    


    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT      = 3,
    


    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE           = 4,
    


    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE           = 5,
    


	CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_NVSCISYNC             = 6,
    


    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX     = 7,
    


    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX_KMT = 8,
    


    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_FD = 9,
    


    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_WIN32 = 10
} CUexternalSemaphoreHandleType;




typedef struct CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st {
    


    CUexternalSemaphoreHandleType type;
    union {
        





        int fd;
        














        struct {
            


            void *handle;
            



            const void *name;
        } win32;
        


        const void* nvSciSyncObj;
    } handle;
    


    unsigned int flags;
    unsigned int reserved[16];
} CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1;
typedef CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1 CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC;




typedef struct CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st {
    struct {
        


        struct {
            


            unsigned long long value;
        } fence;
        union {
            



            void *fence;
            unsigned long long reserved;
        } nvSciSync;
        


        struct {
            


            unsigned long long key;
        } keyedMutex;
        unsigned int reserved[12];
    } params;
    









    unsigned int flags;
    unsigned int reserved[16];
} CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1;
typedef CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1 CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS;




typedef struct CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st {
    struct {
        


        struct {
            


            unsigned long long value;
        } fence;
        



        union {
            void *fence;
            unsigned long long reserved;
        } nvSciSync;
        


        struct {
            


            unsigned long long key;
            


            unsigned int timeoutMs;
        } keyedMutex;
        unsigned int reserved[10];
    } params;
    








    unsigned int flags;
    unsigned int reserved[16];
} CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1;
typedef CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1 CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS;




typedef struct CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st {
    CUexternalSemaphore* extSemArray;                         
    const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS* paramsArray; 
    unsigned int numExtSems;                                  
} CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1;
typedef CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1 CUDA_EXT_SEM_SIGNAL_NODE_PARAMS;




typedef struct CUDA_EXT_SEM_WAIT_NODE_PARAMS_st {
    CUexternalSemaphore* extSemArray;                       
    const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS* paramsArray; 
    unsigned int numExtSems;                                
} CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1;
typedef CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1 CUDA_EXT_SEM_WAIT_NODE_PARAMS;

typedef unsigned long long CUmemGenericAllocationHandle_v1;
typedef CUmemGenericAllocationHandle_v1 CUmemGenericAllocationHandle;




typedef enum CUmemAllocationHandleType_enum {
    CU_MEM_HANDLE_TYPE_NONE                  = 0x0,  
    CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR = 0x1,  
    CU_MEM_HANDLE_TYPE_WIN32                 = 0x2,  
    CU_MEM_HANDLE_TYPE_WIN32_KMT             = 0x4,  
    CU_MEM_HANDLE_TYPE_MAX                   = 0x7FFFFFFF
} CUmemAllocationHandleType;




typedef enum CUmemAccess_flags_enum {
    CU_MEM_ACCESS_FLAGS_PROT_NONE        = 0x0,  
    CU_MEM_ACCESS_FLAGS_PROT_READ        = 0x1,  
    CU_MEM_ACCESS_FLAGS_PROT_READWRITE   = 0x3,  
    CU_MEM_ACCESS_FLAGS_PROT_MAX         = 0x7FFFFFFF
} CUmemAccess_flags;




typedef enum CUmemLocationType_enum {
    CU_MEM_LOCATION_TYPE_INVALID = 0x0,
    CU_MEM_LOCATION_TYPE_DEVICE  = 0x1,  
    CU_MEM_LOCATION_TYPE_MAX     = 0x7FFFFFFF
} CUmemLocationType;




typedef enum CUmemAllocationType_enum {
    CU_MEM_ALLOCATION_TYPE_INVALID = 0x0,

    


    CU_MEM_ALLOCATION_TYPE_PINNED  = 0x1,
    CU_MEM_ALLOCATION_TYPE_MAX     = 0x7FFFFFFF
} CUmemAllocationType;




typedef enum CUmemAllocationGranularity_flags_enum {
    CU_MEM_ALLOC_GRANULARITY_MINIMUM     = 0x0,     
    CU_MEM_ALLOC_GRANULARITY_RECOMMENDED = 0x1      
} CUmemAllocationGranularity_flags;




typedef enum CUarraySparseSubresourceType_enum {
    CU_ARRAY_SPARSE_SUBRESOURCE_TYPE_SPARSE_LEVEL = 0,
    CU_ARRAY_SPARSE_SUBRESOURCE_TYPE_MIPTAIL = 1
} CUarraySparseSubresourceType;




typedef enum CUmemOperationType_enum {
    CU_MEM_OPERATION_TYPE_MAP = 1,
    CU_MEM_OPERATION_TYPE_UNMAP = 2
} CUmemOperationType;




typedef enum CUmemHandleType_enum {
    CU_MEM_HANDLE_TYPE_GENERIC = 0
} CUmemHandleType;




typedef struct CUarrayMapInfo_st {    
    CUresourcetype resourceType;                    

    union {
        CUmipmappedArray mipmap;
        CUarray array;
    } resource;

    CUarraySparseSubresourceType subresourceType;   

    union {
        struct {
            unsigned int level;                                 
            unsigned int layer;                     
            unsigned int offsetX;                   
            unsigned int offsetY;                   
            unsigned int offsetZ;                               
            unsigned int extentWidth;               
            unsigned int extentHeight;              
            unsigned int extentDepth;               
        } sparseLevel;
        struct {
            unsigned int layer;                     
            unsigned long long offset;              
            unsigned long long size;                
        } miptail;
    } subresource;
    
    CUmemOperationType memOperationType;            
    CUmemHandleType memHandleType;                  

    union {
        CUmemGenericAllocationHandle memHandle;
    } memHandle;
    
    unsigned long long offset;                      
    unsigned int deviceBitMask;                     
    unsigned int flags;                             
    unsigned int reserved[2];                       
} CUarrayMapInfo_v1;
typedef CUarrayMapInfo_v1 CUarrayMapInfo;




typedef struct CUmemLocation_st {
    CUmemLocationType type; 
    int id;                 
} CUmemLocation_v1;
typedef CUmemLocation_v1 CUmemLocation;




typedef enum CUmemAllocationCompType_enum {
    CU_MEM_ALLOCATION_COMP_NONE = 0x0, 
    CU_MEM_ALLOCATION_COMP_GENERIC = 0x1 
} CUmemAllocationCompType;









typedef struct CUmemAllocationProp_st {
    
    CUmemAllocationType type;
    
    CUmemAllocationHandleType requestedHandleTypes;
    
    CUmemLocation location;
    






    void *win32HandleMetaData;
    struct {
         









         unsigned char compressionType;
         unsigned char gpuDirectRDMACapable;
         
         unsigned short usage;
         unsigned char reserved[4];
    } allocFlags;
} CUmemAllocationProp_v1;
typedef CUmemAllocationProp_v1 CUmemAllocationProp;




typedef struct CUmemAccessDesc_st {
    CUmemLocation location;        
    CUmemAccess_flags flags;       
} CUmemAccessDesc_v1;
typedef CUmemAccessDesc_v1 CUmemAccessDesc;

typedef enum CUgraphExecUpdateResult_enum {
    CU_GRAPH_EXEC_UPDATE_SUCCESS                     = 0x0, 
    CU_GRAPH_EXEC_UPDATE_ERROR                       = 0x1, 
    CU_GRAPH_EXEC_UPDATE_ERROR_TOPOLOGY_CHANGED      = 0x2, 
    CU_GRAPH_EXEC_UPDATE_ERROR_NODE_TYPE_CHANGED     = 0x3, 
    CU_GRAPH_EXEC_UPDATE_ERROR_FUNCTION_CHANGED      = 0x4, 
    CU_GRAPH_EXEC_UPDATE_ERROR_PARAMETERS_CHANGED    = 0x5, 
    CU_GRAPH_EXEC_UPDATE_ERROR_NOT_SUPPORTED         = 0x6, 
    CU_GRAPH_EXEC_UPDATE_ERROR_UNSUPPORTED_FUNCTION_CHANGE = 0x7 
} CUgraphExecUpdateResult;




typedef enum CUmemPool_attribute_enum {
    







    CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES = 1,

    




    CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC,

    





    CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES,

    







    CU_MEMPOOL_ATTR_RELEASE_THRESHOLD,

    



    CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT,

    




    CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH,

    



    CU_MEMPOOL_ATTR_USED_MEM_CURRENT,

    




    CU_MEMPOOL_ATTR_USED_MEM_HIGH
} CUmemPool_attribute;




typedef struct CUmemPoolProps_st {
    CUmemAllocationType allocType;         
    CUmemAllocationHandleType handleTypes; 
    CUmemLocation location;                
    





    void *win32SecurityAttributes;
    unsigned char reserved[64]; 
} CUmemPoolProps_v1;
typedef CUmemPoolProps_v1 CUmemPoolProps;




typedef struct CUmemPoolPtrExportData_st {
    unsigned char reserved[64];
} CUmemPoolPtrExportData_v1;
typedef CUmemPoolPtrExportData_v1 CUmemPoolPtrExportData;




typedef struct CUDA_MEM_ALLOC_NODE_PARAMS_st {
    



    CUmemPoolProps poolProps;
    const CUmemAccessDesc *accessDescs; 
    size_t accessDescCount; 
    size_t bytesize; 
    CUdeviceptr dptr; 
} CUDA_MEM_ALLOC_NODE_PARAMS;

typedef enum CUgraphMem_attribute_enum {
    



    CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT,

    




    CU_GRAPH_MEM_ATTR_USED_MEM_HIGH,

    




    CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT,

    




    CU_GRAPH_MEM_ATTR_RESERVED_MEM_HIGH
} CUgraphMem_attribute;


























































































 



















































typedef enum CUflushGPUDirectRDMAWritesOptions_enum {
    CU_FLUSH_GPU_DIRECT_RDMA_WRITES_OPTION_HOST   = 1<<0, 
    CU_FLUSH_GPU_DIRECT_RDMA_WRITES_OPTION_MEMOPS = 1<<1  
} CUflushGPUDirectRDMAWritesOptions;




typedef enum CUGPUDirectRDMAWritesOrdering_enum {
    CU_GPU_DIRECT_RDMA_WRITES_ORDERING_NONE        = 0,   
    CU_GPU_DIRECT_RDMA_WRITES_ORDERING_OWNER       = 100, 
    CU_GPU_DIRECT_RDMA_WRITES_ORDERING_ALL_DEVICES = 200  
} CUGPUDirectRDMAWritesOrdering;




typedef enum CUflushGPUDirectRDMAWritesScope_enum {
    CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TO_OWNER       = 100, 
    CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TO_ALL_DEVICES = 200  
} CUflushGPUDirectRDMAWritesScope;
 



typedef enum CUflushGPUDirectRDMAWritesTarget_enum {
    CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TARGET_CURRENT_CTX = 0 
} CUflushGPUDirectRDMAWritesTarget;




typedef enum CUgraphDebugDot_flags_enum {
    CU_GRAPH_DEBUG_DOT_FLAGS_VERBOSE                        = 1<<0,  
    CU_GRAPH_DEBUG_DOT_FLAGS_RUNTIME_TYPES                  = 1<<1,  
    CU_GRAPH_DEBUG_DOT_FLAGS_KERNEL_NODE_PARAMS             = 1<<2,  
    CU_GRAPH_DEBUG_DOT_FLAGS_MEMCPY_NODE_PARAMS             = 1<<3,  
    CU_GRAPH_DEBUG_DOT_FLAGS_MEMSET_NODE_PARAMS             = 1<<4,  
    CU_GRAPH_DEBUG_DOT_FLAGS_HOST_NODE_PARAMS               = 1<<5,  
    CU_GRAPH_DEBUG_DOT_FLAGS_EVENT_NODE_PARAMS              = 1<<6,  
    CU_GRAPH_DEBUG_DOT_FLAGS_EXT_SEMAS_SIGNAL_NODE_PARAMS   = 1<<7,  
    CU_GRAPH_DEBUG_DOT_FLAGS_EXT_SEMAS_WAIT_NODE_PARAMS     = 1<<8,  
    CU_GRAPH_DEBUG_DOT_FLAGS_KERNEL_NODE_ATTRIBUTES         = 1<<9,  
    CU_GRAPH_DEBUG_DOT_FLAGS_HANDLES                        = 1<<10, 
    CU_GRAPH_DEBUG_DOT_FLAGS_MEM_ALLOC_NODE_PARAMS          = 1<<11, 
    CU_GRAPH_DEBUG_DOT_FLAGS_MEM_FREE_NODE_PARAMS           = 1<<12  
} CUgraphDebugDot_flags;




typedef enum CUuserObject_flags_enum {
    CU_USER_OBJECT_NO_DESTRUCTOR_SYNC = 1  
} CUuserObject_flags;




typedef enum CUuserObjectRetain_flags_enum {
    CU_GRAPH_USER_OBJECT_MOVE = 1  
} CUuserObjectRetain_flags;




typedef enum CUgraphInstantiate_flags_enum {
    CUDA_GRAPH_INSTANTIATE_FLAG_AUTO_FREE_ON_LAUNCH  = 1  
} CUgraphInstantiate_flags;

 





#line 3343 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"





#line 3349 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"
































CUresult __stdcall cuGetErrorString(CUresult error, const char **pStr);




















CUresult __stdcall cuGetErrorName(CUresult error, const char **pStr);

 































CUresult __stdcall cuInit(unsigned int Flags);

 



































CUresult __stdcall cuDriverGetVersion(int *driverVersion);

 








































CUresult __stdcall cuDeviceGet(CUdevice *device, int ordinal);




























CUresult __stdcall cuDeviceGetCount(int *count);































CUresult __stdcall cuDeviceGetName(char *name, int len, CUdevice dev);
































CUresult __stdcall cuDeviceGetUuid(CUuuid *uuid, CUdevice dev);




























CUresult __stdcall cuDeviceGetUuid_v2(CUuuid *uuid, CUdevice dev);




























CUresult __stdcall cuDeviceGetLuid(char *luid, unsigned int *deviceNodeMask, CUdevice dev);




























CUresult __stdcall cuDeviceTotalMem_v2(size_t *bytes, CUdevice dev);






























CUresult __stdcall cuDeviceGetTexture1DLinearMaxWidth(size_t *maxWidthInElements, CUarray_format format, unsigned numChannels, CUdevice dev);





























































































































































































































CUresult __stdcall cuDeviceGetAttribute(int *pi, CUdevice_attribute attrib, CUdevice dev);
















































CUresult __stdcall cuDeviceGetNvSciSyncAttributes(void *nvSciSyncAttrList, CUdevice dev, int flags);

















CUresult __stdcall cuDeviceSetMemPool(CUdevice dev, CUmemoryPool pool);















CUresult __stdcall cuDeviceGetMemPool(CUmemoryPool *pool, CUdevice dev);

















CUresult __stdcall cuDeviceGetDefaultMemPool(CUmemoryPool *pool_out, CUdevice dev);






























CUresult __stdcall cuFlushGPUDirectRDMAWrites(CUflushGPUDirectRDMAWritesTarget target, CUflushGPUDirectRDMAWritesScope scope);

 











































































__declspec(deprecated) CUresult __stdcall cuDeviceGetProperties(CUdevprop *prop, CUdevice dev);

































__declspec(deprecated) CUresult __stdcall cuDeviceComputeCapability(int *major, int *minor, CUdevice dev);

 
































































CUresult __stdcall cuDevicePrimaryCtxRetain(CUcontext *pctx, CUdevice dev);








































CUresult __stdcall cuDevicePrimaryCtxRelease_v2(CUdevice dev);
































































CUresult __stdcall cuDevicePrimaryCtxSetFlags_v2(CUdevice dev, unsigned int flags);

























CUresult __stdcall cuDevicePrimaryCtxGetState(CUdevice dev, unsigned int *flags, int *active);







































CUresult __stdcall cuDevicePrimaryCtxReset_v2(CUdevice dev);

 






























CUresult __stdcall cuDeviceGetExecAffinitySupport(int *pi, CUexecAffinityType type, CUdevice dev);












































































































CUresult __stdcall cuCtxCreate_v2(CUcontext *pctx, unsigned int flags, CUdevice dev);










































































































CUresult __stdcall cuCtxCreate_v3(CUcontext *pctx, CUexecAffinityParam *paramsArray, int numParams, unsigned int flags, CUdevice dev);












































CUresult __stdcall cuCtxDestroy_v2(CUcontext ctx);

































CUresult __stdcall cuCtxPushCurrent_v2(CUcontext ctx);

































CUresult __stdcall cuCtxPopCurrent_v2(CUcontext *pctx);





























CUresult __stdcall cuCtxSetCurrent(CUcontext ctx);






















CUresult __stdcall cuCtxGetCurrent(CUcontext *pctx);





























CUresult __stdcall cuCtxGetDevice(CUdevice *device);



























CUresult __stdcall cuCtxGetFlags(unsigned int *flags);





























CUresult __stdcall cuCtxSynchronize(void);


































































































CUresult __stdcall cuCtxSetLimit(CUlimit limit, size_t value);









































CUresult __stdcall cuCtxGetLimit(size_t *pvalue, CUlimit limit);











































CUresult __stdcall cuCtxGetCacheConfig(CUfunc_cache *pconfig);


















































CUresult __stdcall cuCtxSetCacheConfig(CUfunc_cache config);









































CUresult __stdcall cuCtxGetSharedMemConfig(CUsharedconfig *pConfig);




















































CUresult __stdcall cuCtxSetSharedMemConfig(CUsharedconfig config);





































CUresult __stdcall cuCtxGetApiVersion(CUcontext ctx, unsigned int *version);







































CUresult __stdcall cuCtxGetStreamPriorityRange(int *leastPriority, int *greatestPriority);















CUresult __stdcall cuCtxResetPersistingL2Cache(void);























CUresult __stdcall cuCtxGetExecAffinity(CUexecAffinityParam *pExecAffinity, CUexecAffinityType type);


 




















































__declspec(deprecated) CUresult __stdcall cuCtxAttach(CUcontext *pctx, unsigned int flags);



































__declspec(deprecated) CUresult __stdcall cuCtxDetach(CUcontext ctx);

 





















































CUresult __stdcall cuModuleLoad(CUmodule *module, const char *fname);





































CUresult __stdcall cuModuleLoadData(CUmodule *module, const void *image);











































CUresult __stdcall cuModuleLoadDataEx(CUmodule *module, const void *image, unsigned int numOptions, CUjit_option *options, void **optionValues);










































CUresult __stdcall cuModuleLoadFatBinary(CUmodule *module, const void *fatCubin);

























CUresult __stdcall cuModuleUnload(CUmodule hmod);





























CUresult __stdcall cuModuleGetFunction(CUfunction *hfunc, CUmodule hmod, const char *name);


































CUresult __stdcall cuModuleGetGlobal_v2(CUdeviceptr *dptr, size_t *bytes, CUmodule hmod, const char *name);

































CUresult __stdcall cuModuleGetTexRef(CUtexref *pTexRef, CUmodule hmod, const char *name);































CUresult __stdcall cuModuleGetSurfRef(CUsurfref *pSurfRef, CUmodule hmod, const char *name);







































CUresult __stdcall
cuLinkCreate_v2(unsigned int numOptions, CUjit_option *options, void **optionValues, CUlinkState *stateOut);




































CUresult __stdcall
cuLinkAddData_v2(CUlinkState state, CUjitInputType type, void *data, size_t size, const char *name,
    unsigned int numOptions, CUjit_option *options, void **optionValues);





































CUresult __stdcall
cuLinkAddFile_v2(CUlinkState state, CUjitInputType type, const char *path,
    unsigned int numOptions, CUjit_option *options, void **optionValues);
























CUresult __stdcall
cuLinkComplete(CUlinkState state, void **cubinOut, size_t *sizeOut);












CUresult __stdcall
cuLinkDestroy(CUlinkState state);

 












































CUresult __stdcall cuMemGetInfo_v2(size_t *free, size_t *total);

































CUresult __stdcall cuMemAlloc_v2(CUdeviceptr *dptr, size_t bytesize);





























































CUresult __stdcall cuMemAllocPitch_v2(CUdeviceptr *dptr, size_t *pPitch, size_t WidthInBytes, size_t Height, unsigned int ElementSizeBytes);





























CUresult __stdcall cuMemFree_v2(CUdeviceptr dptr);

































CUresult __stdcall cuMemGetAddressRange_v2(CUdeviceptr *pbase, size_t *psize, CUdeviceptr dptr);














































CUresult __stdcall cuMemAllocHost_v2(void **pp, size_t bytesize);





























CUresult __stdcall cuMemFreeHost(void *p);














































































CUresult __stdcall cuMemHostAlloc(void **pp, size_t bytesize, unsigned int Flags);




















































CUresult __stdcall cuMemHostGetDevicePointer_v2(CUdeviceptr *pdptr, void *p, unsigned int Flags);


























CUresult __stdcall cuMemHostGetFlags(unsigned int *pFlags, void *p);













































































































CUresult __stdcall cuMemAllocManaged(CUdeviceptr *dptr, size_t bytesize, unsigned int flags);




























CUresult __stdcall cuDeviceGetByPCIBusId(CUdevice *dev, const char *pciBusId);































CUresult __stdcall cuDeviceGetPCIBusId(char *pciBusId, int len, CUdevice dev);












































CUresult __stdcall cuIpcGetEventHandle(CUipcEventHandle *pHandle, CUevent event);







































CUresult __stdcall cuIpcOpenEventHandle(CUevent *phEvent, CUipcEventHandle handle);








































CUresult __stdcall cuIpcGetMemHandle(CUipcMemHandle *pHandle, CUdeviceptr dptr);

























































CUresult __stdcall cuIpcOpenMemHandle_v2(CUdeviceptr *pdptr, CUipcMemHandle handle, unsigned int Flags);

































CUresult __stdcall cuIpcCloseMemHandle(CUdeviceptr dptr);
























































































CUresult __stdcall cuMemHostRegister_v2(void *p, size_t bytesize, unsigned int Flags);

























CUresult __stdcall cuMemHostUnregister(void *p);







































CUresult __stdcall cuMemcpy(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount);





























CUresult __stdcall cuMemcpyPeer(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount);



































CUresult __stdcall cuMemcpyHtoD_v2(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount);



































CUresult __stdcall cuMemcpyDtoH_v2(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount);



































CUresult __stdcall cuMemcpyDtoD_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount);



































CUresult __stdcall cuMemcpyDtoA_v2(CUarray dstArray, size_t dstOffset, CUdeviceptr srcDevice, size_t ByteCount);





































CUresult __stdcall cuMemcpyAtoD_v2(CUdeviceptr dstDevice, CUarray srcArray, size_t srcOffset, size_t ByteCount);




































CUresult __stdcall cuMemcpyHtoA_v2(CUarray dstArray, size_t dstOffset, const void *srcHost, size_t ByteCount);




































CUresult __stdcall cuMemcpyAtoH_v2(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount);







































CUresult __stdcall cuMemcpyAtoA_v2(CUarray dstArray, size_t dstOffset, CUarray srcArray, size_t srcOffset, size_t ByteCount);



































































































































































CUresult __stdcall cuMemcpy2D_v2(const CUDA_MEMCPY2D *pCopy);

































































































































































CUresult __stdcall cuMemcpy2DUnaligned_v2(const CUDA_MEMCPY2D *pCopy);








































































































































































CUresult __stdcall cuMemcpy3D_v2(const CUDA_MEMCPY3D *pCopy);























CUresult __stdcall cuMemcpy3DPeer(const CUDA_MEMCPY3D_PEER *pCopy);












































CUresult __stdcall cuMemcpyAsync(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount, CUstream hStream);
































CUresult __stdcall cuMemcpyPeerAsync(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount, CUstream hStream);








































CUresult __stdcall cuMemcpyHtoDAsync_v2(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount, CUstream hStream);








































CUresult __stdcall cuMemcpyDtoHAsync_v2(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);








































CUresult __stdcall cuMemcpyDtoDAsync_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);









































CUresult __stdcall cuMemcpyHtoAAsync_v2(CUarray dstArray, size_t dstOffset, const void *srcHost, size_t ByteCount, CUstream hStream);









































CUresult __stdcall cuMemcpyAtoHAsync_v2(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount, CUstream hStream);








































































































































































CUresult __stdcall cuMemcpy2DAsync_v2(const CUDA_MEMCPY2D *pCopy, CUstream hStream);













































































































































































CUresult __stdcall cuMemcpy3DAsync_v2(const CUDA_MEMCPY3D *pCopy, CUstream hStream);

























CUresult __stdcall cuMemcpy3DPeerAsync(const CUDA_MEMCPY3D_PEER *pCopy, CUstream hStream);


































CUresult __stdcall cuMemsetD8_v2(CUdeviceptr dstDevice, unsigned char uc, size_t N);


































CUresult __stdcall cuMemsetD16_v2(CUdeviceptr dstDevice, unsigned short us, size_t N);


































CUresult __stdcall cuMemsetD32_v2(CUdeviceptr dstDevice, unsigned int ui, size_t N);







































CUresult __stdcall cuMemsetD2D8_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height);








































CUresult __stdcall cuMemsetD2D16_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height);








































CUresult __stdcall cuMemsetD2D32_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height);




































CUresult __stdcall cuMemsetD8Async(CUdeviceptr dstDevice, unsigned char uc, size_t N, CUstream hStream);




































CUresult __stdcall cuMemsetD16Async(CUdeviceptr dstDevice, unsigned short us, size_t N, CUstream hStream);



































CUresult __stdcall cuMemsetD32Async(CUdeviceptr dstDevice, unsigned int ui, size_t N, CUstream hStream);









































CUresult __stdcall cuMemsetD2D8Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height, CUstream hStream);










































CUresult __stdcall cuMemsetD2D16Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height, CUstream hStream);










































CUresult __stdcall cuMemsetD2D32Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height, CUstream hStream);







































































































CUresult __stdcall cuArrayCreate_v2(CUarray *pHandle, const CUDA_ARRAY_DESCRIPTOR *pAllocateArray);

































CUresult __stdcall cuArrayGetDescriptor_v2(CUDA_ARRAY_DESCRIPTOR *pArrayDescriptor, CUarray hArray);























CUresult __stdcall cuArrayGetSparseProperties(CUDA_ARRAY_SPARSE_PROPERTIES *sparseProperties, CUarray array);
























CUresult __stdcall cuMipmappedArrayGetSparseProperties(CUDA_ARRAY_SPARSE_PROPERTIES *sparseProperties, CUmipmappedArray mipmap);
































CUresult __stdcall cuArrayGetPlane(CUarray *pPlaneArray, CUarray hArray, unsigned int planeIdx);






























CUresult __stdcall cuArrayDestroy(CUarray hArray);



















































































































































































CUresult __stdcall cuArray3DCreate_v2(CUarray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR *pAllocateArray);





































CUresult __stdcall cuArray3DGetDescriptor_v2(CUDA_ARRAY3D_DESCRIPTOR *pArrayDescriptor, CUarray hArray);













































































































































CUresult __stdcall cuMipmappedArrayCreate(CUmipmappedArray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR *pMipmappedArrayDesc, unsigned int numMipmapLevels);





























CUresult __stdcall cuMipmappedArrayGetLevel(CUarray *pLevelArray, CUmipmappedArray hMipmappedArray, unsigned int level);
























CUresult __stdcall cuMipmappedArrayDestroy(CUmipmappedArray hMipmappedArray);

 






































CUresult __stdcall cuMemAddressReserve(CUdeviceptr *ptr, size_t size, size_t alignment, CUdeviceptr addr, unsigned long long flags);




















CUresult __stdcall cuMemAddressFree(CUdeviceptr ptr, size_t size);






































CUresult __stdcall cuMemCreate(CUmemGenericAllocationHandle *handle, size_t size, const CUmemAllocationProp *prop, unsigned long long flags);


























CUresult __stdcall cuMemRelease(CUmemGenericAllocationHandle handle);











































CUresult __stdcall cuMemMap(CUdeviceptr ptr, size_t size, size_t offset, CUmemGenericAllocationHandle handle, unsigned long long flags);

































































































































CUresult __stdcall cuMemMapArrayAsync(CUarrayMapInfo  *mapInfoList, unsigned int count, CUstream hStream);




























CUresult __stdcall cuMemUnmap(CUdeviceptr ptr, size_t size);
























CUresult __stdcall cuMemSetAccess(CUdeviceptr ptr, size_t size, const CUmemAccessDesc *desc, size_t count);


















CUresult __stdcall cuMemGetAccess(unsigned long long *flags, const CUmemLocation *location, CUdeviceptr ptr);
































CUresult __stdcall cuMemExportToShareableHandle(void *shareableHandle, CUmemGenericAllocationHandle handle, CUmemAllocationHandleType handleType, unsigned long long flags);


























CUresult __stdcall cuMemImportFromShareableHandle(CUmemGenericAllocationHandle *handle, void *osHandle, CUmemAllocationHandleType shHandleType);





















CUresult __stdcall cuMemGetAllocationGranularity(size_t *granularity, const CUmemAllocationProp *prop, CUmemAllocationGranularity_flags option);
















CUresult __stdcall cuMemGetAllocationPropertiesFromHandle(CUmemAllocationProp *prop, CUmemGenericAllocationHandle handle);























CUresult __stdcall cuMemRetainAllocationHandle(CUmemGenericAllocationHandle *handle, void *addr);

 






















































CUresult __stdcall cuMemFreeAsync(CUdeviceptr dptr, CUstream hStream);
































CUresult __stdcall cuMemAllocAsync(CUdeviceptr *dptr, size_t bytesize, CUstream hStream);

























CUresult __stdcall cuMemPoolTrimTo(CUmemoryPool pool, size_t minBytesToKeep);










































CUresult __stdcall cuMemPoolSetAttribute(CUmemoryPool pool, CUmemPool_attribute attr, void *value);














































CUresult __stdcall cuMemPoolGetAttribute(CUmemoryPool pool, CUmemPool_attribute attr, void *value);
















CUresult __stdcall cuMemPoolSetAccess(CUmemoryPool pool, const CUmemAccessDesc *map, size_t count);













CUresult __stdcall cuMemPoolGetAccess(CUmemAccess_flags *flags, CUmemoryPool memPool, CUmemLocation *location);





















CUresult __stdcall cuMemPoolCreate(CUmemoryPool *pool, const CUmemPoolProps *poolProps);






















CUresult __stdcall cuMemPoolDestroy(CUmemoryPool pool);





































CUresult __stdcall cuMemAllocFromPoolAsync(CUdeviceptr *dptr, size_t bytesize, CUmemoryPool pool, CUstream hStream);




























CUresult __stdcall cuMemPoolExportToShareableHandle(void *handle_out, CUmemoryPool pool, CUmemAllocationHandleType handleType, unsigned long long flags);























CUresult __stdcall cuMemPoolImportFromShareableHandle(
        CUmemoryPool *pool_out,
        void *handle,
        CUmemAllocationHandleType handleType,
        unsigned long long flags);



















CUresult __stdcall cuMemPoolExportPointer(CUmemPoolPtrExportData *shareData_out, CUdeviceptr ptr);




























CUresult __stdcall cuMemPoolImportPointer(CUdeviceptr *ptr_out, CUmemoryPool pool, CUmemPoolPtrExportData *shareData);

 


























































































































































































































































































CUresult __stdcall cuPointerGetAttribute(void *data, CUpointer_attribute attribute, CUdeviceptr ptr);



































































CUresult __stdcall cuMemPrefetchAsync(CUdeviceptr devPtr, size_t count, CUdevice dstDevice, CUstream hStream);

















































































































CUresult __stdcall cuMemAdvise(CUdeviceptr devPtr, size_t count, CUmem_advise advice, CUdevice device);

























































CUresult __stdcall cuMemRangeGetAttribute(void *data, size_t dataSize, CUmem_range_attribute attribute, CUdeviceptr devPtr, size_t count);







































CUresult __stdcall cuMemRangeGetAttributes(void **data, size_t *dataSizes, CUmem_range_attribute *attributes, size_t numAttributes, CUdeviceptr devPtr, size_t count);









































CUresult __stdcall cuPointerSetAttribute(const void *value, CUpointer_attribute attribute, CUdeviceptr ptr);
















































CUresult __stdcall cuPointerGetAttributes(unsigned int numAttributes, CUpointer_attribute *attributes, void **data, CUdeviceptr ptr);

 
















































CUresult __stdcall cuStreamCreate(CUstream *phStream, unsigned int Flags);
















































CUresult __stdcall cuStreamCreateWithPriority(CUstream *phStream, unsigned int flags, int priority);






























CUresult __stdcall cuStreamGetPriority(CUstream hStream, int *priority);



























CUresult __stdcall cuStreamGetFlags(CUstream hStream, unsigned int *flags);











































CUresult __stdcall cuStreamGetCtx(CUstream hStream, CUcontext *pctx);




































CUresult __stdcall cuStreamWaitEvent(CUstream hStream, CUevent hEvent, unsigned int Flags);










































































CUresult __stdcall cuStreamAddCallback(CUstream hStream, CUstreamCallback callback, void *userData, unsigned int flags);





































CUresult __stdcall cuStreamBeginCapture_v2(CUstream hStream, CUstreamCaptureMode mode);




















































CUresult __stdcall cuThreadExchangeStreamCaptureMode(CUstreamCaptureMode *mode);





























CUresult __stdcall cuStreamEndCapture(CUstream hStream, CUgraph *phGraph);







































CUresult __stdcall cuStreamIsCapturing(CUstream hStream, CUstreamCaptureStatus *captureStatus);



























CUresult __stdcall cuStreamGetCaptureInfo(CUstream hStream, CUstreamCaptureStatus *captureStatus_out, cuuint64_t *id_out);





















































CUresult __stdcall cuStreamGetCaptureInfo_v2(CUstream hStream, CUstreamCaptureStatus *captureStatus_out,
        cuuint64_t *id_out, CUgraph *graph_out, const CUgraphNode **dependencies_out, size_t *numDependencies_out);































CUresult __stdcall cuStreamUpdateCaptureDependencies(CUstream hStream, CUgraphNode *dependencies, size_t numDependencies, unsigned int flags);























































































CUresult __stdcall cuStreamAttachMemAsync(CUstream hStream, CUdeviceptr dptr, size_t length, unsigned int flags);





























CUresult __stdcall cuStreamQuery(CUstream hStream);




























CUresult __stdcall cuStreamSynchronize(CUstream hStream);





























CUresult __stdcall cuStreamDestroy_v2(CUstream hStream);



















CUresult __stdcall cuStreamCopyAttributes(CUstream dst, CUstream src);




















CUresult __stdcall cuStreamGetAttribute(CUstream hStream, CUstreamAttrID attr,
                                      CUstreamAttrValue *value_out);





















CUresult __stdcall cuStreamSetAttribute(CUstream hStream, CUstreamAttrID attr,
                                      const CUstreamAttrValue *value);

 





















































CUresult __stdcall cuEventCreate(CUevent *phEvent, unsigned int Flags);









































CUresult __stdcall cuEventRecord(CUevent hEvent, CUstream hStream);
















































CUresult __stdcall cuEventRecordWithFlags(CUevent hEvent, CUstream hStream, unsigned int flags);































CUresult __stdcall cuEventQuery(CUevent hEvent);






























CUresult __stdcall cuEventSynchronize(CUevent hEvent);




























CUresult __stdcall cuEventDestroy_v2(CUevent hEvent);











































CUresult __stdcall cuEventElapsedTime(float *pMilliseconds, CUevent hStart, CUevent hEnd);

 













 

































































































































































CUresult __stdcall cuImportExternalMemory(CUexternalMemory *extMem_out, const CUDA_EXTERNAL_MEMORY_HANDLE_DESC *memHandleDesc);





















































CUresult __stdcall cuExternalMemoryGetMappedBuffer(CUdeviceptr *devPtr, CUexternalMemory extMem, const CUDA_EXTERNAL_MEMORY_BUFFER_DESC *bufferDesc);




















































CUresult __stdcall cuExternalMemoryGetMappedMipmappedArray(CUmipmappedArray *mipmap, CUexternalMemory extMem, const CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC *mipmapDesc);





















CUresult __stdcall cuDestroyExternalMemory(CUexternalMemory extMem);




























































































































































CUresult __stdcall cuImportExternalSemaphore(CUexternalSemaphore *extSem_out, const CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC *semHandleDesc);


































































CUresult __stdcall cuSignalExternalSemaphoresAsync(const CUexternalSemaphore *extSemArray, const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS *paramsArray, unsigned int numExtSems, CUstream stream);











































































CUresult __stdcall cuWaitExternalSemaphoresAsync(const CUexternalSemaphore *extSemArray, const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS *paramsArray, unsigned int numExtSems, CUstream stream);




















CUresult __stdcall cuDestroyExternalSemaphore(CUexternalSemaphore extSem);

 

















































































CUresult __stdcall cuStreamWaitValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned int flags);


































CUresult __stdcall cuStreamWaitValue64(CUstream stream, CUdeviceptr addr, cuuint64_t value, unsigned int flags);


































CUresult __stdcall cuStreamWriteValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned int flags);

































CUresult __stdcall cuStreamWriteValue64(CUstream stream, CUdeviceptr addr, cuuint64_t value, unsigned int flags);


































CUresult __stdcall cuStreamBatchMemOp(CUstream stream, unsigned int count, CUstreamBatchMemOpParams *paramArray, unsigned int flags);

 






































































CUresult __stdcall cuFuncGetAttribute(int *pi, CUfunction_attribute attrib, CUfunction hfunc);













































CUresult __stdcall cuFuncSetAttribute(CUfunction hfunc, CUfunction_attribute attrib, int value);











































CUresult __stdcall cuFuncSetCacheConfig(CUfunction hfunc, CUfunc_cache config);



















































CUresult __stdcall cuFuncSetSharedMemConfig(CUfunction hfunc, CUsharedconfig config);

























CUresult __stdcall cuFuncGetModule(CUmodule *hmod, CUfunction hfunc);












































































































CUresult __stdcall cuLaunchKernel(CUfunction f,
                                unsigned int gridDimX,
                                unsigned int gridDimY,
                                unsigned int gridDimZ,
                                unsigned int blockDimX,
                                unsigned int blockDimY,
                                unsigned int blockDimZ,
                                unsigned int sharedMemBytes,
                                CUstream hStream,
                                void **kernelParams,
                                void **extra);













































































CUresult __stdcall cuLaunchCooperativeKernel(CUfunction f,
                                unsigned int gridDimX,
                                unsigned int gridDimY,
                                unsigned int gridDimZ,
                                unsigned int blockDimX,
                                unsigned int blockDimY,
                                unsigned int blockDimZ,
                                unsigned int sharedMemBytes,
                                CUstream hStream,
                                void **kernelParams);








































































































































__declspec(deprecated) CUresult __stdcall cuLaunchCooperativeKernelMultiDevice(CUDA_LAUNCH_PARAMS *launchParamsList, unsigned int numDevices, unsigned int flags);
































































CUresult __stdcall cuLaunchHostFunc(CUstream hStream, CUhostFn fn, void *userData);

 















































__declspec(deprecated) CUresult __stdcall cuFuncSetBlockShape(CUfunction hfunc, int x, int y, int z);

































__declspec(deprecated) CUresult __stdcall cuFuncSetSharedSize(CUfunction hfunc, unsigned int bytes);































__declspec(deprecated) CUresult __stdcall cuParamSetSize(CUfunction hfunc, unsigned int numbytes);
































__declspec(deprecated) CUresult __stdcall cuParamSeti(CUfunction hfunc, int offset, unsigned int value);
































__declspec(deprecated) CUresult __stdcall cuParamSetf(CUfunction hfunc, int offset, float value);


































__declspec(deprecated) CUresult __stdcall cuParamSetv(CUfunction hfunc, int offset, void *ptr, unsigned int numbytes);



















































__declspec(deprecated) CUresult __stdcall cuLaunch(CUfunction f);





















































__declspec(deprecated) CUresult __stdcall cuLaunchGrid(CUfunction f, int grid_width, int grid_height);





























































__declspec(deprecated) CUresult __stdcall cuLaunchGridAsync(CUfunction f, int grid_width, int grid_height, CUstream hStream);
























__declspec(deprecated) CUresult __stdcall cuParamSetTexRef(CUfunction hfunc, int texunit, CUtexref hTexRef);
 












































CUresult __stdcall cuGraphCreate(CUgraph *phGraph, unsigned int flags);



































































































CUresult __stdcall cuGraphAddKernelNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, const CUDA_KERNEL_NODE_PARAMS *nodeParams);































CUresult __stdcall cuGraphKernelNodeGetParams(CUgraphNode hNode, CUDA_KERNEL_NODE_PARAMS *nodeParams);






















CUresult __stdcall cuGraphKernelNodeSetParams(CUgraphNode hNode, const CUDA_KERNEL_NODE_PARAMS *nodeParams);















































CUresult __stdcall cuGraphAddMemcpyNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, const CUDA_MEMCPY3D *copyParams, CUcontext ctx);






















CUresult __stdcall cuGraphMemcpyNodeGetParams(CUgraphNode hNode, CUDA_MEMCPY3D *nodeParams);






















CUresult __stdcall cuGraphMemcpyNodeSetParams(CUgraphNode hNode, const CUDA_MEMCPY3D *nodeParams);









































CUresult __stdcall cuGraphAddMemsetNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, const CUDA_MEMSET_NODE_PARAMS *memsetParams, CUcontext ctx);






















CUresult __stdcall cuGraphMemsetNodeGetParams(CUgraphNode hNode, CUDA_MEMSET_NODE_PARAMS *nodeParams);






















CUresult __stdcall cuGraphMemsetNodeSetParams(CUgraphNode hNode, const CUDA_MEMSET_NODE_PARAMS *nodeParams);








































CUresult __stdcall cuGraphAddHostNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, const CUDA_HOST_NODE_PARAMS *nodeParams);






















CUresult __stdcall cuGraphHostNodeGetParams(CUgraphNode hNode, CUDA_HOST_NODE_PARAMS *nodeParams);






















CUresult __stdcall cuGraphHostNodeSetParams(CUgraphNode hNode, const CUDA_HOST_NODE_PARAMS *nodeParams);







































CUresult __stdcall cuGraphAddChildGraphNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, CUgraph childGraph);


























CUresult __stdcall cuGraphChildGraphNodeGetGraph(CUgraphNode hNode, CUgraph *phGraph);





































CUresult __stdcall cuGraphAddEmptyNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies);








































CUresult __stdcall cuGraphAddEventRecordNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, CUevent event);
 























CUresult __stdcall cuGraphEventRecordNodeGetEvent(CUgraphNode hNode, CUevent *event_out);
























CUresult __stdcall cuGraphEventRecordNodeSetEvent(CUgraphNode hNode, CUevent event);









































CUresult __stdcall cuGraphAddEventWaitNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, CUevent event);
























CUresult __stdcall cuGraphEventWaitNodeGetEvent(CUgraphNode hNode, CUevent *event_out);
























CUresult __stdcall cuGraphEventWaitNodeSetEvent(CUgraphNode hNode, CUevent event);















































CUresult __stdcall cuGraphAddExternalSemaphoresSignalNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *nodeParams);






























CUresult __stdcall cuGraphExternalSemaphoresSignalNodeGetParams(CUgraphNode hNode, CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *params_out);
























CUresult __stdcall cuGraphExternalSemaphoresSignalNodeSetParams(CUgraphNode hNode, const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *nodeParams);















































CUresult __stdcall cuGraphAddExternalSemaphoresWaitNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, const CUDA_EXT_SEM_WAIT_NODE_PARAMS *nodeParams);






























CUresult __stdcall cuGraphExternalSemaphoresWaitNodeGetParams(CUgraphNode hNode, CUDA_EXT_SEM_WAIT_NODE_PARAMS *params_out);
























CUresult __stdcall cuGraphExternalSemaphoresWaitNodeSetParams(CUgraphNode hNode, const CUDA_EXT_SEM_WAIT_NODE_PARAMS *nodeParams);









































































CUresult __stdcall cuGraphAddMemAllocNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, CUDA_MEM_ALLOC_NODE_PARAMS *nodeParams);
























CUresult __stdcall cuGraphMemAllocNodeGetParams(CUgraphNode hNode, CUDA_MEM_ALLOC_NODE_PARAMS *params_out);
























































CUresult __stdcall cuGraphAddMemFreeNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, CUdeviceptr dptr);





















CUresult __stdcall cuGraphMemFreeNodeGetParams(CUgraphNode hNode, CUdeviceptr *dptr_out);



















CUresult __stdcall cuDeviceGraphMemTrim(CUdevice device);



























CUresult __stdcall cuDeviceGetGraphMemAttribute(CUdevice device, CUgraphMem_attribute attr, void* value);
























CUresult __stdcall cuDeviceSetGraphMemAttribute(CUdevice device, CUgraphMem_attribute attr, void* value);
























CUresult __stdcall cuGraphClone(CUgraph *phGraphClone, CUgraph originalGraph);

























CUresult __stdcall cuGraphNodeFindInClone(CUgraphNode *phNode, CUgraphNode hOriginalNode, CUgraph hClonedGraph);






























CUresult __stdcall cuGraphNodeGetType(CUgraphNode hNode, CUgraphNodeType *type);






























CUresult __stdcall cuGraphGetNodes(CUgraph hGraph, CUgraphNode *nodes, size_t *numNodes);






























CUresult __stdcall cuGraphGetRootNodes(CUgraph hGraph, CUgraphNode *rootNodes, size_t *numRootNodes);

































CUresult __stdcall cuGraphGetEdges(CUgraph hGraph, CUgraphNode *from, CUgraphNode *to, size_t *numEdges);






























CUresult __stdcall cuGraphNodeGetDependencies(CUgraphNode hNode, CUgraphNode *dependencies, size_t *numDependencies);































CUresult __stdcall cuGraphNodeGetDependentNodes(CUgraphNode hNode, CUgraphNode *dependentNodes, size_t *numDependentNodes);




























CUresult __stdcall cuGraphAddDependencies(CUgraph hGraph, const CUgraphNode *from, const CUgraphNode *to, size_t numDependencies);































CUresult __stdcall cuGraphRemoveDependencies(CUgraph hGraph, const CUgraphNode *from, const CUgraphNode *to, size_t numDependencies);


























CUresult __stdcall cuGraphDestroyNode(CUgraphNode hNode);





































CUresult __stdcall cuGraphInstantiate_v2(CUgraphExec *phGraphExec, CUgraph hGraph, CUgraphNode *phErrorNode, char *logBuffer, size_t bufferSize);









































CUresult __stdcall cuGraphInstantiateWithFlags(CUgraphExec *phGraphExec, CUgraph hGraph, unsigned long long flags);








































CUresult __stdcall cuGraphExecKernelNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_KERNEL_NODE_PARAMS *nodeParams);













































CUresult __stdcall cuGraphExecMemcpyNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_MEMCPY3D *copyParams, CUcontext ctx);













































CUresult __stdcall cuGraphExecMemsetNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_MEMSET_NODE_PARAMS *memsetParams, CUcontext ctx);




































CUresult __stdcall cuGraphExecHostNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_HOST_NODE_PARAMS *nodeParams);










































CUresult __stdcall cuGraphExecChildGraphNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, CUgraph childGraph);







































CUresult __stdcall cuGraphExecEventRecordNodeSetEvent(CUgraphExec hGraphExec, CUgraphNode hNode, CUevent event);







































CUresult __stdcall cuGraphExecEventWaitNodeSetEvent(CUgraphExec hGraphExec, CUgraphNode hNode, CUevent event);










































CUresult __stdcall cuGraphExecExternalSemaphoresSignalNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *nodeParams);










































CUresult __stdcall cuGraphExecExternalSemaphoresWaitNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_EXT_SEM_WAIT_NODE_PARAMS *nodeParams);

























CUresult __stdcall cuGraphUpload(CUgraphExec hGraphExec, CUstream hStream);





























CUresult __stdcall cuGraphLaunch(CUgraphExec hGraphExec, CUstream hStream);
























CUresult __stdcall cuGraphExecDestroy(CUgraphExec hGraphExec);



















CUresult __stdcall cuGraphDestroy(CUgraph hGraph);








































































CUresult __stdcall cuGraphExecUpdate(CUgraphExec hGraphExec, CUgraph hGraph, CUgraphNode *hErrorNode_out, CUgraphExecUpdateResult *updateResult_out);



















CUresult __stdcall cuGraphKernelNodeCopyAttributes(CUgraphNode dst, CUgraphNode src);




















CUresult __stdcall cuGraphKernelNodeGetAttribute(CUgraphNode hNode, CUkernelNodeAttrID attr,
                                      CUkernelNodeAttrValue *value_out);
 



















CUresult __stdcall cuGraphKernelNodeSetAttribute(CUgraphNode hNode, CUkernelNodeAttrID attr,
                                      const CUkernelNodeAttrValue *value);


















CUresult __stdcall cuGraphDebugDotPrint(CUgraph hGraph, const char *path, unsigned int flags);



































CUresult __stdcall cuUserObjectCreate(CUuserObject *object_out, void *ptr, CUhostFn destroy,
                                    unsigned int initialRefcount, unsigned int flags);























CUresult __stdcall cuUserObjectRetain(CUuserObject object, unsigned int count);



























CUresult __stdcall cuUserObjectRelease(CUuserObject object, unsigned int count);



























CUresult __stdcall cuGraphRetainUserObject(CUgraph graph, CUuserObject object, unsigned int count, unsigned int flags);
























CUresult __stdcall cuGraphReleaseUserObject(CUgraph graph, CUuserObject object, unsigned int count);

 




































CUresult __stdcall cuOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize);









































CUresult __stdcall cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize, unsigned int flags);



















































CUresult __stdcall cuOccupancyMaxPotentialBlockSize(int *minGridSize, int *blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit);













































CUresult __stdcall cuOccupancyMaxPotentialBlockSizeWithFlags(int *minGridSize, int *blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit, unsigned int flags);






















CUresult __stdcall cuOccupancyAvailableDynamicSMemPerBlock(size_t *dynamicSmemSize, CUfunction func, int numBlocks, int blockSize);

 










































__declspec(deprecated) CUresult __stdcall cuTexRefSetArray(CUtexref hTexRef, CUarray hArray, unsigned int Flags);





























__declspec(deprecated) CUresult __stdcall cuTexRefSetMipmappedArray(CUtexref hTexRef, CUmipmappedArray hMipmappedArray, unsigned int Flags);













































__declspec(deprecated) CUresult __stdcall cuTexRefSetAddress_v2(size_t *ByteOffset, CUtexref hTexRef, CUdeviceptr dptr, size_t bytes);






















































__declspec(deprecated) CUresult __stdcall cuTexRefSetAddress2D_v3(CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR *desc, CUdeviceptr dptr, size_t Pitch);


































__declspec(deprecated) CUresult __stdcall cuTexRefSetFormat(CUtexref hTexRef, CUarray_format fmt, int NumPackedComponents);













































__declspec(deprecated) CUresult __stdcall cuTexRefSetAddressMode(CUtexref hTexRef, int dim, CUaddress_mode am);



































__declspec(deprecated) CUresult __stdcall cuTexRefSetFilterMode(CUtexref hTexRef, CUfilter_mode fm);



































__declspec(deprecated) CUresult __stdcall cuTexRefSetMipmapFilterMode(CUtexref hTexRef, CUfilter_mode fm);




























__declspec(deprecated) CUresult __stdcall cuTexRefSetMipmapLevelBias(CUtexref hTexRef, float bias);






























__declspec(deprecated) CUresult __stdcall cuTexRefSetMipmapLevelClamp(CUtexref hTexRef, float minMipmapLevelClamp, float maxMipmapLevelClamp);





























__declspec(deprecated) CUresult __stdcall cuTexRefSetMaxAnisotropy(CUtexref hTexRef, unsigned int maxAniso);



































__declspec(deprecated) CUresult __stdcall cuTexRefSetBorderColor(CUtexref hTexRef, float *pBorderColor);












































__declspec(deprecated) CUresult __stdcall cuTexRefSetFlags(CUtexref hTexRef, unsigned int Flags);


























__declspec(deprecated) CUresult __stdcall cuTexRefGetAddress_v2(CUdeviceptr *pdptr, CUtexref hTexRef);


























__declspec(deprecated) CUresult __stdcall cuTexRefGetArray(CUarray *phArray, CUtexref hTexRef);


























__declspec(deprecated) CUresult __stdcall cuTexRefGetMipmappedArray(CUmipmappedArray *phMipmappedArray, CUtexref hTexRef);



























__declspec(deprecated) CUresult __stdcall cuTexRefGetAddressMode(CUaddress_mode *pam, CUtexref hTexRef, int dim);

























__declspec(deprecated) CUresult __stdcall cuTexRefGetFilterMode(CUfilter_mode *pfm, CUtexref hTexRef);



























__declspec(deprecated) CUresult __stdcall cuTexRefGetFormat(CUarray_format *pFormat, int *pNumChannels, CUtexref hTexRef);

























__declspec(deprecated) CUresult __stdcall cuTexRefGetMipmapFilterMode(CUfilter_mode *pfm, CUtexref hTexRef);

























__declspec(deprecated) CUresult __stdcall cuTexRefGetMipmapLevelBias(float *pbias, CUtexref hTexRef);


























__declspec(deprecated) CUresult __stdcall cuTexRefGetMipmapLevelClamp(float *pminMipmapLevelClamp, float *pmaxMipmapLevelClamp, CUtexref hTexRef);

























__declspec(deprecated) CUresult __stdcall cuTexRefGetMaxAnisotropy(int *pmaxAniso, CUtexref hTexRef);




























__declspec(deprecated) CUresult __stdcall cuTexRefGetBorderColor(float *pBorderColor, CUtexref hTexRef);
























__declspec(deprecated) CUresult __stdcall cuTexRefGetFlags(unsigned int *pFlags, CUtexref hTexRef);
























__declspec(deprecated) CUresult __stdcall cuTexRefCreate(CUtexref *pTexRef);



















__declspec(deprecated) CUresult __stdcall cuTexRefDestroy(CUtexref hTexRef);

 









































__declspec(deprecated) CUresult __stdcall cuSurfRefSetArray(CUsurfref hSurfRef, CUarray hArray, unsigned int Flags);






















__declspec(deprecated) CUresult __stdcall cuSurfRefGetArray(CUarray *phArray, CUsurfref hSurfRef);

 




































































































































































































































CUresult __stdcall cuTexObjectCreate(CUtexObject *pTexObject, const CUDA_RESOURCE_DESC *pResDesc, const CUDA_TEXTURE_DESC *pTexDesc, const CUDA_RESOURCE_VIEW_DESC *pResViewDesc);



















CUresult __stdcall cuTexObjectDestroy(CUtexObject texObject);




















CUresult __stdcall cuTexObjectGetResourceDesc(CUDA_RESOURCE_DESC *pResDesc, CUtexObject texObject);




















CUresult __stdcall cuTexObjectGetTextureDesc(CUDA_TEXTURE_DESC *pTexDesc, CUtexObject texObject);





















CUresult __stdcall cuTexObjectGetResourceViewDesc(CUDA_RESOURCE_VIEW_DESC *pResViewDesc, CUtexObject texObject);

 








































CUresult __stdcall cuSurfObjectCreate(CUsurfObject *pSurfObject, const CUDA_RESOURCE_DESC *pResDesc);



















CUresult __stdcall cuSurfObjectDestroy(CUsurfObject surfObject);




















CUresult __stdcall cuSurfObjectGetResourceDesc(CUDA_RESOURCE_DESC *pResDesc, CUsurfObject surfObject);

 







































CUresult __stdcall cuDeviceCanAccessPeer(int *canAccessPeer, CUdevice dev, CUdevice peerDev);




















































CUresult __stdcall cuCtxEnablePeerAccess(CUcontext peerContext, unsigned int Flags);


























CUresult __stdcall cuCtxDisablePeerAccess(CUcontext peerContext);







































CUresult __stdcall cuDeviceGetP2PAttribute(int* value, CUdevice_P2PAttribute attrib, CUdevice srcDevice, CUdevice dstDevice);

 









































CUresult __stdcall cuGraphicsUnregisterResource(CUgraphicsResource resource);







































CUresult __stdcall cuGraphicsSubResourceGetMappedArray(CUarray *pArray, CUgraphicsResource resource, unsigned int arrayIndex, unsigned int mipLevel);






























CUresult __stdcall cuGraphicsResourceGetMappedMipmappedArray(CUmipmappedArray *pMipmappedArray, CUgraphicsResource resource);

































CUresult __stdcall cuGraphicsResourceGetMappedPointer_v2(CUdeviceptr *pDevPtr, size_t *pSize, CUgraphicsResource resource);








































CUresult __stdcall cuGraphicsResourceSetMapFlags_v2(CUgraphicsResource resource, unsigned int flags);







































CUresult __stdcall cuGraphicsMapResources(unsigned int count, CUgraphicsResource *resources, CUstream hStream);




































CUresult __stdcall cuGraphicsUnmapResources(unsigned int count, CUgraphicsResource *resources, CUstream hStream);

 































































CUresult __stdcall cuGetProcAddress(const char *symbol, void **pfn, int cudaVersion, cuuint64_t flags);

 

CUresult __stdcall cuGetExportTable(const void **ppExportTable, const CUuuid *pExportTableId);












































































































































































































































































































































#line 18971 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"









#line 18981 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"


}
#line 18985 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"





#line 18991 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"



#line 18995 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\cuda.h"
#line 40 "src/framework\\base/DLLImports.hpp"
#pragma warning(push,3)
#line 1 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\vector_functions.h"














































































































































































#line 176 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/../include\\vector_functions.h"
#line 42 "src/framework\\base/DLLImports.hpp"
#pragma warning(pop)
#line 44 "src/framework\\base/DLLImports.hpp"
















#line 61 "src/framework\\base/DLLImports.hpp"



namespace FW
{





#line 72 "src/framework\\base/DLLImports.hpp"
}









































#line 115 "src/framework\\base/DLLImports.hpp"



#line 119 "src/framework\\base/DLLImports.hpp"



#line 123 "src/framework\\base/DLLImports.hpp"
typedef size_t          CUsize_t;
#line 125 "src/framework\\base/DLLImports.hpp"














#line 140 "src/framework\\base/DLLImports.hpp"

































































































#line 238 "src/framework\\base/DLLImports.hpp"























































































































































#line 390 "src/framework\\base/DLLImports.hpp"


#line 30 "src/rt\\cuda/RendererKernels.hpp"
#line 1 "src/rt\\Util.hpp"



























#pragma once
#line 1 "src/framework\\base/Math.hpp"



























#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\\math.h"















#line 32 "src/framework\\base/Math.hpp"

namespace FW
{


__declspec(__device__) __inline F32    sqrt            (F32 a)         { return ::sqrtf(a); }
__declspec(__device__) __inline F64    sqrt            (F64 a)         { return ::sqrt(a); }
__declspec(__device__) __inline S32    abs             (S32 a)         { return (a >= 0) ? a : -a; }
__declspec(__device__) __inline S64    abs             (S64 a)         { return (a >= 0) ? a : -a; }
__declspec(__device__) __inline F32    abs             (F32 a)         { return ::fabsf(a); }
__declspec(__device__) __inline F64    abs             (F64 a)         { return ::abs(a); }
__declspec(__device__) __inline F64    pow             (F64 a, F64 b)  { return ::pow(a, b); }
__declspec(__device__) __inline F64    exp             (F64 a)         { return ::exp(a); }
__declspec(__device__) __inline F64    log             (F64 a)         { return ::log(a); }
__declspec(__device__) __inline F64    sin             (F64 a)         { return ::sin(a); }
__declspec(__device__) __inline F64    cos             (F64 a)         { return ::cos(a); }
__declspec(__device__) __inline F64    tan             (F64 a)         { return ::tan(a); }
__declspec(__device__) __inline F32    asin            (F32 a)         { return ::asinf(a); }
__declspec(__device__) __inline F64    asin            (F64 a)         { return ::asin(a); }
__declspec(__device__) __inline F32    acos            (F32 a)         { return ::acosf(a); }
__declspec(__device__) __inline F64    acos            (F64 a)         { return ::acos(a); }
__declspec(__device__) __inline F32    atan            (F32 a)         { return ::atanf(a); }
__declspec(__device__) __inline F64    atan            (F64 a)         { return ::atan(a); }
__declspec(__device__) __inline F64    atan2           (F64 y, F64 x)  { return ::atan2(y, x); }
__declspec(__device__) __inline F32    atan2           (F32 y, F32 x)  { return ::atan2f(y, x); }
__declspec(__device__) __inline F32    floor           (F32 a)         { return ::floorf(a); }
__declspec(__device__) __inline F64    floor           (F64 a)         { return ::floor(a); }
__declspec(__device__) __inline F32    ceil            (F32 a)         { return ::ceilf(a); }
__declspec(__device__) __inline F64    ceil            (F64 a)         { return ::ceil(a); }
__declspec(__device__) __inline U64    doubleToBits    (F64 a)         { return *(U64*)&a; }
__declspec(__device__) __inline F64    bitsToDouble    (U64 a)         { return *(F64*)&a; }


__declspec(__device__) __inline F32    pow             (F32 a, F32 b)  { return ::__powf(a, b); }
__declspec(__device__) __inline F32    exp             (F32 a)         { return ::__expf(a); }
__declspec(__device__) __inline F32    exp2            (F32 a)         { return ::exp2f(a); }
__declspec(__device__) __inline F64    exp2            (F64 a)         { return ::exp2(a); }
__declspec(__device__) __inline F32    log             (F32 a)         { return ::__logf(a); }
__declspec(__device__) __inline F32    log2            (F32 a)         { return ::__log2f(a); }
__declspec(__device__) __inline F64    log2            (F64 a)         { return ::log2(a); }
__declspec(__device__) __inline F32    sin             (F32 a)         { return ::__sinf(a); }
__declspec(__device__) __inline F32    cos             (F32 a)         { return ::__cosf(a); }
__declspec(__device__) __inline F32    tan             (F32 a)         { return ::__tanf(a); }
__declspec(__device__) __inline U32    floatToBits     (F32 a)         { return ::__float_as_int(a); }
__declspec(__device__) __inline F32    bitsToFloat     (U32 a)         { return ::__int_as_float(a); }
__declspec(__device__) __inline F32    exp2            (int a)         { return ::exp2f((F32)a); }
__declspec(__device__) __inline F32    fastMin         (F32 a, F32 b)  { return ::fminf(a, b); }
__declspec(__device__) __inline F32    fastMax         (F32 a, F32 b)  { return ::fmaxf(a, b); }
__declspec(__device__) __inline F64    fastMin         (F64 a, F64 b)  { return ::fmin(a, b); }
__declspec(__device__) __inline F64    fastMax         (F64 a, F64 b)  { return ::fmax(a, b); }


















#line 101 "src/framework\\base/Math.hpp"

__declspec(__device__) __inline F32    scale           (F32 a, int b)  { return a * exp2(b); }
__declspec(__device__) __inline int    popc8           (U32 mask);
__declspec(__device__) __inline int    popc16          (U32 mask);
__declspec(__device__) __inline int    popc32          (U32 mask);
__declspec(__device__) __inline int    popc64          (U64 mask);

__declspec(__device__) __inline F32    fastClamp       (F32 v, F32 lo, F32 hi) { return fastMin(fastMax(v, lo), hi); }
__declspec(__device__) __inline F64    fastClamp       (F64 v, F64 lo, F64 hi) { return fastMin(fastMax(v, lo), hi); }

template <class T> __declspec(__device__) __inline T sqr(const T& a) { return a * a; }
template <class T> __declspec(__device__) __inline T rcp(const T& a) { return (a) ? (T)1 / a : (T)0; }
template <class A, class B> __declspec(__device__) __inline A lerp(const A& a, const A& b, const B& t) { return (A)(a * ((B)1 - t) + b * t); }



template <class T, int L> class Vector;

template <class T, int L, class S> class VectorBase
{
public:
    __declspec(__device__) __inline                    VectorBase  (void)                      {}

    __declspec(__device__) __inline    const T*        getPtr      (void) const                { return ((S*)this)->getPtr(); }
    __declspec(__device__) __inline    T*              getPtr      (void)                      { return ((S*)this)->getPtr(); }
    __declspec(__device__) __inline    const T&        get         (int idx) const             { ((void)0); return getPtr()[idx]; }
    __declspec(__device__) __inline    T&              get         (int idx)                   { ((void)0); return getPtr()[idx]; }
    __declspec(__device__) __inline    T               set         (int idx, const T& a)       { T& slot = get(idx); T old = slot; slot = a; return old; }

    __declspec(__device__) __inline    void            set         (const T& a)                { T* tp = getPtr(); for (int i = 0; i < L; i++) tp[i] = a; }
    __declspec(__device__) __inline    void            set         (const T* ptr)              { ((void)0); T* tp = getPtr(); for (int i = 0; i < L; i++) tp[i] = ptr[i]; }
    __declspec(__device__) __inline    void            setZero     (void)                      { set((T)0); }



#line 137 "src/framework\\base/Math.hpp"

    __declspec(__device__) __inline    bool            isZero      (void) const                { const T* tp = getPtr(); for (int i = 0; i < L; i++) if (tp[i] != (T)0) return false; return true; }
    __declspec(__device__) __inline    T               lenSqr      (void) const                { const T* tp = getPtr(); T r = (T)0; for (int i = 0; i < L; i++) r += sqr(tp[i]); return r; }
    __declspec(__device__) __inline    T               length      (void) const                { return sqrt(lenSqr()); }
    __declspec(__device__) __inline    S               normalized  (T len = (T)1) const        { return operator*(len * rcp(length())); }
    __declspec(__device__) __inline    void            normalize   (T len = (T)1)              { set(normalized(len)); }
    __declspec(__device__) __inline    T               min         (void) const                { const T* tp = getPtr(); T r = tp[0]; for (int i = 1; i < L; i++) r = FW::min(r, tp[i]); return r; }
    __declspec(__device__) __inline    T               max         (void) const                { const T* tp = getPtr(); T r = tp[0]; for (int i = 1; i < L; i++) r = FW::max(r, tp[i]); return r; }
    __declspec(__device__) __inline    T               sum         (void) const                { const T* tp = getPtr(); T r = tp[0]; for (int i = 1; i < L; i++) r += tp[i]; return r; }
    __declspec(__device__) __inline    S               abs         (void) const                { const T* tp = getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = FW::abs(tp[i]); return r; }

    __declspec(__device__) __inline    Vector<T, L + 1> toHomogeneous(void) const              { const T* tp = getPtr(); Vector<T, L + 1> r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i]; rp[L] = (T)1; return r; }
    __declspec(__device__) __inline    Vector<T, L - 1> toCartesian(void) const                { const T* tp = getPtr(); Vector<T, L - 1> r; T* rp = r.getPtr(); T c = rcp(tp[L - 1]); for (int i = 0; i < L - 1; i++) rp[i] = tp[i] * c; return r; }

    __declspec(__device__) __inline    const T&        operator[]  (int idx) const             { return get(idx); }
    __declspec(__device__) __inline    T&              operator[]  (int idx)                   { return get(idx); }

    __declspec(__device__) __inline    S&              operator=   (const T& a)                { set(a); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator+=  (const T& a)                { set(operator+(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator-=  (const T& a)                { set(operator-(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator*=  (const T& a)                { set(operator*(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator/=  (const T& a)                { set(operator/(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator%=  (const T& a)                { set(operator%(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator&=  (const T& a)                { set(operator&(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator|=  (const T& a)                { set(operator|(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator^=  (const T& a)                { set(operator^(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator<<= (const T& a)                { set(operator<<(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator>>= (const T& a)                { set(operator>>(a)); return *(S*)this; }

    __declspec(__device__) __inline    S               operator+   (void) const                { return *this; }
    __declspec(__device__) __inline    S               operator-   (void) const                { const T* tp = getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = -tp[i]; return r; }
    __declspec(__device__) __inline    S               operator~   (void) const                { const T* tp = getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = ~tp[i]; return r; }

    __declspec(__device__) __inline    S               operator+   (const T& a) const          { const T* tp = getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] + a; return r; }
    __declspec(__device__) __inline    S               operator-   (const T& a) const          { const T* tp = getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] - a; return r; }
    __declspec(__device__) __inline    S               operator*   (const T& a) const          { const T* tp = getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] * a; return r; }
    __declspec(__device__) __inline    S               operator/   (const T& a) const          { const T* tp = getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] / a; return r; }
    __declspec(__device__) __inline    S               operator%   (const T& a) const          { const T* tp = getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] % a; return r; }
    __declspec(__device__) __inline    S               operator&   (const T& a) const          { const T* tp = getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] & a; return r; }
    __declspec(__device__) __inline    S               operator|   (const T& a) const          { const T* tp = getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] | a; return r; }
    __declspec(__device__) __inline    S               operator^   (const T& a) const          { const T* tp = getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] ^ a; return r; }
    __declspec(__device__) __inline    S               operator<<  (const T& a) const          { const T* tp = getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] << a; return r; }
    __declspec(__device__) __inline    S               operator>>  (const T& a) const          { const T* tp = getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] >> a; return r; }

    template <class V> __declspec(__device__) __inline void    set         (const VectorBase<T, L, V>& v)          { set(v.getPtr()); }
    template <class V> __declspec(__device__) __inline T       dot         (const VectorBase<T, L, V>& v) const    { const T* tp = getPtr(); const T* vp = v.getPtr(); T r = (T)0; for (int i = 0; i < L; i++) r += tp[i] * vp[i]; return r; }
    template <class V> __declspec(__device__) __inline S       min         (const VectorBase<T, L, V>& v) const    { const T* tp = getPtr(); const T* vp = v.getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = FW::min(tp[i], vp[i]); return r; }
    template <class V> __declspec(__device__) __inline S       max         (const VectorBase<T, L, V>& v) const    { const T* tp = getPtr(); const T* vp = v.getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = FW::max(tp[i], vp[i]); return r; }
    template <class V, class W> __declspec(__device__) __inline S clamp    (const VectorBase<T, L, V>& lo, const VectorBase<T, L, W>& hi) const { const T* tp = getPtr(); const T* lop = lo.getPtr(); const T* hip = hi.getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = FW::clamp(tp[i], lop[i], hip[i]); return r; }

    template <class V> __declspec(__device__) __inline S&      operator=   (const VectorBase<T, L, V>& v)          { set(v); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator+=  (const VectorBase<T, L, V>& v)          { set(operator+(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator-=  (const VectorBase<T, L, V>& v)          { set(operator-(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator*=  (const VectorBase<T, L, V>& v)          { set(operator*(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator/=  (const VectorBase<T, L, V>& v)          { set(operator/(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator%=  (const VectorBase<T, L, V>& v)          { set(operator%(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator&=  (const VectorBase<T, L, V>& v)          { set(operator&(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator|=  (const VectorBase<T, L, V>& v)          { set(operator|(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator^=  (const VectorBase<T, L, V>& v)          { set(operator^(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator<<= (const VectorBase<T, L, V>& v)          { set(operator<<(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator>>= (const VectorBase<T, L, V>& v)          { set(operator>>(v)); return *(S*)this; }

    template <class V> __declspec(__device__) __inline S       operator+   (const VectorBase<T, L, V>& v) const    { const T* tp = getPtr(); const T* vp = v.getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] +  vp[i]; return r; }
    template <class V> __declspec(__device__) __inline S       operator-   (const VectorBase<T, L, V>& v) const    { const T* tp = getPtr(); const T* vp = v.getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] -  vp[i]; return r; }
    template <class V> __declspec(__device__) __inline S       operator*   (const VectorBase<T, L, V>& v) const    { const T* tp = getPtr(); const T* vp = v.getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] *  vp[i]; return r; }
    template <class V> __declspec(__device__) __inline S       operator/   (const VectorBase<T, L, V>& v) const    { const T* tp = getPtr(); const T* vp = v.getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] /  vp[i]; return r; }
    template <class V> __declspec(__device__) __inline S       operator%   (const VectorBase<T, L, V>& v) const    { const T* tp = getPtr(); const T* vp = v.getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] %  vp[i]; return r; }
    template <class V> __declspec(__device__) __inline S       operator&   (const VectorBase<T, L, V>& v) const    { const T* tp = getPtr(); const T* vp = v.getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] &  vp[i]; return r; }
    template <class V> __declspec(__device__) __inline S       operator|   (const VectorBase<T, L, V>& v) const    { const T* tp = getPtr(); const T* vp = v.getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] |  vp[i]; return r; }
    template <class V> __declspec(__device__) __inline S       operator^   (const VectorBase<T, L, V>& v) const    { const T* tp = getPtr(); const T* vp = v.getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] ^  vp[i]; return r; }
    template <class V> __declspec(__device__) __inline S       operator<<  (const VectorBase<T, L, V>& v) const    { const T* tp = getPtr(); const T* vp = v.getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] << vp[i]; return r; }
    template <class V> __declspec(__device__) __inline S       operator>>  (const VectorBase<T, L, V>& v) const    { const T* tp = getPtr(); const T* vp = v.getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = tp[i] >> vp[i]; return r; }

    template <class V> __declspec(__device__) __inline bool    operator==  (const VectorBase<T, L, V>& v) const    { const T* tp = getPtr(); const T* vp = v.getPtr(); for (int i = 0; i < L; i++) if (tp[i] != vp[i]) return false; return true; }
    template <class V> __declspec(__device__) __inline bool    operator!=  (const VectorBase<T, L, V>& v) const    { return (!operator==(v)); }
};



template <class T, int L> class Vector : public VectorBase<T, L, Vector<T, L> >
{
public:
    __declspec(__device__) __inline                    Vector      (void)                      { setZero(); }
    __declspec(__device__) __inline                    Vector      (T a)                       { set(a); }

    __declspec(__device__) __inline    const T*        getPtr      (void) const                { return m_values; }
    __declspec(__device__) __inline    T*              getPtr      (void)                      { return m_values; }
    static __declspec(__device__) __inline Vector      fromPtr     (const T* ptr)              { Vector v; v.set(ptr); return v; }

    template <class V> __declspec(__device__) __inline Vector(const VectorBase<T, L, V>& v) { set(v); }
    template <class V> __declspec(__device__) __inline Vector& operator=(const VectorBase<T, L, V>& v) { set(v); return *this; }

private:
    T               m_values[L];
};



class Vec2i : public VectorBase<S32, 2, Vec2i>, public int2
{
public:
    __declspec(__device__) __inline                    Vec2i       (void)                      { setZero(); }
    __declspec(__device__) __inline                    Vec2i       (S32 a)                     { set(a); }
    __declspec(__device__) __inline                    Vec2i       (S32 xx, S32 yy)            { x = xx; y = yy; }

    __declspec(__device__) __inline    const S32*      getPtr      (void) const                { return &x; }
    __declspec(__device__) __inline    S32*            getPtr      (void)                      { return &x; }
    static __declspec(__device__) __inline Vec2i       fromPtr     (const S32* ptr)            { return Vec2i(ptr[0], ptr[1]); }

    __declspec(__device__) __inline    Vec2i           perpendicular(void) const               { return Vec2i(-y, x); }

    template <class V> __declspec(__device__) __inline Vec2i(const VectorBase<S32, 2, V>& v) { set(v); }
    template <class V> __declspec(__device__) __inline Vec2i& operator=(const VectorBase<S32, 2, V>& v) { set(v); return *this; }
};



class Vec3i : public VectorBase<S32, 3, Vec3i>, public int3
{
public:
    __declspec(__device__) __inline                    Vec3i       (void)                      { setZero(); }
    __declspec(__device__) __inline                    Vec3i       (S32 a)                     { set(a); }
    __declspec(__device__) __inline                    Vec3i       (S32 xx, S32 yy, S32 zz)    { x = xx; y = yy; z = zz; }
    __declspec(__device__) __inline                    Vec3i       (const Vec2i& xy, S32 zz)   { x = xy.x; y = xy.y; z = zz; }

    __declspec(__device__) __inline    const S32*      getPtr      (void) const                { return &x; }
    __declspec(__device__) __inline    S32*            getPtr      (void)                      { return &x; }
    static __declspec(__device__) __inline Vec3i       fromPtr     (const S32* ptr)            { return Vec3i(ptr[0], ptr[1], ptr[2]); }

    __declspec(__device__) __inline    Vec2i           getXY       (void) const                { return Vec2i(x, y); }

    template <class V> __declspec(__device__) __inline Vec3i(const VectorBase<S32, 3, V>& v) { set(v); }
    template <class V> __declspec(__device__) __inline Vec3i& operator=(const VectorBase<S32, 3, V>& v) { set(v); return *this; }
};



class Vec4i : public VectorBase<S32, 4, Vec4i>, public int4
{
public:
    __declspec(__device__) __inline                    Vec4i       (void)                      { setZero(); }
    __declspec(__device__) __inline                    Vec4i       (S32 a)                     { set(a); }
    __declspec(__device__) __inline                    Vec4i       (S32 xx, S32 yy, S32 zz, S32 ww) { x = xx; y = yy; z = zz; w = ww; }
    __declspec(__device__) __inline                    Vec4i       (const Vec2i& xy, S32 zz, S32 ww) { x = xy.x; y = xy.y; z = zz; w = ww; }
    __declspec(__device__) __inline                    Vec4i       (const Vec3i& xyz, S32 ww)  { x = xyz.x; y = xyz.y; z = xyz.z; w = ww; }
    __declspec(__device__) __inline                    Vec4i       (const Vec2i& xy, const Vec2i& zw) { x = xy.x; y = xy.y; z = zw.x; w = zw.y; }

    __declspec(__device__) __inline    const S32*      getPtr      (void) const                { return &x; }
    __declspec(__device__) __inline    S32*            getPtr      (void)                      { return &x; }
    static __declspec(__device__) __inline Vec4i       fromPtr     (const S32* ptr)            { return Vec4i(ptr[0], ptr[1], ptr[2], ptr[3]); }

    __declspec(__device__) __inline    Vec2i           getXY       (void) const                { return Vec2i(x, y); }
    __declspec(__device__) __inline    Vec3i           getXYZ      (void) const                { return Vec3i(x, y, z); }
    __declspec(__device__) __inline    Vec3i           getXYW      (void) const                { return Vec3i(x, y, w); }

    template <class V> __declspec(__device__) __inline Vec4i(const VectorBase<S32, 4, V>& v) { set(v); }
    template <class V> __declspec(__device__) __inline Vec4i& operator=(const VectorBase<S32, 4, V>& v) { set(v); return *this; }
};



class Vec2f : public VectorBase<F32, 2, Vec2f>, public float2
{
public:
    __declspec(__device__) __inline                    Vec2f       (void)                      { setZero(); }
    __declspec(__device__) __inline                    Vec2f       (F32 a)                     { set(a); }
    __declspec(__device__) __inline                    Vec2f       (F32 xx, F32 yy)            { x = xx; y = yy; }
    __declspec(__device__) __inline                    Vec2f       (const Vec2i& v)            { x = (F32)v.x; y = (F32)v.y; }

    __declspec(__device__) __inline    const F32*      getPtr      (void) const                { return &x; }
    __declspec(__device__) __inline    F32*            getPtr      (void)                      { return &x; }
    static __declspec(__device__) __inline Vec2f       fromPtr     (const F32* ptr)            { return Vec2f(ptr[0], ptr[1]); }

    __declspec(__device__) __inline    operator        Vec2i       (void) const                { return Vec2i((S32)x, (S32)y); }

    __declspec(__device__) __inline    Vec2f           perpendicular(void) const               { return Vec2f(-y, x); }
    __declspec(__device__) __inline    F32             cross       (const Vec2f& v) const      { return x * v.y - y * v.x; }

    template <class V> __declspec(__device__) __inline Vec2f(const VectorBase<F32, 2, V>& v) { set(v); }
    template <class V> __declspec(__device__) __inline Vec2f& operator=(const VectorBase<F32, 2, V>& v) { set(v); return *this; }
};



class Vec3f : public VectorBase<F32, 3, Vec3f>, public float3
{
public:
    __declspec(__device__) __inline                    Vec3f       (void)                      { setZero(); }
    __declspec(__device__) __inline                    Vec3f       (F32 a)                     { set(a); }
    __declspec(__device__) __inline                    Vec3f       (F32 xx, F32 yy, F32 zz)    { x = xx; y = yy; z = zz; }
    __declspec(__device__) __inline                    Vec3f       (const Vec2f& xy, F32 zz)   { x = xy.x; y = xy.y; z = zz; }
    __declspec(__device__) __inline                    Vec3f       (const Vec3i& v)            { x = (F32)v.x; y = (F32)v.y; z = (F32)v.z; }

    __declspec(__device__) __inline    const F32*      getPtr      (void) const                { return &x; }
    __declspec(__device__) __inline    F32*            getPtr      (void)                      { return &x; }
    static __declspec(__device__) __inline Vec3f       fromPtr     (const F32* ptr)            { return Vec3f(ptr[0], ptr[1], ptr[2]); }

    __declspec(__device__) __inline    operator        Vec3i       (void) const                { return Vec3i((S32)x, (S32)y, (S32)z); }
    __declspec(__device__) __inline    Vec2f           getXY       (void) const                { return Vec2f(x, y); }

    __declspec(__device__) __inline    Vec3f           cross       (const Vec3f& v) const      { return Vec3f(y * v.z - z * v.y, z * v.x - x * v.z, x * v.y - y * v.x); }

    template <class V> __declspec(__device__) __inline Vec3f(const VectorBase<F32, 3, V>& v) { set(v); }
    template <class V> __declspec(__device__) __inline Vec3f& operator=(const VectorBase<F32, 3, V>& v) { set(v); return *this; }
};



class Vec4f : public VectorBase<F32, 4, Vec4f>, public float4
{
public:
    __declspec(__device__) __inline                    Vec4f       (void)                      { setZero(); }
    __declspec(__device__) __inline                    Vec4f       (F32 a)                     { set(a); }
    __declspec(__device__) __inline                    Vec4f       (F32 xx, F32 yy, F32 zz, F32 ww) { x = xx; y = yy; z = zz; w = ww; }
    __declspec(__device__) __inline                    Vec4f       (const Vec2f& xy, F32 zz, F32 ww) { x = xy.x; y = xy.y; z = zz; w = ww; }
    __declspec(__device__) __inline                    Vec4f       (const Vec3f& xyz, F32 ww)  { x = xyz.x; y = xyz.y; z = xyz.z; w = ww; }
    __declspec(__device__) __inline                    Vec4f       (const Vec2f& xy, const Vec2f& zw) { x = xy.x; y = xy.y; z = zw.x; w = zw.y; }
    __declspec(__device__) __inline                    Vec4f       (const Vec4i& v)            { x = (F32)v.x; y = (F32)v.y; z = (F32)v.z; w = (F32)v.w; }

    __declspec(__device__) __inline    const F32*      getPtr      (void) const                { return &x; }
    __declspec(__device__) __inline    F32*            getPtr      (void)                      { return &x; }
    static __declspec(__device__) __inline Vec4f       fromPtr     (const F32* ptr)            { return Vec4f(ptr[0], ptr[1], ptr[2], ptr[3]); }

    __declspec(__device__) __inline    operator        Vec4i       (void) const                { return Vec4i((S32)x, (S32)y, (S32)z, (S32)w); }
    __declspec(__device__) __inline    Vec2f           getXY       (void) const                { return Vec2f(x, y); }
    __declspec(__device__) __inline    Vec3f           getXYZ      (void) const                { return Vec3f(x, y, z); }
    __declspec(__device__) __inline    Vec3f           getXYW      (void) const                { return Vec3f(x, y, w); }




#line 369 "src/framework\\base/Math.hpp"

    template <class V> __declspec(__device__) __inline Vec4f(const VectorBase<F32, 4, V>& v) { set(v); }
    template <class V> __declspec(__device__) __inline Vec4f& operator=(const VectorBase<F32, 4, V>& v) { set(v); return *this; }
};



class Vec2d : public VectorBase<F64, 2, Vec2d>, public double2
{
public:
    __declspec(__device__) __inline                    Vec2d       (void)                      { setZero(); }
    __declspec(__device__) __inline                    Vec2d       (F64 a)                     { set(a); }
    __declspec(__device__) __inline                    Vec2d       (F64 xx, F64 yy)            { x = xx; y = yy; }
    __declspec(__device__) __inline                    Vec2d       (const Vec2i& v)            { x = (F64)v.x; y = (F64)v.y; }
    __declspec(__device__) __inline                    Vec2d       (const Vec2f& v)            { x = v.x; y = v.y; }

    __declspec(__device__) __inline    const F64*      getPtr      (void) const                { return &x; }
    __declspec(__device__) __inline    F64*            getPtr      (void)                      { return &x; }
    static __declspec(__device__) __inline Vec2d       fromPtr     (const F64* ptr)            { return Vec2d(ptr[0], ptr[1]); }

    __declspec(__device__) __inline    operator        Vec2i       (void) const                { return Vec2i((S32)x, (S32)y); }
    __declspec(__device__) __inline    operator        Vec2f       (void) const                { return Vec2f((F32)x, (F32)y); }

    __declspec(__device__) __inline    Vec2d           perpendicular(void) const               { return Vec2d(-y, x); }
    __declspec(__device__) __inline    F64             cross       (const Vec2d& v) const      { return x * v.y - y * v.x; }

    template <class V> __declspec(__device__) __inline Vec2d(const VectorBase<F64, 2, V>& v) { set(v); }
    template <class V> __declspec(__device__) __inline Vec2d& operator=(const VectorBase<F64, 2, V>& v) { set(v); return *this; }
};



class Vec3d : public VectorBase<F64, 3, Vec3d>, public double3
{
public:
    __declspec(__device__) __inline                    Vec3d       (void)                      { setZero(); }
    __declspec(__device__) __inline                    Vec3d       (F64 a)                     { set(a); }
    __declspec(__device__) __inline                    Vec3d       (F64 xx, F64 yy, F64 zz)    { x = xx; y = yy; z = zz; }
    __declspec(__device__) __inline                    Vec3d       (const Vec2d& xy, F64 zz)   { x = xy.x; y = xy.y; z = zz; }
    __declspec(__device__) __inline                    Vec3d       (const Vec3i& v)            { x = (F64)v.x; y = (F64)v.y; z = (F64)v.z; }
    __declspec(__device__) __inline                    Vec3d       (const Vec3f& v)            { x = v.x; y = v.y; z = v.z; }

    __declspec(__device__) __inline    const F64*      getPtr      (void) const                { return &x; }
    __declspec(__device__) __inline    F64*            getPtr      (void)                      { return &x; }
    static __declspec(__device__) __inline Vec3d       fromPtr     (const F64* ptr)            { return Vec3d(ptr[0], ptr[1], ptr[2]); }

    __declspec(__device__) __inline    operator        Vec3i       (void) const                { return Vec3i((S32)x, (S32)y, (S32)z); }
    __declspec(__device__) __inline    operator        Vec3f       (void) const                { return Vec3f((F32)x, (F32)y, (F32)z); }
    __declspec(__device__) __inline    Vec2d           getXY       (void) const                { return Vec2d(x, y); }

    __declspec(__device__) __inline    Vec3d           cross       (const Vec3d& v) const      { return Vec3d(y * v.z - z * v.y, z * v.x - x * v.z, x * v.y - y * v.x); }

    template <class V> __declspec(__device__) __inline Vec3d(const VectorBase<F64, 3, V>& v) { set(v); }
    template <class V> __declspec(__device__) __inline Vec3d& operator=(const VectorBase<F64, 3, V>& v) { set(v); return *this; }
};



class Vec4d : public VectorBase<F64, 4, Vec4d>, public double4
{
public:
    __declspec(__device__) __inline                    Vec4d       (void)                      { setZero(); }
    __declspec(__device__) __inline                    Vec4d       (F64 a)                     { set(a); }
    __declspec(__device__) __inline                    Vec4d       (F64 xx, F64 yy, F64 zz, F64 ww) { x = xx; y = yy; z = zz; w = ww; }
    __declspec(__device__) __inline                    Vec4d       (const Vec2d& xy, F64 zz, F64 ww) { x = xy.x; y = xy.y; z = zz; w = ww; }
    __declspec(__device__) __inline                    Vec4d       (const Vec3d& xyz, F64 ww)  { x = xyz.x; y = xyz.y; z = xyz.z; w = ww; }
    __declspec(__device__) __inline                    Vec4d       (const Vec2d& xy, const Vec2d& zw) { x = xy.x; y = xy.y; z = zw.x; w = zw.y; }
    __declspec(__device__) __inline                    Vec4d       (const Vec4i& v)            { x = (F64)v.x; y = (F64)v.y; z = (F64)v.z; w = (F64)v.w; }
    __declspec(__device__) __inline                    Vec4d       (const Vec4f& v)            { x = v.x; y = v.y; z = v.z; w = v.w; }

    __declspec(__device__) __inline    const F64*      getPtr      (void) const                { return &x; }
    __declspec(__device__) __inline    F64*            getPtr      (void)                      { return &x; }
    static __declspec(__device__) __inline Vec4d       fromPtr     (const F64* ptr)            { return Vec4d(ptr[0], ptr[1], ptr[2], ptr[3]); }

    __declspec(__device__) __inline    operator        Vec4i       (void) const                { return Vec4i((S32)x, (S32)y, (S32)z, (S32)w); }
    __declspec(__device__) __inline    operator        Vec4f       (void) const                { return Vec4f((F32)x, (F32)y, (F32)z, (F32)w); }
    __declspec(__device__) __inline    Vec2d           getXY       (void) const                { return Vec2d(x, y); }
    __declspec(__device__) __inline    Vec3d           getXYZ      (void) const                { return Vec3d(x, y, z); }
    __declspec(__device__) __inline    Vec3d           getXYW      (void) const                { return Vec3d(x, y, w); }

    template <class V> __declspec(__device__) __inline Vec4d(const VectorBase<F64, 4, V>& v) { set(v); }
    template <class V> __declspec(__device__) __inline Vec4d& operator=(const VectorBase<F64, 4, V>& v) { set(v); return *this; }
};



template <class T, int L, class S> __declspec(__device__) __inline T lenSqr    (const VectorBase<T, L, S>& v)                  { return v.lenSqr(); }
template <class T, int L, class S> __declspec(__device__) __inline T length    (const VectorBase<T, L, S>& v)                  { return v.length(); }
template <class T, int L, class S> __declspec(__device__) __inline S normalize (const VectorBase<T, L, S>& v, T len = (T)1)    { return v.normalized(len); }
template <class T, int L, class S> __declspec(__device__) __inline T min       (const VectorBase<T, L, S>& v)                  { return v.min(); }
template <class T, int L, class S> __declspec(__device__) __inline T max       (const VectorBase<T, L, S>& v)                  { return v.max(); }
template <class T, int L, class S> __declspec(__device__) __inline T sum       (const VectorBase<T, L, S>& v)                  { return v.sum(); }
template <class T, int L, class S> __declspec(__device__) __inline S abs       (const VectorBase<T, L, S>& v)                  { return v.abs(); }

template <class T, int L, class S> __declspec(__device__) __inline S operator+     (const T& a, const VectorBase<T, L, S>& b)  { return b + a; }
template <class T, int L, class S> __declspec(__device__) __inline S operator-     (const T& a, const VectorBase<T, L, S>& b)  { return -b + a; }
template <class T, int L, class S> __declspec(__device__) __inline S operator*     (const T& a, const VectorBase<T, L, S>& b)  { return b * a; }
template <class T, int L, class S> __declspec(__device__) __inline S operator/     (const T& a, const VectorBase<T, L, S>& b)  { const T* bp = b.getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = a / bp[i]; return r; }
template <class T, int L, class S> __declspec(__device__) __inline S operator%     (const T& a, const VectorBase<T, L, S>& b)  { const T* bp = b.getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = a % bp[i]; return r; }
template <class T, int L, class S> __declspec(__device__) __inline S operator&     (const T& a, const VectorBase<T, L, S>& b)  { return b & a; }
template <class T, int L, class S> __declspec(__device__) __inline S operator|     (const T& a, const VectorBase<T, L, S>& b)  { return b | a; }
template <class T, int L, class S> __declspec(__device__) __inline S operator^     (const T& a, const VectorBase<T, L, S>& b)  { return b ^ a; }
template <class T, int L, class S> __declspec(__device__) __inline S operator<<    (const T& a, const VectorBase<T, L, S>& b)  { const T* bp = b.getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = a << bp[i]; return r; }
template <class T, int L, class S> __declspec(__device__) __inline S operator>>    (const T& a, const VectorBase<T, L, S>& b)  { const T* bp = b.getPtr(); S r; T* rp = r.getPtr(); for (int i = 0; i < L; i++) rp[i] = a >> bp[i]; return r; }

template <class T, int L, class S, class V> __declspec(__device__) __inline T dot(const VectorBase<T, L, S>& a, const VectorBase<T, L, V>& b) { return a.dot(b); }

__declspec(__device__) __inline Vec2f  perpendicular   (const Vec2f& v)                    { return v.perpendicular(); }
__declspec(__device__) __inline Vec2d  perpendicular   (const Vec2d& v)                    { return v.perpendicular(); }
__declspec(__device__) __inline F32    cross           (const Vec2f& a, const Vec2f& b)    { return a.cross(b); }
__declspec(__device__) __inline F64    cross           (const Vec2d& a, const Vec2d& b)    { return a.cross(b); }
__declspec(__device__) __inline Vec3f  cross           (const Vec3f& a, const Vec3f& b)    { return a.cross(b); }
__declspec(__device__) __inline Vec3d  cross           (const Vec3d& a, const Vec3d& b)    { return a.cross(b); }

















__declspec(__device__) __inline Vec2i min(const Vec2i& a, const Vec2i& b) { return a.min(b); } __declspec(__device__) __inline Vec2i min(Vec2i& a, Vec2i& b) { return a.min(b); } __declspec(__device__) __inline Vec2i max(const Vec2i& a, const Vec2i& b) { return a.max(b); } __declspec(__device__) __inline Vec2i max(Vec2i& a, Vec2i& b) { return a.max(b); } __declspec(__device__) __inline Vec2i min(const Vec2i& a, const Vec2i& b, const Vec2i& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec2i min(Vec2i& a, Vec2i& b, Vec2i& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec2i max(const Vec2i& a, const Vec2i& b, const Vec2i& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec2i max(Vec2i& a, Vec2i& b, Vec2i& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec2i min(const Vec2i& a, const Vec2i& b, const Vec2i& c, const Vec2i& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec2i min(Vec2i& a, Vec2i& b, Vec2i& c, Vec2i& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec2i max(const Vec2i& a, const Vec2i& b, const Vec2i& c, const Vec2i& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec2i max(Vec2i& a, Vec2i& b, Vec2i& c, Vec2i& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec2i clamp(const Vec2i& v, const Vec2i& lo, const Vec2i& hi) { return v.clamp(lo, hi); } __declspec(__device__) __inline Vec2i clamp(Vec2i& v, Vec2i& lo, Vec2i& hi) { return v.clamp(lo, hi); } __declspec(__device__) __inline Vec3i min(const Vec3i& a, const Vec3i& b) { return a.min(b); } __declspec(__device__) __inline Vec3i min(Vec3i& a, Vec3i& b) { return a.min(b); } __declspec(__device__) __inline Vec3i max(const Vec3i& a, const Vec3i& b) { return a.max(b); } __declspec(__device__) __inline Vec3i max(Vec3i& a, Vec3i& b) { return a.max(b); } __declspec(__device__) __inline Vec3i min(const Vec3i& a, const Vec3i& b, const Vec3i& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec3i min(Vec3i& a, Vec3i& b, Vec3i& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec3i max(const Vec3i& a, const Vec3i& b, const Vec3i& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec3i max(Vec3i& a, Vec3i& b, Vec3i& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec3i min(const Vec3i& a, const Vec3i& b, const Vec3i& c, const Vec3i& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec3i min(Vec3i& a, Vec3i& b, Vec3i& c, Vec3i& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec3i max(const Vec3i& a, const Vec3i& b, const Vec3i& c, const Vec3i& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec3i max(Vec3i& a, Vec3i& b, Vec3i& c, Vec3i& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec3i clamp(const Vec3i& v, const Vec3i& lo, const Vec3i& hi) { return v.clamp(lo, hi); } __declspec(__device__) __inline Vec3i clamp(Vec3i& v, Vec3i& lo, Vec3i& hi) { return v.clamp(lo, hi); } __declspec(__device__) __inline Vec4i min(const Vec4i& a, const Vec4i& b) { return a.min(b); } __declspec(__device__) __inline Vec4i min(Vec4i& a, Vec4i& b) { return a.min(b); } __declspec(__device__) __inline Vec4i max(const Vec4i& a, const Vec4i& b) { return a.max(b); } __declspec(__device__) __inline Vec4i max(Vec4i& a, Vec4i& b) { return a.max(b); } __declspec(__device__) __inline Vec4i min(const Vec4i& a, const Vec4i& b, const Vec4i& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec4i min(Vec4i& a, Vec4i& b, Vec4i& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec4i max(const Vec4i& a, const Vec4i& b, const Vec4i& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec4i max(Vec4i& a, Vec4i& b, Vec4i& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec4i min(const Vec4i& a, const Vec4i& b, const Vec4i& c, const Vec4i& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec4i min(Vec4i& a, Vec4i& b, Vec4i& c, Vec4i& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec4i max(const Vec4i& a, const Vec4i& b, const Vec4i& c, const Vec4i& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec4i max(Vec4i& a, Vec4i& b, Vec4i& c, Vec4i& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec4i clamp(const Vec4i& v, const Vec4i& lo, const Vec4i& hi) { return v.clamp(lo, hi); } __declspec(__device__) __inline Vec4i clamp(Vec4i& v, Vec4i& lo, Vec4i& hi) { return v.clamp(lo, hi); }
__declspec(__device__) __inline Vec2f min(const Vec2f& a, const Vec2f& b) { return a.min(b); } __declspec(__device__) __inline Vec2f min(Vec2f& a, Vec2f& b) { return a.min(b); } __declspec(__device__) __inline Vec2f max(const Vec2f& a, const Vec2f& b) { return a.max(b); } __declspec(__device__) __inline Vec2f max(Vec2f& a, Vec2f& b) { return a.max(b); } __declspec(__device__) __inline Vec2f min(const Vec2f& a, const Vec2f& b, const Vec2f& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec2f min(Vec2f& a, Vec2f& b, Vec2f& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec2f max(const Vec2f& a, const Vec2f& b, const Vec2f& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec2f max(Vec2f& a, Vec2f& b, Vec2f& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec2f min(const Vec2f& a, const Vec2f& b, const Vec2f& c, const Vec2f& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec2f min(Vec2f& a, Vec2f& b, Vec2f& c, Vec2f& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec2f max(const Vec2f& a, const Vec2f& b, const Vec2f& c, const Vec2f& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec2f max(Vec2f& a, Vec2f& b, Vec2f& c, Vec2f& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec2f clamp(const Vec2f& v, const Vec2f& lo, const Vec2f& hi) { return v.clamp(lo, hi); } __declspec(__device__) __inline Vec2f clamp(Vec2f& v, Vec2f& lo, Vec2f& hi) { return v.clamp(lo, hi); } __declspec(__device__) __inline Vec3f min(const Vec3f& a, const Vec3f& b) { return a.min(b); } __declspec(__device__) __inline Vec3f min(Vec3f& a, Vec3f& b) { return a.min(b); } __declspec(__device__) __inline Vec3f max(const Vec3f& a, const Vec3f& b) { return a.max(b); } __declspec(__device__) __inline Vec3f max(Vec3f& a, Vec3f& b) { return a.max(b); } __declspec(__device__) __inline Vec3f min(const Vec3f& a, const Vec3f& b, const Vec3f& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec3f min(Vec3f& a, Vec3f& b, Vec3f& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec3f max(const Vec3f& a, const Vec3f& b, const Vec3f& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec3f max(Vec3f& a, Vec3f& b, Vec3f& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec3f min(const Vec3f& a, const Vec3f& b, const Vec3f& c, const Vec3f& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec3f min(Vec3f& a, Vec3f& b, Vec3f& c, Vec3f& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec3f max(const Vec3f& a, const Vec3f& b, const Vec3f& c, const Vec3f& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec3f max(Vec3f& a, Vec3f& b, Vec3f& c, Vec3f& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec3f clamp(const Vec3f& v, const Vec3f& lo, const Vec3f& hi) { return v.clamp(lo, hi); } __declspec(__device__) __inline Vec3f clamp(Vec3f& v, Vec3f& lo, Vec3f& hi) { return v.clamp(lo, hi); } __declspec(__device__) __inline Vec4f min(const Vec4f& a, const Vec4f& b) { return a.min(b); } __declspec(__device__) __inline Vec4f min(Vec4f& a, Vec4f& b) { return a.min(b); } __declspec(__device__) __inline Vec4f max(const Vec4f& a, const Vec4f& b) { return a.max(b); } __declspec(__device__) __inline Vec4f max(Vec4f& a, Vec4f& b) { return a.max(b); } __declspec(__device__) __inline Vec4f min(const Vec4f& a, const Vec4f& b, const Vec4f& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec4f min(Vec4f& a, Vec4f& b, Vec4f& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec4f max(const Vec4f& a, const Vec4f& b, const Vec4f& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec4f max(Vec4f& a, Vec4f& b, Vec4f& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec4f min(const Vec4f& a, const Vec4f& b, const Vec4f& c, const Vec4f& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec4f min(Vec4f& a, Vec4f& b, Vec4f& c, Vec4f& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec4f max(const Vec4f& a, const Vec4f& b, const Vec4f& c, const Vec4f& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec4f max(Vec4f& a, Vec4f& b, Vec4f& c, Vec4f& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec4f clamp(const Vec4f& v, const Vec4f& lo, const Vec4f& hi) { return v.clamp(lo, hi); } __declspec(__device__) __inline Vec4f clamp(Vec4f& v, Vec4f& lo, Vec4f& hi) { return v.clamp(lo, hi); }
__declspec(__device__) __inline Vec2d min(const Vec2d& a, const Vec2d& b) { return a.min(b); } __declspec(__device__) __inline Vec2d min(Vec2d& a, Vec2d& b) { return a.min(b); } __declspec(__device__) __inline Vec2d max(const Vec2d& a, const Vec2d& b) { return a.max(b); } __declspec(__device__) __inline Vec2d max(Vec2d& a, Vec2d& b) { return a.max(b); } __declspec(__device__) __inline Vec2d min(const Vec2d& a, const Vec2d& b, const Vec2d& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec2d min(Vec2d& a, Vec2d& b, Vec2d& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec2d max(const Vec2d& a, const Vec2d& b, const Vec2d& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec2d max(Vec2d& a, Vec2d& b, Vec2d& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec2d min(const Vec2d& a, const Vec2d& b, const Vec2d& c, const Vec2d& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec2d min(Vec2d& a, Vec2d& b, Vec2d& c, Vec2d& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec2d max(const Vec2d& a, const Vec2d& b, const Vec2d& c, const Vec2d& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec2d max(Vec2d& a, Vec2d& b, Vec2d& c, Vec2d& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec2d clamp(const Vec2d& v, const Vec2d& lo, const Vec2d& hi) { return v.clamp(lo, hi); } __declspec(__device__) __inline Vec2d clamp(Vec2d& v, Vec2d& lo, Vec2d& hi) { return v.clamp(lo, hi); } __declspec(__device__) __inline Vec3d min(const Vec3d& a, const Vec3d& b) { return a.min(b); } __declspec(__device__) __inline Vec3d min(Vec3d& a, Vec3d& b) { return a.min(b); } __declspec(__device__) __inline Vec3d max(const Vec3d& a, const Vec3d& b) { return a.max(b); } __declspec(__device__) __inline Vec3d max(Vec3d& a, Vec3d& b) { return a.max(b); } __declspec(__device__) __inline Vec3d min(const Vec3d& a, const Vec3d& b, const Vec3d& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec3d min(Vec3d& a, Vec3d& b, Vec3d& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec3d max(const Vec3d& a, const Vec3d& b, const Vec3d& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec3d max(Vec3d& a, Vec3d& b, Vec3d& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec3d min(const Vec3d& a, const Vec3d& b, const Vec3d& c, const Vec3d& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec3d min(Vec3d& a, Vec3d& b, Vec3d& c, Vec3d& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec3d max(const Vec3d& a, const Vec3d& b, const Vec3d& c, const Vec3d& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec3d max(Vec3d& a, Vec3d& b, Vec3d& c, Vec3d& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec3d clamp(const Vec3d& v, const Vec3d& lo, const Vec3d& hi) { return v.clamp(lo, hi); } __declspec(__device__) __inline Vec3d clamp(Vec3d& v, Vec3d& lo, Vec3d& hi) { return v.clamp(lo, hi); } __declspec(__device__) __inline Vec4d min(const Vec4d& a, const Vec4d& b) { return a.min(b); } __declspec(__device__) __inline Vec4d min(Vec4d& a, Vec4d& b) { return a.min(b); } __declspec(__device__) __inline Vec4d max(const Vec4d& a, const Vec4d& b) { return a.max(b); } __declspec(__device__) __inline Vec4d max(Vec4d& a, Vec4d& b) { return a.max(b); } __declspec(__device__) __inline Vec4d min(const Vec4d& a, const Vec4d& b, const Vec4d& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec4d min(Vec4d& a, Vec4d& b, Vec4d& c) { return a.min(b).min(c); } __declspec(__device__) __inline Vec4d max(const Vec4d& a, const Vec4d& b, const Vec4d& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec4d max(Vec4d& a, Vec4d& b, Vec4d& c) { return a.max(b).max(c); } __declspec(__device__) __inline Vec4d min(const Vec4d& a, const Vec4d& b, const Vec4d& c, const Vec4d& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec4d min(Vec4d& a, Vec4d& b, Vec4d& c, Vec4d& d) { return a.min(b).min(c).min(d); } __declspec(__device__) __inline Vec4d max(const Vec4d& a, const Vec4d& b, const Vec4d& c, const Vec4d& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec4d max(Vec4d& a, Vec4d& b, Vec4d& c, Vec4d& d) { return a.max(b).max(c).max(d); } __declspec(__device__) __inline Vec4d clamp(const Vec4d& v, const Vec4d& lo, const Vec4d& hi) { return v.clamp(lo, hi); } __declspec(__device__) __inline Vec4d clamp(Vec4d& v, Vec4d& lo, Vec4d& hi) { return v.clamp(lo, hi); }




template <class T, int L, class S> class MatrixBase
{
public:
    __declspec(__device__) __inline                    MatrixBase  (void)                      {}

    template <class V> static __declspec(__device__) __inline S    translate   (const VectorBase<T, L - 1, V>& v);
    template <class V> static __declspec(__device__) __inline S    scale       (const VectorBase<T, L - 1, V>& v);
    template <class V> static __declspec(__device__) __inline S    scale       (const VectorBase<T, L, V>& v);

    __declspec(__device__) __inline    const T*        getPtr      (void) const                { return ((S*)this)->getPtr(); }
    __declspec(__device__) __inline    T*              getPtr      (void)                      { return ((S*)this)->getPtr(); }
    __declspec(__device__) __inline    const T&        get         (int idx) const             { ((void)0); return getPtr()[idx]; }
    __declspec(__device__) __inline    T&              get         (int idx)                   { ((void)0); return getPtr()[idx]; }
    __declspec(__device__) __inline    const T&        get         (int r, int c) const        { ((void)0); return getPtr()[r + c * L]; }
    __declspec(__device__) __inline    T&              get         (int r, int c)              { ((void)0); return getPtr()[r + c * L]; }
    __declspec(__device__) __inline    T               set         (int idx, const T& a)       { T& slot = get(idx); T old = slot; slot = a; return old; }
    __declspec(__device__) __inline    T               set         (int r, int c, const T& a)  { T& slot = get(r, c); T old = slot; slot = a; return old; }
    __declspec(__device__) __inline    const Vector<T, L>& col     (int c) const               { ((void)0); return *(const Vector<T, L>*)(getPtr() + c * L); }
    __declspec(__device__) __inline    Vector<T, L>&   col         (int c)                     { ((void)0); return *(Vector<T, L>*)(getPtr() + c * L); }
    __declspec(__device__) __inline    const Vector<T, L>& getCol  (int c) const               { return col(c); }
    __declspec(__device__) __inline    Vector<T, L>    getRow      (int r) const;

    __declspec(__device__) __inline    void            set         (const T& a)                { for (int i = 0; i < L * L; i++) get(i) = a; }
    __declspec(__device__) __inline    void            set         (const T* ptr)              { ((void)0); for (int i = 0; i < L * L; i++) get(i) = ptr[i]; }
    __declspec(__device__) __inline    void            setZero     (void)                      { set((T)0); }
    __declspec(__device__) __inline    void            setIdentity (void)                      { setZero(); for (int i = 0; i < L; i++) get(i, i) = (T)1; }



#line 536 "src/framework\\base/Math.hpp"

    __declspec(__device__) __inline    T               det         (void) const;
    __declspec(__device__) __inline    S               transposed  (void) const;
    __declspec(__device__) __inline    S               inverted    (void) const;
    __declspec(__device__) __inline    void            transpose   (void)                      { set(transposed()); }
    __declspec(__device__) __inline    void            invert      (void)                      { set(inverted()); }

    __declspec(__device__) __inline    const T&        operator()  (int r, int c) const        { return get(r, c); }
    __declspec(__device__) __inline    T&              operator()  (int r, int c)              { return get(r, c); }

    __declspec(__device__) __inline    S&              operator=   (const T& a)                { set(a); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator+=  (const T& a)                { set(operator+(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator-=  (const T& a)                { set(operator-(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator*=  (const T& a)                { set(operator*(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator/=  (const T& a)                { set(operator/(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator%=  (const T& a)                { set(operator%(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator&=  (const T& a)                { set(operator&(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator|=  (const T& a)                { set(operator|(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator^=  (const T& a)                { set(operator^(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator<<= (const T& a)                { set(operator<<(a)); return *(S*)this; }
    __declspec(__device__) __inline    S&              operator>>= (const T& a)                { set(operator>>(a)); return *(S*)this; }

    __declspec(__device__) __inline    S               operator+   (void) const                { return *this; }
    __declspec(__device__) __inline    S               operator-   (void) const                { S r; for (int i = 0; i < L * L; i++) r.get(i) = -get(i); return r; }
    __declspec(__device__) __inline    S               operator~   (void) const                { S r; for (int i = 0; i < L * L; i++) r.get(i) = ~get(i); return r; }

    __declspec(__device__) __inline    S               operator+   (const T& a) const          { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) + a; return r; }
    __declspec(__device__) __inline    S               operator-   (const T& a) const          { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) - a; return r; }
    __declspec(__device__) __inline    S               operator*   (const T& a) const          { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) * a; return r; }
    __declspec(__device__) __inline    S               operator/   (const T& a) const          { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) / a; return r; }
    __declspec(__device__) __inline    S               operator%   (const T& a) const          { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) % a; return r; }
    __declspec(__device__) __inline    S               operator&   (const T& a) const          { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) & a; return r; }
    __declspec(__device__) __inline    S               operator|   (const T& a) const          { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) | a; return r; }
    __declspec(__device__) __inline    S               operator^   (const T& a) const          { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) ^ a; return r; }
    __declspec(__device__) __inline    S               operator<<  (const T& a) const          { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) << a; return r; }
    __declspec(__device__) __inline    S               operator>>  (const T& a) const          { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) >> a; return r; }

    template <class V> __declspec(__device__) __inline void    setCol      (int c, const VectorBase<T, L, V>& v)   { col(c) = v; }
    template <class V> __declspec(__device__) __inline void    setRow      (int r, const VectorBase<T, L, V>& v);
    template <class V> __declspec(__device__) __inline void    set         (const MatrixBase<T, L, V>& v)          { set(v.getPtr()); }

    template <class V> __declspec(__device__) __inline S&      operator=   (const MatrixBase<T, L, V>& v)          { set(v); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator+=  (const MatrixBase<T, L, V>& v)          { set(operator+(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator-=  (const MatrixBase<T, L, V>& v)          { set(operator-(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator*=  (const MatrixBase<T, L, V>& v)          { set(operator*(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator/=  (const MatrixBase<T, L, V>& v)          { set(operator/(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator%=  (const MatrixBase<T, L, V>& v)          { set(operator%(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator&=  (const MatrixBase<T, L, V>& v)          { set(operator&(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator|=  (const MatrixBase<T, L, V>& v)          { set(operator|(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator^=  (const MatrixBase<T, L, V>& v)          { set(operator^(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator<<= (const MatrixBase<T, L, V>& v)          { set(operator<<(v)); return *(S*)this; }
    template <class V> __declspec(__device__) __inline S&      operator>>= (const MatrixBase<T, L, V>& v)          { set(operator>>(v)); return *(S*)this; }

    template <class V> __declspec(__device__) __inline V       operator*   (const VectorBase<T, L, V>& v) const;
    template <class V> __declspec(__device__) __inline V       operator*   (const VectorBase<T, L - 1, V>& v) const;

    template <class V> __declspec(__device__) __inline S       operator+   (const MatrixBase<T, L, V>& v) const    { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) + v.get(i); return r; }
    template <class V> __declspec(__device__) __inline S       operator-   (const MatrixBase<T, L, V>& v) const    { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) - v.get(i); return r; }
    template <class V> __declspec(__device__) __inline S       operator*   (const MatrixBase<T, L, V>& v) const;
    template <class V> __declspec(__device__) __inline S       operator/   (const MatrixBase<T, L, V>& v) const    { return operator*(v.inverted()); }
    template <class V> __declspec(__device__) __inline S       operator%   (const MatrixBase<T, L, V>& v) const    { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) % v.get(i); return r; }
    template <class V> __declspec(__device__) __inline S       operator&   (const MatrixBase<T, L, V>& v) const    { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) & v.get(i); return r; }
    template <class V> __declspec(__device__) __inline S       operator|   (const MatrixBase<T, L, V>& v) const    { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) | v.get(i); return r; }
    template <class V> __declspec(__device__) __inline S       operator^   (const MatrixBase<T, L, V>& v) const    { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) ^ v.get(i); return r; }
    template <class V> __declspec(__device__) __inline S       operator<<  (const MatrixBase<T, L, V>& v) const    { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) << v.get(i); return r; }
    template <class V> __declspec(__device__) __inline S       operator>>  (const MatrixBase<T, L, V>& v) const    { S r; for (int i = 0; i < L * L; i++) r.get(i) = get(i) >> v.get(i); return r; }

    template <class V> __declspec(__device__) __inline bool    operator==  (const MatrixBase<T, L, V>& v) const    { for (int i = 0; i < L * L; i++) if (get(i) != v.get(i)) return false; return true; }
    template <class V> __declspec(__device__) __inline bool    operator!=  (const MatrixBase<T, L, V>& v) const    { return (!operator==(v)); }
};



template <class T, int L> class Matrix : public MatrixBase<T, L, Matrix<T, L> >
{
public:
    __declspec(__device__) __inline                    Matrix      (void)                      { setIdentity(); }
    __declspec(__device__) __inline    explicit        Matrix      (T a)                       { set(a); }

    __declspec(__device__) __inline    const T*        getPtr      (void) const                { return m_values; }
    __declspec(__device__) __inline    T*              getPtr      (void)                      { return m_values; }
    static __declspec(__device__) __inline Matrix      fromPtr     (const T* ptr)              { Matrix v; v.set(ptr); return v; }

    template <class V> __declspec(__device__) __inline Matrix(const MatrixBase<T, L, V>& v) { set(v); }
    template <class V> __declspec(__device__) __inline Matrix& operator=(const MatrixBase<T, L, V>& v) { set(v); return *this; }

private:
    T               m_values[L * L];
};



class Mat2f : public MatrixBase<F32, 2, Mat2f>
{
public:
    __declspec(__device__) __inline                    Mat2f       (void)                      { setIdentity(); }
    __declspec(__device__) __inline    explicit        Mat2f       (F32 a)                     { set(a); }

    __declspec(__device__) __inline    const F32*      getPtr      (void) const                { return &m00; }
    __declspec(__device__) __inline    F32*            getPtr      (void)                      { return &m00; }
    static __declspec(__device__) __inline Mat2f       fromPtr     (const F32* ptr)            { Mat2f v; v.set(ptr); return v; }

    template <class V> __declspec(__device__) __inline Mat2f(const MatrixBase<F32, 2, V>& v) { set(v); }
    template <class V> __declspec(__device__) __inline Mat2f& operator=(const MatrixBase<F32, 2, V>& v) { set(v); return *this; }

public:
    F32             m00, m10;
    F32             m01, m11;
};



class Mat3f : public MatrixBase<F32, 3, Mat3f>
{
public:
    __declspec(__device__) __inline                    Mat3f       (void)                      { setIdentity(); }
    __declspec(__device__) __inline    explicit        Mat3f       (F32 a)                     { set(a); }

    __declspec(__device__) __inline    const F32*      getPtr      (void) const                { return &m00; }
    __declspec(__device__) __inline    F32*            getPtr      (void)                      { return &m00; }
    static __declspec(__device__) __inline Mat3f       fromPtr     (const F32* ptr)            { Mat3f v; v.set(ptr); return v; }

    template <class V> __declspec(__device__) __inline Mat3f(const MatrixBase<F32, 3, V>& v) { set(v); }
    template <class V> __declspec(__device__) __inline Mat3f& operator=(const MatrixBase<F32, 3, V>& v) { set(v); return *this; }



#line 664 "src/framework\\base/Math.hpp"

public:
    F32             m00, m10, m20;
    F32             m01, m11, m21;
    F32             m02, m12, m22;
};



class Mat4f : public MatrixBase<F32, 4, Mat4f>
{
public:
    __declspec(__device__) __inline                    Mat4f       (void)                      { setIdentity(); }
    __declspec(__device__) __inline    explicit        Mat4f       (F32 a)                     { set(a); }

    __declspec(__device__) __inline    const F32*      getPtr      (void) const                { return &m00; }
    __declspec(__device__) __inline    F32*            getPtr      (void)                      { return &m00; }
    static __declspec(__device__) __inline Mat4f       fromPtr     (const F32* ptr)            { Mat4f v; v.set(ptr); return v; }





#line 688 "src/framework\\base/Math.hpp"

    template <class V> __declspec(__device__) __inline Mat4f(const MatrixBase<F32, 4, V>& v) { set(v); }
    template <class V> __declspec(__device__) __inline Mat4f& operator=(const MatrixBase<F32, 4, V>& v) { set(v); return *this; }

public:
    F32             m00, m10, m20, m30;
    F32             m01, m11, m21, m31;
    F32             m02, m12, m22, m32;
    F32             m03, m13, m23, m33;
};



class Mat2d : public MatrixBase<F64, 2, Mat2d>
{
public:
    __declspec(__device__) __inline                    Mat2d       (void)                      { setIdentity(); }
    __declspec(__device__) __inline                    Mat2d       (const Mat2f& a)            { for (int i = 0; i < 2 * 2; i++) set(i, (F64)a.get(i)); }
    __declspec(__device__) __inline    explicit        Mat2d       (F64 a)                     { set(a); }

    __declspec(__device__) __inline    const F64*      getPtr      (void) const                { return &m00; }
    __declspec(__device__) __inline    F64*            getPtr      (void)                      { return &m00; }
    static __declspec(__device__) __inline Mat2d       fromPtr     (const F64* ptr)            { Mat2d v; v.set(ptr); return v; }

    __declspec(__device__) __inline    operator        Mat2f       (void) const                { Mat2f r; for (int i = 0; i < 2 * 2; i++) r.set(i, (F32)get(i)); return r; }

    template <class V> __declspec(__device__) __inline Mat2d(const MatrixBase<F64, 2, V>& v) { set(v); }
    template <class V> __declspec(__device__) __inline Mat2d& operator=(const MatrixBase<F64, 2, V>& v) { set(v); return *this; }

public:
    F64             m00, m10;
    F64             m01, m11;
};



class Mat3d : public MatrixBase<F64, 3, Mat3d>
{
public:
    __declspec(__device__) __inline                    Mat3d       (void)                      { setIdentity(); }
    __declspec(__device__) __inline                    Mat3d       (const Mat3f& a)            { for (int i = 0; i < 3 * 3; i++) set(i, (F64)a.get(i)); }
    __declspec(__device__) __inline    explicit        Mat3d       (F64 a)                     { set(a); }

    __declspec(__device__) __inline    const F64*      getPtr      (void) const                { return &m00; }
    __declspec(__device__) __inline    F64*            getPtr      (void)                      { return &m00; }
    static __declspec(__device__) __inline Mat3d       fromPtr     (const F64* ptr)            { Mat3d v; v.set(ptr); return v; }

    __declspec(__device__) __inline    operator        Mat3f       (void) const                { Mat3f r; for (int i = 0; i < 3 * 3; i++) r.set(i, (F32)get(i)); return r; }



#line 740 "src/framework\\base/Math.hpp"

    template <class V> __declspec(__device__) __inline Mat3d(const MatrixBase<F64, 3, V>& v) { set(v); }
    template <class V> __declspec(__device__) __inline Mat3d& operator=(const MatrixBase<F64, 3, V>& v) { set(v); return *this; }

public:
    F64             m00, m10, m20;
    F64             m01, m11, m21;
    F64             m02, m12, m22;
};



class Mat4d : public MatrixBase<F64, 4, Mat4d>
{
public:
    __declspec(__device__) __inline                    Mat4d       (void)                      { setIdentity(); }
    __declspec(__device__) __inline                    Mat4d       (const Mat4f& a)            { for (int i = 0; i < 4 * 4; i++) set(i, (F64)a.get(i)); }
    __declspec(__device__) __inline    explicit        Mat4d       (F64 a)                     { set(a); }

    __declspec(__device__) __inline    const F64*      getPtr      (void) const                { return &m00; }
    __declspec(__device__) __inline    F64*            getPtr      (void)                      { return &m00; }
    static __declspec(__device__) __inline Mat4d       fromPtr     (const F64* ptr)            { Mat4d v; v.set(ptr); return v; }

    __declspec(__device__) __inline    operator        Mat4f       (void) const                { Mat4f r; for (int i = 0; i < 4 * 4; i++) r.set(i, (F32)get(i)); return r; }

    template <class V> __declspec(__device__) __inline Mat4d(const MatrixBase<F64, 4, V>& v) { set(v); }
    template <class V> __declspec(__device__) __inline Mat4d& operator=(const MatrixBase<F64, 4, V>& v) { set(v); return *this; }

public:
    F64             m00, m10, m20, m30;
    F64             m01, m11, m21, m31;
    F64             m02, m12, m22, m32;
    F64             m03, m13, m23, m33;
};



template <class T, int L, class S> __declspec(__device__) __inline Matrix<T, L> outerProduct(const VectorBase<T, L, S>& a, const VectorBase<T, L, S>& b);

template <class T, int L, class S> __declspec(__device__) __inline T det           (const MatrixBase<T, L, S>& v)  { return v.det(); }
template <class T, int L, class S> __declspec(__device__) __inline S transpose     (const MatrixBase<T, L, S>& v)  { return v.transposed(); }
template <class T, int L, class S> __declspec(__device__) __inline S invert        (const MatrixBase<T, L, S>& v)  { return v.inverted(); }

template <class T, int L, class S> __declspec(__device__) __inline S operator+     (const T& a, const MatrixBase<T, L, S>& b)  { return b + a; }
template <class T, int L, class S> __declspec(__device__) __inline S operator-     (const T& a, const MatrixBase<T, L, S>& b)  { return -b + a; }
template <class T, int L, class S> __declspec(__device__) __inline S operator*     (const T& a, const MatrixBase<T, L, S>& b)  { return b * a; }
template <class T, int L, class S> __declspec(__device__) __inline S operator/     (const T& a, const MatrixBase<T, L, S>& b)  { S r; for (int i = 0; i < L * L; i++) r.get(i) = a / b.get(i); return r; }
template <class T, int L, class S> __declspec(__device__) __inline S operator%     (const T& a, const MatrixBase<T, L, S>& b)  { S r; for (int i = 0; i < L * L; i++) r.get(i) = a % b.get(i); return r; }
template <class T, int L, class S> __declspec(__device__) __inline S operator&     (const T& a, const MatrixBase<T, L, S>& b)  { return b & a; }
template <class T, int L, class S> __declspec(__device__) __inline S operator|     (const T& a, const MatrixBase<T, L, S>& b)  { return b | a; }
template <class T, int L, class S> __declspec(__device__) __inline S operator^     (const T& a, const MatrixBase<T, L, S>& b)  { return b ^ a; }
template <class T, int L, class S> __declspec(__device__) __inline S operator<<    (const T& a, const MatrixBase<T, L, S>& b)  { S r; for (int i = 0; i < L * L; i++) r.get(i) = a << b.get(i); return r; }
template <class T, int L, class S> __declspec(__device__) __inline S operator>>    (const T& a, const MatrixBase<T, L, S>& b)  { S r; for (int i = 0; i < L * L; i++) r.get(i) = a >> b.get(i); return r; }



__declspec(__constant__) int c_popc8LUT[] =
{
    0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
};

__declspec(__device__) __inline int popc8(U32 mask)
{
    return c_popc8LUT[mask & 0xFFu];
}

__declspec(__device__) __inline int popc16(U32 mask)
{
    return c_popc8LUT[mask & 0xFFu] + c_popc8LUT[(mask >> 8) & 0xFFu];
}

__declspec(__device__) __inline int popc32(U32 mask)
{
    int result = c_popc8LUT[mask & 0xFFu];
    result += c_popc8LUT[(mask >> 8) & 0xFFu];
    result += c_popc8LUT[(mask >> 16) & 0xFFu];
    result += c_popc8LUT[mask >> 24];
    return result;
}

__declspec(__device__) __inline int popc64(U64 mask)
{
    U32 lo = (U32)mask;
    U32 hi = (U32)(mask >> 32);
    int result = c_popc8LUT[lo & 0xffu] + c_popc8LUT[hi & 0xffu];
    result += c_popc8LUT[(lo >> 8) & 0xffu] + c_popc8LUT[(hi >> 8) & 0xffu];
    result += c_popc8LUT[(lo >> 16) & 0xffu] + c_popc8LUT[(hi >> 16) & 0xffu];
    result += c_popc8LUT[lo >> 24] + c_popc8LUT[hi >> 24];
    return result;
}



template <class T, int L, class S> template <class V> S MatrixBase<T, L, S>::translate(const VectorBase<T, L - 1, V>& v)
{
    S r;
    for (int i = 0; i < L - 1; i++)
        r(i, L - 1) = v[i];
    return r;
}



template <class T, int L, class S> template <class V> S MatrixBase<T, L, S>::scale(const VectorBase<T, L - 1, V>& v)
{
    S r;
    for (int i = 0; i < L - 1; i++)
        r(i, i) = v[i];
    return r;
}



template <class T, int L, class S> template <class V> S MatrixBase<T, L, S>::scale(const VectorBase<T, L, V>& v)
{
    S r;
    for (int i = 0; i < L; i++)
        r(i, i) = v[i];
    return r;
}



template <class T, int L, class S> Vector<T, L> MatrixBase<T, L, S>::getRow(int idx) const
{
    Vector<T, L> r;
    for (int i = 0; i < L; i++)
        r[i] = get(idx, i);
    return r;
}













#line 899 "src/framework\\base/Math.hpp"



template <class T, int L, class S> __declspec(__device__) __inline T detImpl(const MatrixBase<T, L, S>& v)
{
    T r = (T)0;
    T s = (T)1;
    for (int i = 0; i < L; i++)
    {
        Matrix<T, L - 1> sub;
        for (int j = 0; j < L - 1; j++)
            for (int k = 0; k < L - 1; k++)
                sub(j, k) = v((j < i) ? j : j + 1, k + 1);
        r += sub.det() * v(i, 0) * s;
        s = -s;
    }
    return r;
}



template <class T, class S> __declspec(__device__) __inline T detImpl(const MatrixBase<T, 1, S>& v)
{
    return v(0, 0);
}



template <class T, class S> __declspec(__device__) __inline T detImpl(const MatrixBase<T, 2, S>& v)
{
    return v(0, 0) * v(1, 1) - v(0, 1) * v(1, 0);
}



template <class T, class S> __declspec(__device__) __inline T detImpl(const MatrixBase<T, 3, S>& v)
{
    return v(0, 0) * v(1, 1) * v(2, 2) - v(0, 0) * v(1, 2) * v(2, 1) +
           v(1, 0) * v(2, 1) * v(0, 2) - v(1, 0) * v(2, 2) * v(0, 1) +
           v(2, 0) * v(0, 1) * v(1, 2) - v(2, 0) * v(0, 2) * v(1, 1);
}



template <class T, int L, class S> T MatrixBase<T, L, S>::det(void) const
{
    return detImpl(*this);
}



template <class T, int L, class S> S MatrixBase<T, L, S>::transposed(void) const
{
    S r;
    for (int i = 0; i < L; i++)
        for (int j = 0; j < L; j++)
            r(i, j) = get(j, i);
    return r;
}



template <class T, int L, class S> S MatrixBase<T, L, S>::inverted(void) const
{
    S r;
    T d = (T)0;
    T si = (T)1;
    for (int i = 0; i < L; i++)
    {
        T sj = si;
        for (int j = 0; j < L; j++)
        {
            Matrix<T, L - 1> sub;
            for (int k = 0; k < L - 1; k++)
                for (int l = 0; l < L - 1; l++)
                    sub(k, l) = get((k < j) ? k : k + 1, (l < i) ? l : l + 1);
            T dd = sub.det() * sj;
            r(i, j) = dd;
            d += dd * get(j, i);
            sj = -sj;
        }
        si = -si;
    }
    return r * rcp(d) * L;
}



template <class T, int L, class S> template <class V> void MatrixBase<T, L, S>::setRow(int idx, const VectorBase<T, L, V>& v)
{
    for (int i = 0; i < L; i++)
        get(idx, i) = v[i];
}



template <class T, int L, class S> template<class V> V MatrixBase<T, L, S>::operator*(const VectorBase<T, L, V>& v) const
{
    V r;
    for (int i = 0; i < L; i++)
    {
        T rr = (T)0;
        for (int j = 0; j < L; j++)
            rr += get(i, j) * v[j];
        r[i] = rr;
    }
    return r;
}



template <class T, int L, class S> template<class V> V MatrixBase<T, L, S>::operator*(const VectorBase<T, L - 1, V>& v) const
{
    T w = get(L - 1, L - 1);
    for (int i = 0; i < L - 1; i++)
        w += get(L - 1, i) * v[i];
    w = rcp(w);

    V r;
    for (int i = 0; i < L - 1; i++)
    {
        T rr = get(i, L - 1);
        for (int j = 0; j < L - 1; j++)
            rr += get(i, j) * v[j];
        r[i] = rr * w;
    }
    return r;
}



template <class T, int L, class S> template <class V> S MatrixBase<T, L, S>::operator*(const MatrixBase<T, L, V>& v) const
{
    S r;
    for (int i = 0; i < L; i++)
    {
        for (int j = 0; j < L; j++)
        {
            T rr = (T)0;
            for (int k = 0; k < L; k++)
                rr += get(i, k) * v(k, j);
            r(i, j) = rr;
        }
    }
    return r;
}



template <class T, int L, class S> Matrix<T, L> outerProduct(const VectorBase<T, L, S>& a, const VectorBase<T, L, S>& b)
{
    Matrix<T, L> res;
    for (int i = 0; i < L; i++)
        for (int j = 0; j < L; j++)
            res.get(i, j) = a.get(i) * b.get(j);
    return res;
}


}
#line 30 "src/rt\\Util.hpp"

namespace FW
{


class AABB
{
public:
    __declspec(__device__) __inline                    AABB        (void) : m_mn((3.402823466e+38f), (3.402823466e+38f), (3.402823466e+38f)), m_mx(-(3.402823466e+38f), -(3.402823466e+38f), -(3.402823466e+38f)) {}
    __declspec(__device__) __inline                    AABB        (const Vec3f& mn, const Vec3f& mx) : m_mn(mn), m_mx(mx) {}

    __declspec(__device__) __inline    void            grow        (const Vec3f& pt)   { m_mn = m_mn.min(pt); m_mx = m_mx.max(pt); }
    __declspec(__device__) __inline    void            grow        (const AABB& aabb)  { grow(aabb.m_mn); grow(aabb.m_mx); }
    __declspec(__device__) __inline    void            intersect   (const AABB& aabb)  { m_mn = m_mn.max(aabb.m_mn); m_mx = m_mx.min(aabb.m_mx); }
    __declspec(__device__) __inline    float           volume      (void) const        { if(!valid()) return 0.0f; return (m_mx.x-m_mn.x) * (m_mx.y-m_mn.y) * (m_mx.z-m_mn.z); }
    __declspec(__device__) __inline    float           area        (void) const        { if(!valid()) return 0.0f; Vec3f d = m_mx - m_mn; return (d.x*d.y + d.y*d.z + d.z*d.x)*2.0f; }
    __declspec(__device__) __inline    bool            valid       (void) const        { return m_mn.x<=m_mx.x && m_mn.y<=m_mx.y && m_mn.z<=m_mx.z; }
    __declspec(__device__) __inline    Vec3f           midPoint    (void) const        { return (m_mn+m_mx)*0.5f; }
    __declspec(__device__) __inline    const Vec3f&    min         (void) const        { return m_mn; }
    __declspec(__device__) __inline    const Vec3f&    max         (void) const        { return m_mx; }
    __declspec(__device__) __inline    Vec3f&          min         (void)              { return m_mn; }
    __declspec(__device__) __inline    Vec3f&          max         (void)              { return m_mx; }

    __declspec(__device__) __inline    AABB            operator+   (const AABB& aabb) const { AABB u(*this); u.grow(aabb); return u; }

private:
    Vec3f           m_mn;
    Vec3f           m_mx;
};



struct Ray
{
    __declspec(__device__) __inline            Ray         (void)      : origin(0.0f), tmin(0.0f), direction(0.0f), tmax(0.0f) {}
    __declspec(__device__) __inline    void    degenerate  (void)      { tmax = tmin - 1.0f; }

    Vec3f           origin;
    float           tmin;
    Vec3f           direction;
    float           tmax;
};





struct RayResult
{
    __declspec(__device__) __inline            RayResult   (S32 ii = (-1), float ti = 0.f) : id(ii), t(ti) {}
    __declspec(__device__) __inline    bool    hit         (void) const    { return (id != (-1)); }
    __declspec(__device__) __inline    void    clear       (void)          { id = (-1); }

    S32             id;
    float           t;
    S32             padA;
    S32             padB;
};



namespace Intersect
{
    Vec2f RayBox(const AABB& box, const Ray& ray);
    Vec3f RayTriangle(const Vec3f& v0, const Vec3f& v1, const Vec3f& v2, const Ray& ray);
    Vec3f RayTriangleWoop(const Vec4f& zpleq, const Vec4f& upleq, const Vec4f& vpleq, const Ray& ray);
}


}
#line 31 "src/rt\\cuda/RendererKernels.hpp"

namespace FW
{


enum
{
    CountHits_BlockWidth    = 32,
    CountHits_BlockHeight   = 8,
};



struct ReconstructInput
{
    S32         numRaysPerPrimary;
    S32         firstPrimary;
    S32         numPrimary;
    bool        isPrimary;
    bool        isAO;
    bool        isDiffuse;
    CUdeviceptr primarySlotToID;    
    CUdeviceptr primaryResults;     
    CUdeviceptr batchIDToSlot;      
    CUdeviceptr batchResults;       
    CUdeviceptr triMaterialColor;   
    CUdeviceptr triShadedColor;     
    CUdeviceptr pixels;             
};



struct CountHitsInput
{
    S32         numRays;
    CUdeviceptr rayResults;         
    S32         raysPerThread;
};




extern "C"
{

__declspec(__constant__) ReconstructInput c_ReconstructInput;
__declspec(__global__) void reconstructKernel(void);

__declspec(__constant__) CountHitsInput c_CountHitsInput;
__declspec(__device__) S32 g_CountHitsOutput;
__declspec(__global__) void countHitsKernel(void);

}
#line 85 "src/rt\\cuda/RendererKernels.hpp"


}
#line 29 "C:\\Users\\wangweihao\\Documents\\GPURayTraversal\\src\\rt\\cuda\\RendererKernels.cu"


using namespace FW;



__declspec(__device__) inline Vec4f fromABGR(U32 abgr)
{
    return Vec4f(
        (F32)(abgr & 0xFF) * (1.0f / 255.0f),
        (F32)((abgr >> 8) & 0xFF) * (1.0f / 255.0f),
        (F32)((abgr >> 16) & 0xFF) * (1.0f / 255.0f),
        (F32)(abgr >> 24) * (1.0f / 255.0f));
}



__declspec(__device__) inline U32 toABGR(Vec4f v)
{
    return
        (U32)(fminf(fmaxf(v.x, 0.0f), 1.0f) * 255.0f) |
        ((U32)(fminf(fmaxf(v.y, 0.0f), 1.0f) * 255.0f) << 8) |
        ((U32)(fminf(fmaxf(v.z, 0.0f), 1.0f) * 255.0f) << 16) |
        ((U32)(fminf(fmaxf(v.w, 0.0f), 1.0f) * 255.0f) << 24);
}



extern "C" __declspec(__global__) void reconstructKernel(void)
{
    

    const ReconstructInput& in = c_ReconstructInput;
    int taskIdx = threadIdx.x + blockDim.x * (threadIdx.y + blockDim.y * (blockIdx.x + gridDim.x * blockIdx.y));
    if (taskIdx >= in.numPrimary)
        return;

    

    int                     primarySlot     = in.firstPrimary + taskIdx;
    int                     primaryID       = ((const S32*)in.primarySlotToID)[primarySlot];
    const RayResult&        primaryResult   = ((const RayResult*)in.primaryResults)[primarySlot];
    const S32*              batchSlots      = (const S32*)in.batchIDToSlot + ((in.isPrimary) ? primaryID : taskIdx * in.numRaysPerPrimary);
    const RayResult*        batchResults    = (const RayResult*)in.batchResults;
    const U32*          triMaterialColor    = (const U32*)in.triMaterialColor;
    const U32*          triShadedColor      = (const U32*)in.triShadedColor;
    U32&                    pixel           = ((U32*)in.pixels)[primaryID];
    Vec4f                   bgColor         = Vec4f(0.2f, 0.4f, 0.8f, 1.0f);

    

    Vec4f color = Vec4f(0.0f);
    for (int i = 0; i < in.numRaysPerPrimary; i++)
    {
        int tri = batchResults[batchSlots[i]].id;					
        if (tri == -1)
		{
			if(in.isPrimary)	color += bgColor;					
			else				color += Vec4f(1.0f);				
		}
        else
		{
			if(in.isAO)			color += Vec4f(0,0,0,1);			
			else				color += fromABGR(triShadedColor[tri]);
		}
    }
    color *= 1.0f / (F32)in.numRaysPerPrimary;

    

    int tri = primaryResult.id;
    if (in.isAO && tri == -1)   color = bgColor;
    if (in.isDiffuse)			color *= (tri == -1) ? bgColor : fromABGR(triMaterialColor[tri]);

    

    pixel = toABGR(color);
}



extern "C" __declspec(__global__) void countHitsKernel(void)
{
    

    const CountHitsInput& in = c_CountHitsInput;

    int bidx        = blockIdx.x + blockIdx.y * gridDim.x;
    int tidx        = threadIdx.x + threadIdx.y * CountHits_BlockWidth;
    int blockSize   = CountHits_BlockWidth * CountHits_BlockHeight;
    int blockStart  = bidx * blockSize * in.raysPerThread;
    int blockEnd    = ::min(blockStart + blockSize * in.raysPerThread, in.numRays);

    if (blockStart >= blockEnd)
        return;

    

    S32 threadTotal = 0;
    for (int i = blockStart + tidx; i < blockEnd; i += blockSize)
        if (((const RayResult*)in.rayResults)[i].id >= 0)
            threadTotal++;

    

    __declspec(__shared__) volatile S32 red[CountHits_BlockWidth * CountHits_BlockHeight];
    red[tidx] = threadTotal;
    red[tidx] += red[tidx ^ 1];
    red[tidx] += red[tidx ^ 2];
    red[tidx] += red[tidx ^ 4];
    red[tidx] += red[tidx ^ 8];
    red[tidx] += red[tidx ^ 16];

    

    __syncthreads();
    if ((tidx & 32) == 0)
        red[tidx] += red[tidx ^ 32];

    __syncthreads();
    if ((tidx & 64) == 0)
        red[tidx] += red[tidx ^ 64];

    __syncthreads();
    if ((tidx & 128) == 0)
        red[tidx] += red[tidx ^ 128];

    

    if (tidx == 0)
        atomicAdd(&g_CountHitsOutput, red[tidx]);
}


